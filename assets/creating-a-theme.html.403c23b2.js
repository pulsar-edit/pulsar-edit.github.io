import{_ as i,a as l,b as d}from"./theme-side-by-side.33cf8d5d.js";import{_ as c}from"./dev-tools.1b7b2813.js";import{_ as h,o as u,c as p,a as e,b as t,d as s,e as m,w as g,f as o,r as n}from"./app.87197fef.js";const b={},f=e("h2",{id:"creating-a-theme",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#creating-a-theme","aria-hidden":"true"},"#"),t(" Creating a Theme")],-1),y={href:"http://lesscss.org/",target:"_blank",rel:"noopener noreferrer"},k=o('<p>Pulsar supports two types of themes: <em>UI</em> and <em>Syntax</em>. UI themes style elements such as the tree view, the tabs, drop-down lists, and the status bar. Syntax themes style the code, gutter and other elements inside the editor view.</p><p><img src="'+i+'" alt="Theme boundary"></p><p>Themes can be installed and changed from the Settings View which you can open by selecting the <strong><em>LNX</em></strong>: <em>Edit &gt; Preferences</em> - <strong><em>MAC</em></strong>: <em>Pulsar &gt; Preferences</em> - <strong><em>WIN</em></strong>: <em>File &gt; Preferences</em> menu, and clicking the &quot;Install&quot; or &quot;Themes&quot; tab on the left hand navigation.</p><h3 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting Started</h3><p>Themes are pretty straightforward but it&#39;s still helpful to be familiar with a few things before starting:</p>',5),v={href:"https://speakerdeck.com/danmatthews/less-css",target:"_blank",rel:"noopener noreferrer"},w=o('<li>You may also want to review the concept of a <code>package.json</code> (as covered in <a href="#package-json">Pulsar <code>package.json</code></a>). This file is used to help distribute your theme to Pulsar users.</li><li>Your theme&#39;s <code>package.json</code> must contain a <code>theme</code> key with a value of <code>ui</code> or <code>syntax</code> for Pulsar to recognize and load it as a theme.</li>',2),_={href:"https://web.pulsar-edit.dev/packages",target:"_blank",rel:"noopener noreferrer"},x=o('<h3 id="creating-a-syntax-theme" tabindex="-1"><a class="header-anchor" href="#creating-a-syntax-theme" aria-hidden="true">#</a> Creating a Syntax Theme</h3><p>Let&#39;s create your first theme.</p><p>To get started, press <strong><em>LNX/WIN</em></strong>: <kbd>Ctrl+Shift+P</kbd> - <strong><em>MAC</em></strong>: <kbd>Cmd+Shift+P</kbd> and start typing <code>Generate Syntax Theme</code> to generate a new theme package. Select <code>Generate Syntax Theme</code>, and you&#39;ll be asked for the path where your theme will be created. Let&#39;s call ours <code>motif-syntax</code>.</p><div class="custom-container tip"><p class="custom-container-title">Tip</p><p>Syntax themes should end with <em>-syntax</em> and UI themes should end with <em>-ui</em>.</p></div><p>Pulsar will display a new window, showing the motif-syntax theme, with a default set of folders and files created for us. If you open the Settings View with <strong><em>LNX/WIN</em></strong>: <kbd>Ctrl+,</kbd> - <strong><em>MAC</em></strong>: <kbd>Cmd+,</kbd> and click the &quot;Themes&quot; tab on the left, you&#39;ll see the &quot;Motif&quot; theme listed in the &quot;Syntax Theme&quot; drop-down. Select it from the menu to activate it, now when you open an editor you should see your new motif-syntax theme in action.</p><p>Open up <code>styles/colors.less</code> to change the various color variables which have already been defined. For example, turn <code>@red</code> into <code>#f4c2c1</code>.</p><p>Then open <code>styles/base.less</code> and modify the various selectors that have already been defined. These selectors style different parts of code in the editor such as comments, strings and the line numbers in the gutter.</p><p>As an example, let&#39;s make the <code>.gutter</code> <code>background-color</code> into <code>@red</code>.</p><p>Reload Pulsar by pressing <strong><em>LNX/WIN</em></strong>: <kbd>Alt+Ctrl+R</kbd> - <strong><em>MAC</em></strong>: <kbd>Alt+Cmd+Ctrl+L</kbd> to see the changes you made reflected in your Pulsar window. Pretty neat!</p><div class="custom-container tip"><p class="custom-container-title">Tip</p><p>You can avoid reloading to see changes you make by opening an Pulsar window in Dev Mode. To open a Dev Mode Pulsar window run <code>pulsar --dev .</code> in the terminal, or use the <em>View &gt; Developer &gt; Open in Dev Mode</em> menu. When you edit your theme, changes will instantly be reflected!</p></div><div class="custom-container note"><p class="custom-container-title">Note</p><p>It&#39;s advised to <em>not</em> specify a <code>font-family</code> in your syntax theme because it will override the Font Family field in Pulsar&#39;s settings. If you still like to recommend a font that goes well with your theme, we suggest you do so in your README.</p></div><h3 id="creating-a-ui-theme" tabindex="-1"><a class="header-anchor" href="#creating-a-ui-theme" aria-hidden="true">#</a> Creating a UI Theme</h3><p>To create a UI theme, do the following:</p>',13),C={href:"https://github.com/pulsar-edit/ui-theme-template",target:"_blank",rel:"noopener noreferrer"},P=o("<li>Clone the forked repository to the local filesystem</li><li>Open a terminal in the forked theme&#39;s directory</li><li>Open your new theme in a Dev Mode Pulsar window run <code>pulsar --dev .</code> in the terminal or use the <em>View &gt; Developer &gt; Open in Dev Mode</em> menu</li><li>Change the name of the theme in the theme&#39;s <code>package.json</code> file</li><li>Name your theme end with a <code>-ui</code>, for example <code>super-white-ui</code></li><li>Run <code>pulsar -p link --dev</code> to symlink your repository to <strong><em>LNX/MAC</em></strong>: <code>~/.pulsar/dev/packages</code> - <strong><em>WIN</em></strong>: <code>%USERPROFILE%\\.pulsar</code></li><li>Reload Pulsar using <strong><em>LNX/WIN</em></strong>: <kbd>Alt+Ctrl+R</kbd> - <strong><em>MAC</em></strong>: <kbd>Alt+Cmd+Ctrl+L</kbd></li><li>Enable the theme via the &quot;UI Theme&quot; drop-down in the &quot;Themes&quot; tab of the Settings View</li><li>Make changes! Since you opened the theme in a Dev Mode window, changes will be instantly reflected in the editor without having to reload.</li>",9),T=o('<div class="custom-container tip"><p class="custom-container-title">Tip</p><p>Because we used <code>pulsar -p link --dev</code> in the above instructions, if you break anything you can always close Pulsar and launch Pulsar normally to force Pulsar to the default theme. This allows you to continue working on your theme even if something goes catastrophically wrong.</p></div><h3 id="theme-variables" tabindex="-1"><a class="header-anchor" href="#theme-variables" aria-hidden="true">#</a> Theme Variables</h3><p>UI themes <strong>must</strong> provide a <code>ui-variables.less</code> and Syntax themes a <code>syntax-variables.less</code> file. It contains predefined variables that packages use to make sure the look and feel matches.</p><p>Here the variables with the default values:</p>',4),S={href:"https://github.com/pulsar-edit/pulsar/blob/master/static/variables/ui-variables.less",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/pulsar-edit/pulsar/blob/master/static/variables/syntax-variables.less",target:"_blank",rel:"noopener noreferrer"},N=e("p",null,"These default values will be used as a fallback in case a theme doesn't define its own variables.",-1),q=e("h4",{id:"use-in-packages",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#use-in-packages","aria-hidden":"true"},"#"),t(" Use in Packages")],-1),L=e("p",null,[t("In any of your package's "),e("code",null,".less"),t(" files, you can access the theme variables by importing the "),e("code",null,"ui-variables"),t(" or "),e("code",null,"syntax-variables"),t(" file from Pulsar.")],-1),M={href:"https://github.com/pulsar-edit/styleguide",target:"_blank",rel:"noopener noreferrer"},D=o(`<p>Here&#39;s an example <code>.less</code> file that a package can define using theme variables:</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@import</span> <span class="token string">&quot;ui-variables&quot;</span><span class="token punctuation">;</span></span>

<span class="token selector">.my-selector</span> <span class="token punctuation">{</span>
	<span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token atrule"><span class="token rule">@base-background-color</span><span class="token punctuation">;</span></span>
	<span class="token property">padding</span><span class="token punctuation">:</span> <span class="token atrule"><span class="token rule">@component-padding</span><span class="token punctuation">;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@import</span> <span class="token string">&quot;syntax-variables&quot;</span><span class="token punctuation">;</span></span>

<span class="token selector">.my-selector</span> <span class="token punctuation">{</span>
	<span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token atrule"><span class="token rule">@syntax-background-color</span><span class="token punctuation">;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="development-workflow" tabindex="-1"><a class="header-anchor" href="#development-workflow" aria-hidden="true">#</a> Development workflow</h3><p>There are a few tools to help make theme development faster and easier.</p><h4 id="live-reload" tabindex="-1"><a class="header-anchor" href="#live-reload" aria-hidden="true">#</a> Live Reload</h4>`,6),A=e("strong",null,[e("em",null,"LNX/WIN")],-1),R=e("kbd",null,"Alt+Ctrl+R",-1),O=e("strong",null,[e("em",null,"MAC")],-1),V=e("kbd",null,"Alt+Cmd+Ctrl+L",-1),W={href:"https://github.com/pulsar-edit/pulsar/tree/master/packages/dev-live-reload",target:"_blank",rel:"noopener noreferrer"},U=o('<p>To launch a Dev Mode window:</p><ul><li>Open your theme directory in a dev window by selecting the <em>View &gt; Developer &gt; Open in Dev Mode</em> menu item</li><li>Or launch Pulsar from the terminal with <code>pulsar --dev</code></li></ul><p>If you&#39;d like to reload all the styles at any time, you can use the shortcut <strong><em>LNX/WIN</em></strong>: <kbd>Alt+Ctrl+R</kbd> - <strong><em>MAC</em></strong>: <kbd>Alt+Cmd+Ctrl+L</kbd>,</p><h4 id="developer-tools" tabindex="-1"><a class="header-anchor" href="#developer-tools" aria-hidden="true">#</a> Developer Tools</h4><p>Pulsar is based on the Chromium browser and supports its Developer Tools. You can open them by selecting the <em>View &gt; Developer &gt; Toggle Developer Tools</em> menu, or by using the <strong><em>LNX/WIN</em></strong>: <kbd>Ctrl+Shift+I</kbd> - <strong><em>MAC</em></strong>: <kbd>Alt+Cmd+I</kbd></p><p>The dev tools allow you to inspect elements and take a look at their CSS properties.</p><p><img src="'+c+'" alt="Developer Tools"></p>',7),X={href:"https://developer.chrome.com/devtools/docs/dom-and-styles",target:"_blank",rel:"noopener noreferrer"},E=e("h4",{id:"pulsar-styleguide",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pulsar-styleguide","aria-hidden":"true"},"#"),t(" Pulsar Styleguide")],-1),Y={href:"https://github.com/pulsar-edit/styleguide",target:"_blank",rel:"noopener noreferrer"},F=o('<p>To open the Styleguide, open the command palette with <strong><em>LNX/WIN</em></strong>: <kbd>Ctrl+Shift+P</kbd> - <strong><em>MAC</em></strong>: <kbd>Cmd+Shift+P</kbd> and search for <code>styleguide</code>, or use the shortcut <strong><em>LNX/WIN</em></strong>: <kbd>Ctrl+Shift+G</kbd> - <strong><em>MAC</em></strong>: <kbd>Cmd+Ctrl+Shift+G</kbd>.</p><p><img src="'+l+'" alt="Style Guide"></p><h4 id="side-by-side" tabindex="-1"><a class="header-anchor" href="#side-by-side" aria-hidden="true">#</a> Side by side</h4><p>Sometimes when creating a theme (or package) things can go wrong and the editor becomes unusable. E.g. if the text and background have the same color or something gets pushed out of sight. To avoid having to open Pulsar in &quot;normal&quot; mode to fix the issue, it&#39;s advised to open <strong>two</strong> Pulsar windows. One for making changes and one in Dev Mode to see the changes getting applied.</p><p><img src="'+d+'" alt="Side by side screenshot"></p><blockquote><p>Make changes on the <strong>left</strong>, see the changes getting applied in &quot;Dev Mode&quot; on the <strong>right</strong>.</p></blockquote><p>Now if you mess up something, only the window in &quot;Dev Mode&quot; will be affected and you can easily correct the mistake in your &quot;normal&quot; window.</p><h3 id="publish-your-theme" tabindex="-1"><a class="header-anchor" href="#publish-your-theme" aria-hidden="true">#</a> Publish your theme</h3><p>Once you&#39;re happy with your theme and would like to share it with other Pulsar users, it&#39;s time to publish it. \u{1F389}</p>',9);function G(j,B){const a=n("ExternalLinkIcon"),r=n("RouterLink");return u(),p("div",null,[f,e("p",null,[t("Pulsar's interface is rendered using HTML, and it's styled via "),e("a",y,[t("Less"),s(a)]),t(" which is a superset of CSS. Don't worry if you haven't heard of Less before; it's just like CSS, but with a few handy extensions.")]),k,e("ul",null,[e("li",null,[t("Less is a superset of CSS, but it has some really handy features like variables. If you aren't familiar with its syntax, take a few minutes to "),e("a",v,[t("familiarize yourself"),s(a)]),t(".")]),w,e("li",null,[t("You can find existing themes to install or fork in "),e("a",_,[t("Pulsar Package Repository"),s(a)]),t(". "),m("TODO: Update to a themes URL if we get one on the front end site")])]),x,e("ol",null,[e("li",null,[t("Fork the "),e("a",C,[t("ui-theme-template"),s(a)])]),P]),T,e("ul",null,[e("li",null,[e("a",S,[t("ui-variables.less"),s(a)])]),e("li",null,[e("a",I,[t("syntax-variables.less"),s(a)])])]),N,q,L,e("p",null,[t("Your package should generally only specify structural styling, and these should come from "),e("a",M,[t("the style guide"),s(a)]),t(". Your package shouldn't specify colors, padding sizes, or anything in absolute pixels. You should instead use the theme variables. If you follow this guideline, your package will look good out of the box with any theme!")]),D,e("p",null,[t("Reloading by pressing "),A,t(": "),R,t(" - "),O,t(": "),V,t(" after you make changes to your theme is less than ideal. Pulsar supports "),e("a",W,[t("live updating"),s(a)]),t(" of styles on Pulsar windows in Dev Mode.")]),U,e("p",null,[t("Check out Google's "),e("a",X,[t("extensive tutorial"),s(a)]),t(" for a short introduction.")]),E,e("p",null,[t("If you are creating an UI theme, you'll want a way to see how your theme changes affect all the components in the system. The "),e("a",Y,[t("Styleguide"),s(a)]),t(" is a page that renders every component Pulsar supports.")]),F,e("p",null,[t("Follow the steps on the "),s(r,{to:"/docs/launch-manual/sections/core-hacking/sections/#publishing/"},{default:g(()=>[t("Publishing")]),_:1}),t(" page. The example used is for the Word Count package, but publishing a theme works exactly the same.")])])}const K=h(b,[["render",G],["__file","creating-a-theme.html.vue"]]);export{K as default};
