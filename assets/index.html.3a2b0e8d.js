import{_ as p}from"./spec-deps.b3f6a1b6.js";import{_ as i}from"./dep-cop.6353fb49.js";import{_ as l,o as r,c as d,a as e,b as n,d as s,w as u,f as t,r as o}from"./app.87197fef.js";const m={},h=t(`<div class="custom-container danger"><p class="custom-container-title">STOP</p><p>This is being kept for archival purposes only from the original Atom documentation. As this may no longer be relevant to Pulsar, use this at your own risk. Current Pulsar documentation is found at <a href="/docs/launch-manual/getting-started">documentation home</a>.</p></div><h2 id="upgrading-to-1-0-apis" tabindex="-1"><a class="header-anchor" href="#upgrading-to-1-0-apis" aria-hidden="true">#</a> Upgrading to 1.0 APIs</h2><div class="custom-container note"><p class="custom-container-title">Note</p><p><strong>Note:</strong> Atom has been at v1.x for over a year, so this appendix is mostly obsolete at this point. We&#39;re retaining it for historic and reference purposes.</p></div><p>Atom is at 1.0! Much of the effort leading up to the 1.0 has been cleaning up APIs in an attempt to future proof, and make a more pleasant experience developing packages. If you have developed packages or syntaxes for Atom before the 1.0 API, you can find some tips on upgrading your work in this appendix.</p><h3 id="upgrading-your-package" tabindex="-1"><a class="header-anchor" href="#upgrading-your-package" aria-hidden="true">#</a> Upgrading Your Package</h3><p>This document will guide you through the large bits of upgrading your package to work with 1.0 APIs.</p><h4 id="tl-dr" tabindex="-1"><a class="header-anchor" href="#tl-dr" aria-hidden="true">#</a> TL;DR</h4><p>We&#39;ve set deprecation messages and errors in strategic places to help make sure you don&#39;t miss anything. You should be able to get 95% of the way to an updated package just by fixing errors and deprecations. There are a couple of things you can do to get the full effect of all the errors and deprecations.</p><h5 id="use-atom-space-pen-views" tabindex="-1"><a class="header-anchor" href="#use-atom-space-pen-views" aria-hidden="true">#</a> Use atom-space-pen-views</h5><p>If you use any class from <code>require &#39;atom&#39;</code> with a <code>$</code> or <code>View</code> in the name, add the <code>atom-space-pen-views</code> module to your package&#39;s <code>package.json</code> file&#39;s dependencies:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;atom-space-pen-views&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.0.3&quot;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then run <code>apm install</code> in your package directory.</p><h5 id="require-views-from-atom-space-pen-views" tabindex="-1"><a class="header-anchor" href="#require-views-from-atom-space-pen-views" aria-hidden="true">#</a> Require views from atom-space-pen-views</h5><p>Anywhere you are requiring one of the following from <code>atom</code> you need to require them from <code>atom-space-pen-views</code> instead.</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># require these from &#39;atom-space-pen-views&#39; rather than &#39;atom&#39;</span>
$
$$
$$$
View
TextEditorView
ScrollView
SelectListView
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So this:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># Old way</span>
<span class="token punctuation">{</span>$<span class="token punctuation">,</span> TextEditorView<span class="token punctuation">,</span> View<span class="token punctuation">,</span> GitRepository<span class="token punctuation">}</span> <span class="token operator">=</span> require <span class="token string">&#39;atom&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Would be replaced by this:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># New way</span>
<span class="token punctuation">{</span>GitRepository<span class="token punctuation">}</span> <span class="token operator">=</span> require <span class="token string">&#39;atom&#39;</span>
<span class="token punctuation">{</span>$<span class="token punctuation">,</span> TextEditorView<span class="token punctuation">,</span> View<span class="token punctuation">}</span> <span class="token operator">=</span> require <span class="token string">&#39;atom-space-pen-views&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="run-specs-and-test-your-package" tabindex="-1"><a class="header-anchor" href="#run-specs-and-test-your-package" aria-hidden="true">#</a> Run specs and test your package</h5><p>You wrote specs, right!? Here&#39;s where they shine. Run them with <code>cmd-shift-P</code>, and search for <code>run package specs</code>. It will show all the deprecation messages and errors.</p><h5 id="update-the-engines-field" tabindex="-1"><a class="header-anchor" href="#update-the-engines-field" aria-hidden="true">#</a> Update the engines field</h5><p>When you are deprecation free and all done converting, upgrade the <code>engines</code> field in your package.json:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;engines&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;atom&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&gt;=0.174.0 &lt;2.0.0&quot;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h5>`,25),k={href:"https://github.com/atom/atom/issues/4011",target:"_blank",rel:"noopener noreferrer"},v=t('<h4 id="deprecations" tabindex="-1"><a class="header-anchor" href="#deprecations" aria-hidden="true">#</a> Deprecations</h4><p>All of the methods in Atom core that have changes will emit deprecation messages when called. These messages are shown in two places: your <strong>package specs</strong>, and in Deprecation Cop.</p><h5 id="specs" tabindex="-1"><a class="header-anchor" href="#specs" aria-hidden="true">#</a> Specs</h5><p>Just run your specs, and all the deprecations will be displayed in yellow.</p><p><img src="'+p+'" alt="Deprecations in Specs"></p><div class="custom-container note"><p class="custom-container-title">Note</p><p><strong>Note:</strong> Deprecations are only displayed when executing specs through the &quot;Window: Run Package Specs&quot; command in the Atom UI. Deprecations are not displayed when running specs at the terminal.</p></div><h5 id="deprecation-cop" tabindex="-1"><a class="header-anchor" href="#deprecation-cop" aria-hidden="true">#</a> Deprecation Cop</h5><p>Run Atom in Dev Mode, <code>atom --dev</code>, with your package loaded, and open Deprecation Cop (search for &quot;deprecation&quot; in the command palette). Deprecated methods will appear in Deprecation Cop only after they have been called.</p><p><img src="'+i+`" alt="Deprecation Cop"></p><p>When Deprecation Cop is open, and deprecated methods are called, a <code>Refresh</code> button will appear in the top right of the Deprecation Cop interface. So exercise your package, then come back to Deprecation Cop and click the <code>Refresh</code> button.</p><h4 id="upgrading-your-views" tabindex="-1"><a class="header-anchor" href="#upgrading-your-views" aria-hidden="true">#</a> Upgrading your Views</h4><p>Previous to 1.0, views were baked into Atom core. These views were based on jQuery and <code>space-pen</code>. They looked something like this:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># The old way: getting views from atom</span>
<span class="token punctuation">{</span>$<span class="token punctuation">,</span> TextEditorView<span class="token punctuation">,</span> View<span class="token punctuation">}</span> <span class="token operator">=</span> require <span class="token string">&#39;atom&#39;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span>
<span class="token keyword">class</span> <span class="token class-name">SomeView</span> <span class="token keyword">extends</span> <span class="token class-name">View</span>
  @<span class="token property">content</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token class-member variable">@div</span> <span class="token property">class</span><span class="token operator">:</span> <span class="token string">&#39;find-and-replace&#39;</span><span class="token punctuation">,</span> <span class="token operator">=&gt;</span>
      <span class="token class-member variable">@div</span> <span class="token property">class</span><span class="token operator">:</span> <span class="token string">&#39;block&#39;</span><span class="token punctuation">,</span> <span class="token operator">=&gt;</span>
        <span class="token class-member variable">@subview</span> <span class="token string">&#39;myEditor&#39;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TextEditorView</span><span class="token punctuation">(</span><span class="token property">mini</span><span class="token operator">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span>
  <span class="token comment">#...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="the-new" tabindex="-1"><a class="header-anchor" href="#the-new" aria-hidden="true">#</a> The New</h5><p><code>require &#39;atom&#39;</code> no longer provides view helpers or jQuery. Atom Core is now &#39;view agnostic&#39;. The preexisting view system is available from a new Node module: atom-space-pen-views.</p><p>atom-space-pen-views now provides jQuery, space-pen views, and Atom specific views:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># These are now provided by atom-space-pen-views</span>
$
$$
$$$
View
TextEditorView
ScrollView
SelectListView
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="adding-the-module-dependencies" tabindex="-1"><a class="header-anchor" href="#adding-the-module-dependencies" aria-hidden="true">#</a> Adding the module dependencies</h5><p>To use the new views, you need to specify the atom-space-pen-views module in your package&#39;s <code>package.json</code> file&#39;s dependencies:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;atom-space-pen-views&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.0.3&quot;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>space-pen bundles jQuery. If you do not need space-pen or any of the views, you can require jQuery directly.</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;jquery&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2&quot;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="converting-your-views" tabindex="-1"><a class="header-anchor" href="#converting-your-views" aria-hidden="true">#</a> Converting your views</h5><p>Sometimes it is as simple as converting the requires at the top of each view page. I assume you read the &#39;TL;DR&#39; section and have updated all of your requires.</p><h5 id="upgrading-classes-extending-any-space-pen-view" tabindex="-1"><a class="header-anchor" href="#upgrading-classes-extending-any-space-pen-view" aria-hidden="true">#</a> Upgrading classes extending any space-pen View</h5><h6 id="afterattach-and-beforeremove-updated" tabindex="-1"><a class="header-anchor" href="#afterattach-and-beforeremove-updated" aria-hidden="true">#</a> <code>afterAttach</code> and <code>beforeRemove</code> updated</h6><p>The <code>afterAttach</code> and <code>beforeRemove</code> hooks have been replaced with <code>attached</code> and <code>detached</code> and the semantics have changed.</p><p><code>afterAttach</code> was called whenever the node was attached to another DOM node, even if that parent node wasn&#39;t present in the DOM. <code>afterAttach</code> also was called with a boolean indicating whether or not the element and its parents were on the DOM. Now the <code>attached</code> hook is <em>only</em> called when the node and all of its parents are actually on the DOM, and is not called with a boolean.</p><p><code>beforeRemove</code> was only called when <code>$.fn.remove</code> was called, which was typically used when the node was completely removed from the DOM. The new <code>detached</code> hook is called whenever the DOM node is <em>detached</em>, which could happen if the node is being detached for reattachment later. In short, if <code>beforeRemove</code> is called the node is never coming back. With <code>detached</code> it might be attached again later.</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># Old way</span>
<span class="token punctuation">{</span>View<span class="token punctuation">}</span> <span class="token operator">=</span> require <span class="token string">&#39;atom&#39;</span>
<span class="token keyword">class</span> <span class="token class-name">MyView</span> <span class="token keyword">extends</span> <span class="token class-name">View</span>
  <span class="token property">afterAttach</span><span class="token operator">:</span> <span class="token punctuation">(</span>onDom<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token comment">#...</span>

  <span class="token property">beforeRemove</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token comment">#...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># New way</span>
<span class="token punctuation">{</span>View<span class="token punctuation">}</span> <span class="token operator">=</span> require <span class="token string">&#39;atom-space-pen-views&#39;</span>
<span class="token keyword">class</span> <span class="token class-name">MyView</span> <span class="token keyword">extends</span> <span class="token class-name">View</span>
  <span class="token property">attached</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token comment"># Always called with the equivalent of @afterAttach(true)!</span>
    <span class="token comment">#...</span>

  <span class="token property">detached</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token comment">#...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="subscribe-and-subscribetocommand-methods-removed" tabindex="-1"><a class="header-anchor" href="#subscribe-and-subscribetocommand-methods-removed" aria-hidden="true">#</a> <code>subscribe</code> and <code>subscribeToCommand</code> methods removed</h6><p>The <code>subscribe</code> and <code>subscribeToCommand</code> methods have been removed. See the Eventing and Disposables section for more info.</p><h5 id="upgrading-to-the-new-texteditorview" tabindex="-1"><a class="header-anchor" href="#upgrading-to-the-new-texteditorview" aria-hidden="true">#</a> Upgrading to the new TextEditorView</h5>`,34),b=e("code",null,"TextEditorView",-1),g=e("code",null,"TextEditor",-1),f=e("code",null,"TextEditorView::getModel",-1),w={href:"https://github.com/atom/atom-space-pen-views#texteditorview",target:"_blank",rel:"noopener noreferrer"},y=e("code",null,"TextEditorView",-1),x={href:"https://atom.io/docs/api/latest/TextEditor",target:"_blank",rel:"noopener noreferrer"},_=e("code",null,"TextEditor",-1),V=t(`<h5 id="upgrading-classes-extending-scrollview" tabindex="-1"><a class="header-anchor" href="#upgrading-classes-extending-scrollview" aria-hidden="true">#</a> Upgrading classes extending ScrollView</h5><p>The <code>ScrollView</code> has very minor changes.</p><p>You can no longer use <code>@off</code> to remove default behavior for <code>core:move-up</code>, <code>core:move-down</code>, etc.</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># Old way to turn off default behavior</span>
<span class="token keyword">class</span> <span class="token class-name">ResultsView</span> <span class="token keyword">extends</span> <span class="token class-name">ScrollView</span>
  <span class="token property">initialize</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token class-member variable">@model</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># turn off default scrolling behavior from ScrollView</span>
    @<span class="token keyword">off</span> <span class="token string">&#39;core:move-up&#39;</span>
    @<span class="token keyword">off</span> <span class="token string">&#39;core:move-down&#39;</span>
    @<span class="token keyword">off</span> <span class="token string">&#39;core:move-left&#39;</span>
    @<span class="token keyword">off</span> <span class="token string">&#39;core:move-right&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># New way to turn off default behavior</span>
<span class="token keyword">class</span> <span class="token class-name">ResultsView</span> <span class="token keyword">extends</span> <span class="token class-name">ScrollView</span>
  <span class="token property">initialize</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token class-member variable">@model</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    disposable <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># turn off default scrolling behavior from ScrollView</span>
    disposable<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),D={href:"https://github.com/atom/find-and-replace/pull/311/files#diff-9",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/atom/atom-space-pen-views#scrollview",target:"_blank",rel:"noopener noreferrer"},O=t(`<h5 id="upgrading-classes-extending-selectlistview" tabindex="-1"><a class="header-anchor" href="#upgrading-classes-extending-selectlistview" aria-hidden="true">#</a> Upgrading classes extending SelectListView</h5><p>Your <code>SelectListView</code> might look something like this:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># Old!</span>
<span class="token keyword">class</span> <span class="token class-name">CommandPaletteView</span> <span class="token keyword">extends</span> <span class="token class-name">SelectListView</span>
  <span class="token property">initialize</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    @<span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">&#39;command-palette overlay from-top&#39;</span><span class="token punctuation">)</span>
    atom<span class="token punctuation">.</span>workspaceView<span class="token punctuation">.</span>command <span class="token string">&#39;command-palette:toggle&#39;</span><span class="token punctuation">,</span> <span class="token operator">=&gt;</span> @<span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token property">confirmed</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">,</span> jQuery<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    @<span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># do something with the result</span>

  <span class="token property">toggle</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token keyword">if</span> @<span class="token function">hasParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      @<span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span>
      @<span class="token function">attach</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token property">attach</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    @<span class="token function">storeFocusedElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># TODO: build items</span>
    @<span class="token function">setItems</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>

    atom<span class="token punctuation">.</span>workspaceView<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    @<span class="token function">focusFilterEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token property">confirmed</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">,</span> jQuery<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    @<span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This attaches and detaches itself from the DOM when toggled, canceling magically detaches it from the DOM, and it uses the classes <code>overlay</code> and <code>from-top</code>.</p><p>The new SelectListView no longer automatically detaches itself from the DOM when cancelled. It&#39;s up to you to implement whatever cancel behavior you want. Using the new APIs to mimic the semantics of the old class, it should look like this:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># New!</span>
<span class="token keyword">class</span> <span class="token class-name">CommandPaletteView</span> <span class="token keyword">extends</span> <span class="token class-name">SelectListView</span>
  <span class="token property">initialize</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># no more need for the \`overlay\` and \`from-top\` classes</span>
    @<span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">&#39;command-palette&#39;</span><span class="token punctuation">)</span>
    atom<span class="token punctuation">.</span>commands<span class="token punctuation">.</span>add <span class="token string">&#39;atom-workspace&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;command-palette:toggle&#39;</span><span class="token punctuation">,</span> <span class="token operator">=&gt;</span> @<span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment"># You need to implement the \`cancelled\` method and hide.</span>
  <span class="token property">cancelled</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    @<span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token property">confirmed</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">,</span> jQuery<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    @<span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># do something with the result</span>

  <span class="token property">toggle</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token comment"># Toggling now checks panel visibility,</span>
    <span class="token comment"># and hides / shows rather than attaching to / detaching from the DOM.</span>
    <span class="token keyword">if</span> <span class="token class-member variable">@panel</span><span class="token operator">?.</span><span class="token function">isVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      @<span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span>
      @<span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token property">show</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token comment"># Now you will add your select list as a modal panel to the workspace</span>
    <span class="token class-member variable">@panel</span> <span class="token operator">?</span><span class="token operator">=</span> atom<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">addModalPanel</span><span class="token punctuation">(</span><span class="token property">item</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token class-member variable">@panel</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    @<span class="token function">storeFocusedElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># TODO: build items</span>
    @<span class="token function">setItems</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>

    @<span class="token function">focusFilterEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token property">hide</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token class-member variable">@panel</span><span class="token operator">?.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),E={href:"https://github.com/atom/command-palette/pull/19/files",target:"_blank",rel:"noopener noreferrer"},M=e("code",null,"CommandPaletteView",-1),C={href:"https://github.com/atom/atom-space-pen-views#selectlistview",target:"_blank",rel:"noopener noreferrer"},S=e("code",null,"SelectListView",-1),j=t(`<h4 id="using-the-model-layer-rather-than-the-view-layer" tabindex="-1"><a class="header-anchor" href="#using-the-model-layer-rather-than-the-view-layer" aria-hidden="true">#</a> Using the model layer rather than the view layer</h4><p>The API no longer exposes any specialized view objects or view classes. <code>atom.workspaceView</code>, and all the view classes: <code>WorkspaceView</code>, <code>EditorView</code>, <code>PaneView</code>, etc. have been globally deprecated.</p><p>Nearly all of the atom-specific actions performed by the old view objects can now be managed via the model layer. For example, here&#39;s adding a panel to the interface using the <code>atom.workspace</code> model instead of the <code>workspaceView</code>:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># Old!</span>
div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
atom<span class="token punctuation">.</span>workspaceView<span class="token punctuation">.</span><span class="token function">appendToTop</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># New!</span>
div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
atom<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">addTopPanel</span><span class="token punctuation">(</span><span class="token property">item</span><span class="token operator">:</span> div<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For actions that still require the view, such as dispatching commands or munging css classes, you&#39;ll access the view via the <code>atom.views.getView()</code> method. This will return a subclass of <code>HTMLElement</code> rather than a jQuery object or an instance of a deprecated view class (e.g. <code>WorkspaceView</code>).</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># Old!</span>
workspaceView <span class="token operator">=</span> atom<span class="token punctuation">.</span>workspaceView
editorView <span class="token operator">=</span> workspaceView<span class="token punctuation">.</span><span class="token function">getActiveEditorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
paneView <span class="token operator">=</span> editorView<span class="token punctuation">.</span><span class="token function">getPaneView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># New!</span>
<span class="token comment"># Generally, just use the models</span>
workspace <span class="token operator">=</span> atom<span class="token punctuation">.</span>workspace
editor <span class="token operator">=</span> workspace<span class="token punctuation">.</span><span class="token function">getActiveTextEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
pane <span class="token operator">=</span> editor<span class="token punctuation">.</span><span class="token function">getPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># If you need views, get them with \`getView\`</span>
workspaceElement <span class="token operator">=</span> atom<span class="token punctuation">.</span>views<span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span>atom<span class="token punctuation">.</span>workspace<span class="token punctuation">)</span>
editorElement <span class="token operator">=</span> atom<span class="token punctuation">.</span>views<span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span>editor<span class="token punctuation">)</span>
paneElement <span class="token operator">=</span> atom<span class="token punctuation">.</span>views<span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span>pane<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="updating-specs" tabindex="-1"><a class="header-anchor" href="#updating-specs" aria-hidden="true">#</a> Updating Specs</h4><p><code>atom.workspaceView</code>, the <code>WorkspaceView</code> class and the <code>EditorView</code> class have been deprecated. These two objects are used heavily throughout specs, mostly to dispatch events and commands. This section will explain how to remove them while still retaining the ability to dispatch events and commands.</p><h5 id="removing-workspaceview-references" tabindex="-1"><a class="header-anchor" href="#removing-workspaceview-references" aria-hidden="true">#</a> Removing <code>WorkspaceView</code> references</h5><p><code>WorkspaceView</code> has been deprecated. Everything you could do on the view, you can now do on the <code>Workspace</code> model.</p><p>Requiring <code>WorkspaceView</code> from <code>atom</code> and accessing any methods on it will throw a deprecation warning. Many specs lean heavily on <code>WorkspaceView</code> to trigger commands and fetch <code>EditorView</code> objects.</p><p>Your specs might contain something like this:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># Old!</span>
<span class="token punctuation">{</span>WorkspaceView<span class="token punctuation">}</span> <span class="token operator">=</span> require <span class="token string">&#39;atom&#39;</span>
describe <span class="token string">&#39;FindView&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  beforeEach <span class="token operator">-</span><span class="token operator">&gt;</span>
    atom<span class="token punctuation">.</span>workspaceView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkspaceView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Instead, we will use the <code>atom.views.getView()</code> method. This will return a plain <code>HTMLElement</code>, not a <code>WorkspaceView</code> or jQuery object.</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># New!</span>
describe <span class="token string">&#39;FindView&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  workspaceElement <span class="token operator">=</span> <span class="token keyword">null</span>
  beforeEach <span class="token operator">-</span><span class="token operator">&gt;</span>
    workspaceElement <span class="token operator">=</span> atom<span class="token punctuation">.</span>views<span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span>atom<span class="token punctuation">.</span>workspace<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="attaching-the-workspace-to-the-dom" tabindex="-1"><a class="header-anchor" href="#attaching-the-workspace-to-the-dom" aria-hidden="true">#</a> Attaching the workspace to the DOM</h5><p>The workspace needs to be attached to the DOM in some cases. For example, view hooks only work (<code>attached()</code> on <code>View</code>, <code>attachedCallback()</code> on custom elements) when there is a descendant attached to the DOM.</p><p>You might see this in your specs:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># Old!</span>
atom<span class="token punctuation">.</span>workspaceView<span class="token punctuation">.</span><span class="token function">attachToDom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Change it to:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># New!</span>
jasmine<span class="token punctuation">.</span><span class="token function">attachToDOM</span><span class="token punctuation">(</span>workspaceElement<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="removing-editorview-references" tabindex="-1"><a class="header-anchor" href="#removing-editorview-references" aria-hidden="true">#</a> Removing EditorView references</h5><p>Like <code>WorkspaceView</code>, <code>EditorView</code> has been deprecated. Everything you needed to do on the view you are now able to do on the <code>TextEditor</code> model.</p><p>In many cases, you will not even need to get the editor&#39;s view anymore. Any of those instances should be updated to use the <code>TextEditor</code> instance instead. You should really only need the editor&#39;s view when you plan on triggering a command on the view in a spec.</p><p>Your specs might contain something like this:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># Old!</span>
describe <span class="token string">&#39;Something&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token punctuation">[</span>editorView<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  beforeEach <span class="token operator">-</span><span class="token operator">&gt;</span>
    editorView <span class="token operator">=</span> atom<span class="token punctuation">.</span>workspaceView<span class="token punctuation">.</span><span class="token function">getActiveView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We&#39;re going to use <code>atom.views.getView()</code> again to get the editor element. As in the case of the <code>workspaceElement</code>, <code>getView</code> will return a subclass of <code>HTMLElement</code> rather than an <code>EditorView</code> or jQuery object.</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># New!</span>
describe <span class="token string">&#39;Something&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token punctuation">[</span>editor<span class="token punctuation">,</span> editorElement<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  beforeEach <span class="token operator">-</span><span class="token operator">&gt;</span>
    editor <span class="token operator">=</span> atom<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">getActiveTextEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    editorElement <span class="token operator">=</span> atom<span class="token punctuation">.</span>views<span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span>editor<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="dispatching-commands" tabindex="-1"><a class="header-anchor" href="#dispatching-commands" aria-hidden="true">#</a> Dispatching commands</h5><p>Since the <code>editorElement</code> objects are no longer jQuery objects, they no longer support <code>trigger()</code>. Additionally, Atom has a new command dispatcher, <code>atom.commands</code>, that we use rather than commandeering jQuery&#39;s <code>trigger</code> method.</p><p>From this:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># Old!</span>
workspaceView<span class="token punctuation">.</span>trigger <span class="token string">&#39;a-package:toggle&#39;</span>
editorView<span class="token punctuation">.</span>trigger <span class="token string">&#39;find-and-replace:show&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To this:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># New!</span>
atom<span class="token punctuation">.</span>commands<span class="token punctuation">.</span>dispatch workspaceElement<span class="token punctuation">,</span> <span class="token string">&#39;a-package:toggle&#39;</span>
atom<span class="token punctuation">.</span>commands<span class="token punctuation">.</span>dispatch editorElement<span class="token punctuation">,</span> <span class="token string">&#39;find-and-replace:show&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventing-and-disposables" tabindex="-1"><a class="header-anchor" href="#eventing-and-disposables" aria-hidden="true">#</a> Eventing and Disposables</h4><p>A couple large things changed with respect to events:</p>`,38),A={href:"https://atom.io/docs/api/latest/Disposable",target:"_blank",rel:"noopener noreferrer"},q=e("code",null,"Disposable",-1),I=e("li",null,[n("The "),e("code",null,"subscribe()"),n(" method is no longer available on "),e("code",null,"space-pen"),n(),e("code",null,"View"),n(" objects")],-1),N=e("li",null,[n("An Emitter is now provided from "),e("code",null,"require 'atom'")],-1),P=e("h5",{id:"consuming-events",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#consuming-events","aria-hidden":"true"},"#"),n(" Consuming Events")],-1),W={href:"https://atom.io/docs/api/latest/Disposable",target:"_blank",rel:"noopener noreferrer"},R=e("code",null,"Disposable",-1),L=e("code",null,"dispose()",-1),U=t(`<div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># Old!</span>
editor<span class="token punctuation">.</span><span class="token keyword">on</span> <span class="token string">&#39;changed&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># New!</span>
disposable <span class="token operator">=</span> editor<span class="token punctuation">.</span>onDidChange <span class="token operator">-</span><span class="token operator">&gt;</span>

<span class="token comment"># You can unsubscribe at some point in the future via \`dispose()\`</span>
disposable<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Deprecation warnings will guide you toward the correct methods.</p><h6 id="using-a-compositedisposable" tabindex="-1"><a class="header-anchor" href="#using-a-compositedisposable" aria-hidden="true">#</a> Using a <code>CompositeDisposable</code></h6><p>You can group multiple disposables into a single disposable with a <code>CompositeDisposable</code>.</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token punctuation">{</span>CompositeDisposable<span class="token punctuation">}</span> <span class="token operator">=</span> require <span class="token string">&#39;atom&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">Something</span>
  <span class="token property">constructor</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    editor <span class="token operator">=</span> atom<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">getActiveTextEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token class-member variable">@disposables</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositeDisposable</span>
    <span class="token class-member variable">@disposables</span><span class="token punctuation">.</span>add editor<span class="token punctuation">.</span>onDidChange <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token class-member variable">@disposables</span><span class="token punctuation">.</span>add editor<span class="token punctuation">.</span>onDidChangePath <span class="token operator">-</span><span class="token operator">&gt;</span>

  <span class="token property">destroy</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token class-member variable">@disposables</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="removing-view-subscribe-and-subscriber-subscribe-calls" tabindex="-1"><a class="header-anchor" href="#removing-view-subscribe-and-subscriber-subscribe-calls" aria-hidden="true">#</a> Removing <code>View::subscribe</code> and <code>Subscriber::subscribe</code> calls</h5><p>There were a couple permutations of <code>subscribe()</code>. In these examples, a <code>CompositeDisposable</code> is used as it will commonly be useful where conversion is necessary.</p><h6 id="subscribe-unsubscribable" tabindex="-1"><a class="header-anchor" href="#subscribe-unsubscribable" aria-hidden="true">#</a> <code>subscribe(unsubscribable)</code></h6><p>This one is very straight forward.</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># Old!</span>
<span class="token class-member variable">@subscribe</span> editor<span class="token punctuation">.</span><span class="token keyword">on</span> <span class="token string">&#39;changed&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># New!</span>
disposables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositeDisposable</span>
disposables<span class="token punctuation">.</span>add editor<span class="token punctuation">.</span>onDidChange <span class="token operator">-</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="subscribe-modelobject-event-method" tabindex="-1"><a class="header-anchor" href="#subscribe-modelobject-event-method" aria-hidden="true">#</a> <code>subscribe(modelObject, event, method)</code></h6><p>When the modelObject is an Atom model object, the change is very simple. Just use the correct event method, and add it to your CompositeDisposable.</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># Old!</span>
<span class="token class-member variable">@subscribe</span> editor<span class="token punctuation">,</span> <span class="token string">&#39;changed&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># New!</span>
disposables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositeDisposable</span>
disposables<span class="token punctuation">.</span>add editor<span class="token punctuation">.</span>onDidChange <span class="token operator">-</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="subscribe-jqueryobject-selector-optional-event-method" tabindex="-1"><a class="header-anchor" href="#subscribe-jqueryobject-selector-optional-event-method" aria-hidden="true">#</a> <code>subscribe(jQueryObject, selector(optional), event, method)</code></h6><p>Things are a little more complicated when subscribing to a DOM or jQuery element. Atom no longer provides helpers for subscribing to elements. You can use jQuery or the native DOM APIs, whichever you prefer.</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># Old!</span>
<span class="token class-member variable">@subscribe</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">window</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;focus&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># New!</span>
<span class="token punctuation">{</span>Disposable<span class="token punctuation">,</span> CompositeDisposable<span class="token punctuation">}</span> <span class="token operator">=</span> require <span class="token string">&#39;atom&#39;</span>
disposables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositeDisposable</span>

<span class="token comment"># New with jQuery</span>
focusCallback <span class="token operator">=</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">window</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">on</span> <span class="token string">&#39;focus&#39;</span><span class="token punctuation">,</span> focusCallback
disposables<span class="token punctuation">.</span>add <span class="token keyword">new</span> <span class="token class-name">Disposable</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">window</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">off</span> <span class="token string">&#39;focus&#39;</span><span class="token punctuation">,</span> focusCallback

<span class="token comment"># New with native APIs</span>
focusCallback <span class="token operator">=</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
<span class="token keyword">window</span><span class="token punctuation">.</span>addEventListener <span class="token string">&#39;focus&#39;</span><span class="token punctuation">,</span> focusCallback
disposables<span class="token punctuation">.</span>add <span class="token keyword">new</span> <span class="token class-name">Disposable</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token keyword">window</span><span class="token punctuation">.</span>removeEventListener <span class="token string">&#39;focus&#39;</span><span class="token punctuation">,</span> focusCallback
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="providing-events-using-the-emitter" tabindex="-1"><a class="header-anchor" href="#providing-events-using-the-emitter" aria-hidden="true">#</a> Providing Events: Using the <code>Emitter</code></h5>`,21),$=e("code",null,"emissary",-1),Y=e("code",null,"Emitter",-1),F=e("code",null,"require 'atom'",-1),Q=e("code",null,"Emitter",-1),H={href:"https://atom.io/docs/api/latest/Emitter",target:"_blank",rel:"noopener noreferrer"},z=e("code",null,"Emitter",-1),G=t(`<div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># New!</span>
<span class="token punctuation">{</span>Emitter<span class="token punctuation">}</span> <span class="token operator">=</span> require <span class="token string">&#39;atom&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">Something</span>
  <span class="token property">constructor</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token class-member variable">@emitter</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Emitter</span>

  <span class="token property">destroy</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token class-member variable">@emitter</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token property">onDidChange</span><span class="token operator">:</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token class-member variable">@emitter</span><span class="token punctuation">.</span><span class="token keyword">on</span> <span class="token string">&#39;did-change&#39;</span><span class="token punctuation">,</span> callback

  <span class="token property">methodThatFiresAChange</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token class-member variable">@emitter</span><span class="token punctuation">.</span>emit <span class="token string">&#39;did-change&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token property">data</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span>

<span class="token comment"># Using the evented class</span>
something <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Something</span>
something<span class="token punctuation">.</span><span class="token function">onDidChange</span> <span class="token punctuation">(</span>eventObject<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  console<span class="token punctuation">.</span>log eventObject<span class="token punctuation">.</span>data <span class="token comment"># =&gt; 2</span>
something<span class="token punctuation">.</span><span class="token function">methodThatFiresAChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="subscribing-to-commands" tabindex="-1"><a class="header-anchor" href="#subscribing-to-commands" aria-hidden="true">#</a> Subscribing To Commands</h4>`,2),B=e("code",null,"$.fn.command",-1),J=e("code",null,"View::subscribeToCommand",-1),K=e("code",null,"atom.commands.add",-1),X=e("code",null,"CompositeDisposable",-1),Z={href:"https://atom.io/docs/api/latest/CommandRegistry#instance-add",target:"_blank",rel:"noopener noreferrer"},ee=t(`<div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># Old!</span>
atom<span class="token punctuation">.</span>workspaceView<span class="token punctuation">.</span>command <span class="token string">&#39;core:close core:cancel&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">&gt;</span>

<span class="token comment"># When inside a View class, you might see this</span>
<span class="token class-member variable">@subscribeToCommand</span> <span class="token string">&#39;core:close core:cancel&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># New!</span>
<span class="token class-member variable">@disposables</span><span class="token punctuation">.</span>add atom<span class="token punctuation">.</span>commands<span class="token punctuation">.</span>add <span class="token string">&#39;atom-workspace&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;core:close&#39;</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token string-property property">&#39;core:cancel&#39;</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">&gt;</span>

<span class="token comment"># You can register commands directly on individual DOM elements in addition to</span>
<span class="token comment"># using selectors. When in a View class, you should have a \`@element\` object</span>
<span class="token comment"># available. \`@element\` is a plain HTMLElement object</span>
<span class="token class-member variable">@disposables</span><span class="token punctuation">.</span>add atom<span class="token punctuation">.</span>commands<span class="token punctuation">.</span>add <span class="token class-member variable">@element</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;core:close&#39;</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token string-property property">&#39;core:cancel&#39;</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="upgrading-your-stylesheet-s-selectors" tabindex="-1"><a class="header-anchor" href="#upgrading-your-stylesheet-s-selectors" aria-hidden="true">#</a> Upgrading your stylesheet&#39;s selectors</h4>`,3),ne={href:"https://blog.atom.io/2014/11/18/avoiding-style-pollution-with-the-shadow-dom.html",target:"_blank",rel:"noopener noreferrer"},se=t('<div class="custom-container note"><p class="custom-container-title">Note</p><p><strong>Note:</strong> The Shadow DOM was removed in Atom <code>1.13</code>. The <code>::shadow</code> and <code>/deep/</code> selectors and the context-targeted style sheets described below won&#39;t work and should not be used anymore.</p></div><h3 id="upgrading-your-ui-theme-or-package-selectors" tabindex="-1"><a class="header-anchor" href="#upgrading-your-ui-theme-or-package-selectors" aria-hidden="true">#</a> Upgrading Your UI Theme Or Package Selectors</h3><p>In addition to changes in Atom&#39;s scripting API, we&#39;ll also be making some breaking changes to Atom&#39;s DOM structure, requiring style sheets and keymaps in both packages and themes to be updated.</p><h4 id="deprecation-cop-1" tabindex="-1"><a class="header-anchor" href="#deprecation-cop-1" aria-hidden="true">#</a> Deprecation Cop</h4><p>Deprecation Cop will list usages of deprecated selector patterns to guide you. You can access it via the Command Palette (<code>cmd-shift-p</code>, then search for <code>Deprecation</code>). It breaks the deprecations down by package:</p><p><img src="'+i+'" alt="Deprecation Cop"></p><h4 id="custom-tags" tabindex="-1"><a class="header-anchor" href="#custom-tags" aria-hidden="true">#</a> Custom Tags</h4><p>Rather than adding classes to standard HTML elements to indicate their role, Atom now uses custom element names. For example, <code>&lt;div class=&quot;workspace&quot;&gt;</code> has now been replaced with <code>&lt;atom-workspace&gt;</code>. Selectors should be updated accordingly. Note that tag names have lower specificity than classes in CSS, so you&#39;ll need to take care in converting things.</p><table><thead><tr><th style="text-align:left;">Old Selector</th><th style="text-align:left;">New Selector</th></tr></thead><tbody><tr><td style="text-align:left;"><code>.editor</code></td><td style="text-align:left;"><code>atom-text-editor</code></td></tr><tr><td style="text-align:left;"><code>.editor.mini</code></td><td style="text-align:left;"><code>atom-text-editor[mini]</code></td></tr><tr><td style="text-align:left;"><code>.workspace</code></td><td style="text-align:left;"><code>atom-workspace</code></td></tr><tr><td style="text-align:left;"><code>.horizontal</code></td><td style="text-align:left;"><code>atom-workspace-axis.horizontal</code></td></tr><tr><td style="text-align:left;"><code>.vertical</code></td><td style="text-align:left;"><code>atom-workspace-axis.vertical</code></td></tr><tr><td style="text-align:left;"><code>.pane-container</code></td><td style="text-align:left;"><code>atom-pane-container</code></td></tr><tr><td style="text-align:left;"><code>.pane</code></td><td style="text-align:left;"><code>atom-pane</code></td></tr><tr><td style="text-align:left;"><code>.tool-panel</code></td><td style="text-align:left;"><code>atom-panel</code></td></tr><tr><td style="text-align:left;"><code>.panel-top</code></td><td style="text-align:left;"><code>atom-panel.top</code></td></tr><tr><td style="text-align:left;"><code>.panel-bottom</code></td><td style="text-align:left;"><code>atom-panel.bottom</code></td></tr><tr><td style="text-align:left;"><code>.panel-left</code></td><td style="text-align:left;"><code>atom-panel.left</code></td></tr><tr><td style="text-align:left;"><code>.panel-right</code></td><td style="text-align:left;"><code>atom-panel.right</code></td></tr><tr><td style="text-align:left;"><code>.overlay</code></td><td style="text-align:left;"><code>atom-panel.modal</code></td></tr></tbody></table><h4 id="supporting-the-shadow-dom" tabindex="-1"><a class="header-anchor" href="#supporting-the-shadow-dom" aria-hidden="true">#</a> Supporting the Shadow DOM</h4>',10),ae={href:"https://www.html5rocks.com/en/tutorials/webcomponents/shadowdom",target:"_blank",rel:"noopener noreferrer"},te=e("ul",null,[e("li",null,"Highlight decorations"),e("li",null,"Gutter decorations"),e("li",null,"Line decorations"),e("li",null,"Scrollbar styling"),e("li",null,[n("Anything targeting a child selector of "),e("code",null,".editor")])],-1),oe=e("p",null,"During a transition phase, it will be possible to enable or disable the text editor's shadow DOM in the settings, so themes will need to be compatible with both approaches.",-1),ie=e("h5",{id:"shadow-dom-selectors",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#shadow-dom-selectors","aria-hidden":"true"},"#"),n(" Shadow DOM Selectors")],-1),ce=e("code",null,"::shadow",-1),pe=e("code",null,"/deep/",-1),le={href:"https://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201#toc-style-cat-hat",target:"_blank",rel:"noopener noreferrer"},re=t(`<h6 id="shadow" tabindex="-1"><a class="header-anchor" href="#shadow" aria-hidden="true">#</a> <code>::shadow</code></h6><p>The <code>::shadow</code> pseudo-element allows you to bypass a single shadow root. For example, say you want to update a highlight decoration for a linter package. Initially, the style looks as follows:</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">// Without shadow DOM support
atom-text-editor .highlight.my-linter</span> <span class="token punctuation">{</span>
	<span class="token property">background</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In order for this style to apply with the shadow DOM enabled, you will need to add a second selector with the <code>::shadow</code> pseudo-element. You should leave the original selector in place so your theme continues to work with the shadow DOM disabled during the transition period.</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">// With shadow DOM support
atom-text-editor .highlight.my-linter,
atom-text-editor::shadow .highlight.my-linter</span> <span class="token punctuation">{</span>
	<span class="token property">background</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),de={href:"https://github.com/atom/find-and-replace/blob/95351f261bc384960a69b66bf12eae8002da63f9/stylesheets/find-and-replace.less#L9-L29",target:"_blank",rel:"noopener noreferrer"},ue=e("code",null,"::shadow",-1),me=t(`<h6 id="deep" tabindex="-1"><a class="header-anchor" href="#deep" aria-hidden="true">#</a> <code>/deep/</code></h6><p>The <code>/deep/</code> combinator overrides <em>all</em> shadow boundaries, making it useful for rules you want to apply globally such as scrollbar styling. Here&#39;s a snippet containing scrollbar styling for the Atom Dark UI theme before shadow DOM support:</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">// Without shadow DOM support
.scrollbars-visible-always</span> <span class="token punctuation">{</span>
	<span class="token selector">::-webkit-scrollbar</span> <span class="token punctuation">{</span>
		<span class="token property">width</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>
		<span class="token property">height</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token selector">::-webkit-scrollbar-track,
	::-webkit-scrollbar-corner</span> <span class="token punctuation">{</span>
		<span class="token property">background</span><span class="token punctuation">:</span> <span class="token atrule"><span class="token rule">@scrollbar-background-color</span><span class="token punctuation">;</span></span>
	<span class="token punctuation">}</span>

	<span class="token selector">::-webkit-scrollbar-thumb</span> <span class="token punctuation">{</span>
		<span class="token property">background</span><span class="token punctuation">:</span> <span class="token atrule"><span class="token rule">@scrollbar-color</span><span class="token punctuation">;</span></span>
		<span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
		<span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 1px black inset<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To style scrollbars even inside of the shadow DOM, each rule needs to be prefixed with <code>/deep/</code>. We use <code>/deep/</code> instead of <code>::shadow</code> because we don&#39;t care about the selector of the host element in this case. We just want our styling to apply everywhere.</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">// With shadow DOM support using /deep/
.scrollbars-visible-always</span> <span class="token punctuation">{</span>
	<span class="token selector">/deep/ ::-webkit-scrollbar</span> <span class="token punctuation">{</span>
		<span class="token property">width</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>
		<span class="token property">height</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token selector">/deep/ ::-webkit-scrollbar-track,
	/deep/ ::-webkit-scrollbar-corner</span> <span class="token punctuation">{</span>
		<span class="token property">background</span><span class="token punctuation">:</span> <span class="token atrule"><span class="token rule">@scrollbar-background-color</span><span class="token punctuation">;</span></span>
	<span class="token punctuation">}</span>

	<span class="token selector">/deep/ ::-webkit-scrollbar-thumb</span> <span class="token punctuation">{</span>
		<span class="token property">background</span><span class="token punctuation">:</span> <span class="token atrule"><span class="token rule">@scrollbar-color</span><span class="token punctuation">;</span></span>
		<span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
		<span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 1px black inset<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="context-targeted-style-sheets" tabindex="-1"><a class="header-anchor" href="#context-targeted-style-sheets" aria-hidden="true">#</a> Context-Targeted Style Sheets</h5><p>The selector features discussed above allow you to target shadow DOM content with specific selectors, but Atom also allows you to target a specific shadow DOM context with an entire style sheet. The context into which a style sheet is loaded is based on the file name. If you want to load a style sheet into the editor, name it with the <code>.atom-text-editor.less</code> or <code>.atom-text-editor.css</code> extensions.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>my-ui-theme/
  styles/
    index.less                   # loaded globally
    index.atom-text-editor.less  # loaded in the text editor shadow DOM
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),he={href:"https://github.com/atom/decoration-example/blob/master/styles/decoration-example.atom-text-editor.less",target:"_blank",rel:"noopener noreferrer"},ke=t('<p>Inside a context-targeted style sheet, there&#39;s no need to use the <code>::shadow</code> or <code>/deep/</code> expressions. If you want to refer to the element containing the shadow root, you can use the <code>::host</code> pseudo-element.</p><p>During the transition phase, style sheets targeting the <code>atom-text-editor</code> context will <em>also</em> be loaded globally. Make sure you update your selectors in a way that maintains compatibility with the shadow DOM being disabled. That means if you use a <code>::host</code> pseudo element, you should also include the same style rule matches against <code>atom-text-editor</code>.</p><div class="custom-container note"><p class="custom-container-title">Note</p><p><strong>Note:</strong> The Shadow DOM was removed in Atom <code>1.13</code>. The <code>:host</code> selector described below won&#39;t work and should not be used anymore.</p></div><h3 id="upgrading-your-syntax-theme" tabindex="-1"><a class="header-anchor" href="#upgrading-your-syntax-theme" aria-hidden="true">#</a> Upgrading Your Syntax Theme</h3>',4),ve={href:"https://www.html5rocks.com/en/tutorials/webcomponents/shadowdom",target:"_blank",rel:"noopener noreferrer"},be=e("p",null,[n("Syntax themes are specifically intended to style only text editor content, so they are automatically loaded directly into the text editor's shadow DOM when it is enabled. This happens automatically when the theme's "),e("code",null,"package.json"),n(" contains a "),e("code",null,'theme: "syntax"'),n(" declaration, so you don't need to change anything to target the appropriate context.")],-1),ge=e("em",null,"outside",-1),fe=e("code",null,".editor",-1),we=e("code",null,".editor-colors",-1),ye=e("code",null,":host",-1),xe=e("code",null,"atom-text-editor",-1),_e={href:"https://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201#toc-style-host",target:"_blank",rel:"noopener noreferrer"},Ve=e("code",null,":host",-1),De=t(`<p>Here&#39;s an example from Atom&#39;s light syntax theme. Note that the <code>atom-text-editor</code> selector intended to target the editor from the outside has been retained to allow the theme to keep working during the transition phase when it is possible to disable the shadow DOM.</p><div class="language-less ext-less line-numbers-mode"><pre class="language-less"><code><span class="token selector">atom-text-editor,
:host</span> <span class="token punctuation">{</span>
	<span class="token comment">/* :host added */</span>
	<span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">@syntax-background-color</span><span class="token punctuation">;</span>
	<span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@syntax-text-color</span><span class="token punctuation">;</span>

	<span class="token selector">.invisible-character</span> <span class="token punctuation">{</span>
		<span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@syntax-invisible-character-color</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">/* more nested selectors... */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function Te(Oe,Ee){const a=o("ExternalLinkIcon"),c=o("RouterLink");return r(),d("div",null,[h,e("p",null,[n("We have upgraded all the core packages. Please see "),e("a",k,[n("this issue"),s(a)]),n(" for a link to all the upgrade PRs.")]),v,e("p",null,[n("All of the atom-specific methods available on the "),b,n(" have been moved to the "),g,n(", available via "),f,n(". See the "),e("a",w,[y,n(" docs"),s(a)]),n(" and "),e("a",x,[_,n(" docs"),s(a)]),n(" for more info.")]),V,e("ul",null,[e("li",null,[n("Check out "),e("a",D,[n("an example"),s(a)]),n(" from find-and-replace.")]),e("li",null,[n("See the "),e("a",T,[n("docs"),s(a)]),n(" for all the options.")])]),O,e("ul",null,[e("li",null,[n("And check out the "),e("a",E,[n("conversion of "),M,s(a)]),n(" as a real-world example.")]),e("li",null,[n("See the "),e("a",C,[S,n(" docs"),s(a)]),n(" for all options.")])]),j,e("ol",null,[e("li",null,[n("All model events are now exposed as event subscription methods that return "),e("a",A,[q,s(a)]),n(" objects")]),I,N]),P,e("p",null,[n("All events from the Atom API are now methods that return a "),e("a",W,[R,s(a)]),n(" object, on which you can call "),L,n(" to unsubscribe.")]),U,e("p",null,[n("You no longer need to require "),$,n(" to get an emitter. We now provide an "),Y,n(" class from "),F,n(". We have a specific pattern for use of the "),Q,n(". Rather than mixing it in, we instantiate a member variable, and create explicit subscription methods. For more information see the "),e("a",H,[z,n(" docs"),s(a)]),n(".")]),G,e("p",null,[B,n(" and "),J,n(" are no longer available. Now we use "),K,n(", and collect the results in a "),X,n(". See "),e("a",Z,[n("the docs"),s(a)]),n(" for more info.")]),ee,e("p",null,[n("Many selectors have changed, and we have introduced the "),e("a",ne,[n("Shadow DOM"),s(a)]),n(" to the editor. See the "),s(c,{to:"/upgrading-to-1-0-apis/sections/upgrading-your-ui-theme-or-package-selectors/"},{default:u(()=>[n("Upgrading Your UI Theme And Package Selectors guide")]),_:1}),n(" for more information in upgrading your package stylesheets.")]),se,e("p",null,[n("Text editor content is now rendered in the shadow DOM, which shields it from being styled by global style sheets to protect against accidental style pollution. For more background on the shadow DOM, check out the "),e("a",ae,[n("Shadow DOM 101"),s(a)]),n(" on HTML 5 Rocks. If you need to style text editor content in a UI theme, you'll need to circumvent this protection for any rules that target the text editor's content. Some examples of the kinds of UI theme styles needing to be updated:")]),te,oe,ie,e("p",null,[n("Chromium provides two tools for bypassing shadow boundaries, the "),ce,n(" pseudo-element and the "),pe,n(" combinator. For an in-depth explanation of styling the shadow DOM, see the "),e("a",le,[n("Shadow DOM 201"),s(a)]),n(" article on HTML 5 Rocks.")]),re,e("p",null,[n("Check out the "),e("a",de,[n("find-and-replace"),s(a)]),n(" package for another example of using "),ue,n(" to pierce the shadow DOM.")]),me,e("p",null,[n("Check out this "),e("a",he,[n("style sheet"),s(a)]),n(" from the decoration-example package for an example of context-targeting.")]),ke,e("p",null,[n("Text editor content is now rendered in the shadow DOM, which shields it from being styled by global style sheets to protect against accidental style pollution. For more background on the shadow DOM, check out the "),e("a",ve,[n("Shadow DOM 101"),s(a)]),n(" on HTML 5 Rocks.")]),be,e("p",null,[n("When theme style sheets are loaded into the text editor's shadow DOM, selectors intended to target the editor from the "),ge,n(" no longer make sense. Styles targeting the "),fe,n(" and "),we,n(" classes instead need to target the "),ye,n(" pseudo-element, which matches against the containing "),xe,n(" node. Check out the "),e("a",_e,[n("Shadow DOM 201"),s(a)]),n(" article for more information about the "),Ve,n(" pseudo-element.")]),De])}const je=l(m,[["render",Te],["__file","index.html.vue"]]);export{je as default};
