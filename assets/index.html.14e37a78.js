import{_ as d}from"./keybinding.964a4e0d.js";import{_ as u}from"./markup.30f112ce.js";import{_ as m,o as k,c as h,a as n,b as s,d as e,w as o,f as t,r as l}from"./app.87197fef.js";const v={},g=t(`<div class="custom-container danger"><p class="custom-container-title">STOP</p><p>This is being kept for archival purposes only from the original Atom documentation. As this may no longer be relevant to Pulsar, use this at your own risk. Current Pulsar documentation is found at <a href="/docs/launch-manual/getting-started">documentation home</a>.</p></div><h2 id="behind-atom" tabindex="-1"><a class="header-anchor" href="#behind-atom" aria-hidden="true">#</a> Behind Atom</h2><p>Now that we&#39;ve written a number of packages and themes, let&#39;s take minute to take a closer look at some of the ways that Atom works in greater depth. Here we&#39;ll go into more of a deep dive on individual internal APIs and systems of Atom, even looking at some Atom source to see how things are really getting done.</p><h3 id="configuration-api" tabindex="-1"><a class="header-anchor" href="#configuration-api" aria-hidden="true">#</a> Configuration API</h3><h4 id="reading-config-settings" tabindex="-1"><a class="header-anchor" href="#reading-config-settings" aria-hidden="true">#</a> Reading Config Settings</h4><p>If you are writing a package that you want to make configurable, you&#39;ll need to read config settings via the <code>atom.config</code> global. You can read the current value of a namespaced config key with <code>atom.config.get</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// read a value with \`config.get\`</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>atom<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;editor.showInvisibles&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">showInvisibles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or you can subscribe via <code>atom.config.observe</code> to track changes from any view object.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span>View<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;space-pen&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">MyView</span> <span class="token keyword">extends</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">attached</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fontSizeObserveSubscription <span class="token operator">=</span>
      atom<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token string">&#39;editor.fontSize&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> <span class="token punctuation">{</span>previous<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">adjustFontSize</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">detached</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fontSizeObserveSubscription<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>atom.config.observe</code> method will call the given callback immediately with the current value for the specified key path, and it will also call it in the future whenever the value of that key path changes. If you only want to invoke the callback the next time the value changes, use <code>atom.config.onDidChange</code> instead.</p>`,10),b={href:"https://atom.io/docs/api/latest/Disposable",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"Disposable",-1),y=n("code",null,"@fontSizeObserveSubscription",-1),w={href:"https://atom.io/docs/api/latest/CompositeDisposable",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"CompositeDisposable",-1),x=t(`<h4 id="writing-config-settings" tabindex="-1"><a class="header-anchor" href="#writing-config-settings" aria-hidden="true">#</a> Writing Config Settings</h4><p>The <code>atom.config</code> database is populated on startup from <span class="platform-mac platform-linux"><code>~/.atom/config.cson</code></span><span class="platform-windows"><code>%USERPROFILE%\\.atom\\config.cson</code></span>, but you can programmatically write to it with <code>atom.config.set</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// basic key update</span>
atom<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;core.showInvisibles&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,3),j={href:"https://atom.io/docs/api/latest/Config",target:"_blank",rel:"noopener noreferrer"},q=n("h3",{id:"keymaps-in-depth",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#keymaps-in-depth","aria-hidden":"true"},"#"),s(" Keymaps In-Depth")],-1),S=n("h4",{id:"structure-of-a-keymap-file",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#structure-of-a-keymap-file","aria-hidden":"true"},"#"),s(" Structure of a Keymap File")],-1),z=n("p",null,[s("Keymap files are encoded as JSON or CSON files containing nested hashes. They work much like style sheets, but instead of applying style properties to elements matching the selector, they specify the meaning of keystrokes on elements matching the selector. Here is an example of some bindings that apply when keystrokes pass through "),n("code",null,"atom-text-editor"),s(" elements:")],-1),A=n("div",{class:"language-coffee ext-coffee line-numbers-mode"},[n("pre",{class:"language-coffee"},[n("code",null,[n("span",{class:"token string-property property"},"'atom-text-editor'"),n("span",{class:"token operator"},":"),s(`
  `),n("span",{class:"token string-property property"},"'ctrl-left'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'editor:move-to-beginning-of-word'"),s(`
  `),n("span",{class:"token string-property property"},"'ctrl-right'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'editor:move-to-end-of-word'"),s(`
  `),n("span",{class:"token string-property property"},"'ctrl-shift-left'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'editor:select-to-beginning-of-word'"),s(`
  `),n("span",{class:"token string-property property"},"'ctrl-shift-right'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'editor:select-to-end-of-word'"),s(`
  `),n("span",{class:"token string-property property"},"'ctrl-backspace'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'editor:delete-to-beginning-of-word'"),s(`
  `),n("span",{class:"token string-property property"},"'ctrl-delete'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'editor:delete-to-end-of-word'"),s(`

`),n("span",{class:"token string-property property"},"'atom-text-editor:not([mini])'"),n("span",{class:"token operator"},":"),s(`
  `),n("span",{class:"token string-property property"},"'ctrl-alt-['"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'editor:fold-current-row'"),s(`
  `),n("span",{class:"token string-property property"},"'ctrl-alt-]'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'editor:unfold-current-row'"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),O=n("div",{class:"language-coffee ext-coffee line-numbers-mode"},[n("pre",{class:"language-coffee"},[n("code",null,[n("span",{class:"token string-property property"},"'atom-text-editor'"),n("span",{class:"token operator"},":"),s(`
  `),n("span",{class:"token string-property property"},"'cmd-delete'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'editor:delete-to-beginning-of-line'"),s(`
  `),n("span",{class:"token string-property property"},"'alt-backspace'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'editor:delete-to-beginning-of-word'"),s(`
  `),n("span",{class:"token string-property property"},"'ctrl-A'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'editor:select-to-first-character-of-line'"),s(`
  `),n("span",{class:"token string-property property"},"'ctrl-shift-e'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'editor:select-to-end-of-line'"),s(`
  `),n("span",{class:"token string-property property"},"'cmd-left'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'editor:move-to-first-character-of-line'"),s(`

`),n("span",{class:"token string-property property"},"'atom-text-editor:not([mini])'"),n("span",{class:"token operator"},":"),s(`
  `),n("span",{class:"token string-property property"},"'cmd-alt-['"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'editor:fold-current-row'"),s(`
  `),n("span",{class:"token string-property property"},"'cmd-alt-]'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'editor:unfold-current-row'"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=n("div",{class:"language-coffee ext-coffee line-numbers-mode"},[n("pre",{class:"language-coffee"},[n("code",null,[n("span",{class:"token string-property property"},"'atom-text-editor'"),n("span",{class:"token operator"},":"),s(`
  `),n("span",{class:"token string-property property"},"'ctrl-left'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'editor:move-to-beginning-of-word'"),s(`
  `),n("span",{class:"token string-property property"},"'ctrl-right'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'editor:move-to-end-of-word'"),s(`
  `),n("span",{class:"token string-property property"},"'ctrl-shift-left'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'editor:select-to-beginning-of-word'"),s(`
  `),n("span",{class:"token string-property property"},"'ctrl-shift-right'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'editor:select-to-end-of-word'"),s(`
  `),n("span",{class:"token string-property property"},"'ctrl-backspace'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'editor:delete-to-beginning-of-word'"),s(`
  `),n("span",{class:"token string-property property"},"'ctrl-delete'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'editor:delete-to-end-of-word'"),s(`

`),n("span",{class:"token string-property property"},"'atom-text-editor:not([mini])'"),n("span",{class:"token operator"},":"),s(`
  `),n("span",{class:"token string-property property"},"'ctrl-alt-['"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'editor:fold-current-row'"),s(`
  `),n("span",{class:"token string-property property"},"'ctrl-alt-]'"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'editor:unfold-current-row'"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=t(`<p>Beneath the first selector are several keybindings, mapping specific key combinations to commands. When an element with the <code>atom-text-editor</code> class is focused and <kbd class="platform-mac">Alt+Backspace</kbd><kbd class="platform-windows platform-linux">Ctrl+Backspace</kbd> is pressed, a custom DOM event called <code>editor:delete-to-beginning-of-word</code> is emitted on the <code>atom-text-editor</code> element.</p><p>The second selector group also targets editors, but only if they don&#39;t have the <code>mini</code> attribute. In this example, the commands for code folding don&#39;t really make sense on mini-editors, so the selector restricts them to regular editors.</p><h5 id="key-combinations" tabindex="-1"><a class="header-anchor" href="#key-combinations" aria-hidden="true">#</a> Key Combinations</h5><p>Key combinations express one or more keys combined with optional modifier keys. For example: <code>ctrl-w v</code>, or <code>cmd-shift-up</code>. A key combination is composed of the following symbols, separated by a <code>-</code>. A key sequence can be expressed as key combinations separated by spaces.</p><table><thead><tr><th style="text-align:left;">Type</th><th style="text-align:left;">Examples</th></tr></thead><tbody><tr><td style="text-align:left;">Character literals</td><td style="text-align:left;"><code>a</code> <code>4</code> <code>$</code></td></tr><tr><td style="text-align:left;">Modifier keys</td><td style="text-align:left;"><code>cmd</code> <code>ctrl</code> <code>alt</code> <code>shift</code></td></tr><tr><td style="text-align:left;">Special keys</td><td style="text-align:left;"><code>enter</code> <code>escape</code> <code>backspace</code> <code>delete</code> <code>tab</code> <code>home</code> <code>end</code> <code>pageup</code> <code>pagedown</code> <code>left</code> <code>right</code> <code>up</code> <code>down</code> <code>space</code></td></tr></tbody></table><h5 id="commands" tabindex="-1"><a class="header-anchor" href="#commands" aria-hidden="true">#</a> Commands</h5><p>Commands are custom DOM events that are triggered when a key combination or sequence matches a binding. This allows user interface code to listen for named commands without specifying the specific keybinding that triggers it. For example, the following code creates a command to insert the current date in an editor:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>atom<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;atom-text-editor&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token string-property property">&quot;user:insert-date&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> editor<span class="token punctuation">.</span><span class="token function">insertText</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>atom.commands</code> refers to the global <code>CommandRegistry</code> instance where all commands are set and consequently picked up by the command palette.</p><p>When you are looking to bind new keys, it is often useful to use the Command Palette (<kbd class="platform-mac">Cmd+Shift+P</kbd><kbd class="platform-windows platform-linux">Ctrl+Shift+P</kbd>) to discover what commands are being listened for in a given focus context. Commands are &quot;humanized&quot; following a simple algorithm, so a command like <code>editor:fold-current-row</code> would appear as &quot;Editor: Fold Current Row&quot;.</p><h5 id="composed-commands" tabindex="-1"><a class="header-anchor" href="#composed-commands" aria-hidden="true">#</a> &quot;Composed&quot; Commands</h5><p>A common question is, &quot;How do I make a single keybinding execute two or more commands?&quot; There isn&#39;t any direct support for this in Atom, but it can be achieved by creating a custom command that performs the multiple actions you desire and then creating a keybinding for that command. For example, let&#39;s say I want to create a &quot;composed&quot; command that performs a Select Line followed by Cut. You could add the following to your <code>init.coffee</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>atom<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;atom-text-editor&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;custom:cut-line&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	editor<span class="token punctuation">.</span><span class="token function">selectLinesContainingCursors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	editor<span class="token punctuation">.</span><span class="token function">cutSelectedText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then let&#39;s say we want to map this custom command to <code>alt-ctrl-z</code>, you could add the following to your keymap:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;atom-text-editor&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;alt-ctrl-z&#39;</span><span class="token operator">:</span> <span class="token string">&#39;custom:cut-line&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="specificity-and-cascade-order" tabindex="-1"><a class="header-anchor" href="#specificity-and-cascade-order" aria-hidden="true">#</a> Specificity and Cascade Order</h5><p>As is the case with CSS applying styles, when multiple bindings match for a single element, the conflict is resolved by choosing the most <em>specific</em> selector. If two matching selectors have the same specificity, the binding for the selector appearing later in the cascade takes precedence.</p><p>Currently, there&#39;s no way to specify selector ordering within a single keymap, because JSON objects do not preserve order. We handle cases where selector ordering is critical by breaking the keymap into separate files, such as <code>snippets-1.cson</code> and <code>snippets-2.cson</code>.</p><h5 id="selectors-and-custom-packages" tabindex="-1"><a class="header-anchor" href="#selectors-and-custom-packages" aria-hidden="true">#</a> Selectors and Custom Packages</h5><p>If a keybinding should only apply to a specific grammar, you can limit bindings to that grammar using the <code>data-grammar</code> attribute on the <code>atom-text-editor</code> element:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&quot;atom-text-editor[data-grammar=&#39;source example&#39;]&quot;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;ctrl-.&#39;</span><span class="token operator">:</span> <span class="token string">&#39;custom:custom-command&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>While selectors can be applied to the entire editor by what grammar is associated with it, they cannot be applied to scopes defined within the grammar or to sub-elements of <code>atom-text-editor</code>.</p><h4 id="removing-bindings" tabindex="-1"><a class="header-anchor" href="#removing-bindings" aria-hidden="true">#</a> Removing Bindings</h4><p>When the keymap system encounters a binding with the <code>unset!</code> directive as its command, it will treat the current element as if it had no key bindings matching the current keystroke sequence and continue searching from its parent. For example, the following code removes the keybinding for <code>a</code> in the Tree View, which is normally used to trigger the <code>tree-view:add-file</code> command:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;.tree-view&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;a&#39;</span><span class="token operator">:</span> <span class="token string">&#39;unset!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+`" alt="Keybinding Resolver"></p><p>But if some element above the Tree View had a keybinding for <code>a</code>, that keybinding would still execute even when the focus is inside the Tree View.</p><p>When the keymap system encounters a binding with the <code>abort!</code> directive as its command, it will stop searching for a keybinding. For example, the following code removes the keybinding for <kbd class="platform-mac">Cmd+O</kbd><kbd class="platform-windows platform-linux">Ctrl+O</kbd> when the selection is inside an editor pane:</p><p>::: codetabs#keymaps-in-depth</p><template><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;atom-text-editor&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;ctrl-o&#39;</span><span class="token operator">:</span> <span class="token string">&#39;abort!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></template><template><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;atom-text-editor&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;cmd-o&#39;</span><span class="token operator">:</span> <span class="token string">&#39;abort!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></template>`,31),E=t(`<div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;atom-text-editor&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;ctrl-o&#39;</span><span class="token operator">:</span> <span class="token string">&#39;abort!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><p>But if you click inside the Tree View and press <kbd class="platform-mac">Cmd+O</kbd><kbd class="platform-windows platform-linux">Ctrl+O</kbd>, it will work.</p><h4 id="forcing-chromium-s-native-keystroke-handling" tabindex="-1"><a class="header-anchor" href="#forcing-chromium-s-native-keystroke-handling" aria-hidden="true">#</a> Forcing Chromium&#39;s Native Keystroke Handling</h4><p>If you want to force the native browser behavior for a given keystroke, use the <code>native!</code> directive as the command of a binding. This can be useful to enable the correct behavior in native input elements. If you apply the <code>.native-key-bindings</code> class to an element, all the keystrokes typically handled by the browser will be assigned the <code>native!</code> directive.</p><div class="custom-container tip"><p class="custom-container-title">Tips</p><p><strong>Tip:</strong> Components and input elements may not correctly handle backspace and arrow keys without forcing this behavior. If your backspace isn&#39;t working correctly inside of a component, add either the directive or the <code>.native-key-bindings</code> class.</p></div><h4 id="overloading-key-bindings" tabindex="-1"><a class="header-anchor" href="#overloading-key-bindings" aria-hidden="true">#</a> Overloading Key Bindings</h4><p>Occasionally, it makes sense to layer multiple actions on top of the same key binding. An example of this is the snippets package. Snippets are inserted by typing a snippet prefix such as <code>for</code> and then pressing <kbd class="platform-all">Tab</kbd>. Every time <kbd class="platform-all">Tab</kbd> is pressed, we want to execute code attempting to expand a snippet if one exists for the text preceding the cursor. If a snippet <em>doesn&#39;t</em> exist, we want <kbd class="platform-all">Tab</kbd> to actually insert whitespace.</p><p>To achieve this, the snippets package makes use of the <code>.abortKeyBinding()</code> method on the event object representing the <code>snippets:expand</code> command.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// pseudo-code</span>
editor<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;snippets:expand&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cursorFollowsValidPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">expandSnippet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		e<span class="token punctuation">.</span><span class="token function">abortKeyBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the event handler observes that the cursor does not follow a valid prefix, it calls <code>e.abortKeyBinding()</code>, telling the keymap system to continue searching for another matching binding.</p><h4 id="step-by-step-how-keydown-events-are-mapped-to-commands" tabindex="-1"><a class="header-anchor" href="#step-by-step-how-keydown-events-are-mapped-to-commands" aria-hidden="true">#</a> Step-by-Step: How Keydown Events are Mapped to Commands</h4><ul><li>A keydown event occurs on a <em>focused</em> element.</li><li>Starting at the focused element, the keymap walks upward towards the root of the document, searching for the most specific CSS selector that matches the current DOM element and also contains a keystroke pattern matching the keydown event.</li><li>When a matching keystroke pattern is found, the search is terminated and the pattern&#39;s corresponding command is triggered on the current element.</li><li>If <code>.abortKeyBinding()</code> is called on the triggered event object, the search is resumed, triggering a binding on the next-most-specific CSS selector for the same element or continuing upward to parent elements.</li><li>If no bindings are found, the event is handled by Chromium normally.</li></ul><h4 id="overriding-atom-s-keyboard-layout-recognition" tabindex="-1"><a class="header-anchor" href="#overriding-atom-s-keyboard-layout-recognition" aria-hidden="true">#</a> Overriding Atom&#39;s Keyboard Layout Recognition</h4>`,14),I={href:"https://blog.atom.io/2016/10/17/the-wonderful-world-of-keyboards.html",target:"_blank",rel:"noopener noreferrer"},M=t(`<p>You can add the following to your <code>init.coffee</code> to send <kbd class="platform-all">Ctrl+@</kbd> when you press <kbd class="platform-all">Ctrl+Alt+G</kbd>:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code>atom<span class="token punctuation">.</span>keymaps<span class="token punctuation">.</span><span class="token function">addKeystrokeResolver</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>event<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token keyword">if</span> event<span class="token punctuation">.</span>code <span class="token keyword">is</span> <span class="token string">&#39;KeyG&#39;</span> <span class="token keyword">and</span> event<span class="token punctuation">.</span>altKey <span class="token keyword">and</span> event<span class="token punctuation">.</span>ctrlKey <span class="token keyword">and</span> event<span class="token punctuation">.</span>type <span class="token keyword">isnt</span> <span class="token string">&#39;keyup&#39;</span>
    <span class="token keyword">return</span> <span class="token string">&#39;ctrl-@&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or if you&#39;ve converted your init script to JavaScript:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>atom<span class="token punctuation">.</span>keymaps<span class="token punctuation">.</span><span class="token function">addKeystrokeResolver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> event <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>
		event<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">&quot;KeyG&quot;</span> <span class="token operator">&amp;&amp;</span>
		event<span class="token punctuation">.</span>altKey <span class="token operator">&amp;&amp;</span>
		event<span class="token punctuation">.</span>ctrlKey <span class="token operator">&amp;&amp;</span>
		event<span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">&quot;keyup&quot;</span>
	<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;ctrl-@&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),D=n("code",null,"event",-1),N={href:"https://flight-manual.atom.io/hacking-atom/sections/debugging/#check-for-errors-in-the-developer-tools",target:"_blank",rel:"noopener noreferrer"},P=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;keydown&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This will print every keypress event in Atom to the console so you can inspect <code>KeyboardEvent.key</code> and <code>KeyboardEvent.code</code>.</p><h3 id="scoped-settings-scopes-and-scope-descriptors" tabindex="-1"><a class="header-anchor" href="#scoped-settings-scopes-and-scope-descriptors" aria-hidden="true">#</a> Scoped Settings, Scopes and Scope Descriptors</h3><p>Atom supports language-specific settings. You can soft wrap only Markdown files, or set the tab length to 4 in Python files.</p><p>Language-specific settings are a subset of something more general we call &quot;scoped settings&quot;. Scoped settings allow targeting down to a specific syntax token type. For example, you could conceivably set a setting to target only Ruby comments, only code inside Markdown files, or even only JavaScript function names.</p><h4 id="scope-names-in-syntax-tokens" tabindex="-1"><a class="header-anchor" href="#scope-names-in-syntax-tokens" aria-hidden="true">#</a> Scope Names in Syntax Tokens</h4><p>Each token in the editor has a collection of scope names. For example, the aforementioned JavaScript function name might have the scope names <code>function</code> and <code>name</code>. An open paren might have the scope names <code>punctuation</code>, <code>parameters</code>, <code>begin</code>.</p><p>Scope names work just like CSS classes. In fact, in the editor, scope names are attached to a token&#39;s DOM node as CSS classes.</p><p>Take this piece of JavaScript:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">functionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Log it out&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the dev tools, the first line&#39;s markup looks like this.</p><p><img src="`+u+`" alt="Markup"></p><p>All the class names on the spans are scope names. Any scope name can be used to target a setting&#39;s value.</p><h4 id="scope-selectors" tabindex="-1"><a class="header-anchor" href="#scope-selectors" aria-hidden="true">#</a> Scope Selectors</h4><p>Scope selectors allow you to target specific tokens just like a CSS selector targets specific nodes in the DOM. Some examples:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string">&#39;.source.js&#39;</span> <span class="token comment"># selects all javascript tokens</span>
<span class="token string">&#39;.source.js .function.name&#39;</span> <span class="token comment"># selects all javascript function names</span>
<span class="token string">&#39;.function.name&#39;</span> <span class="token comment"># selects all function names in any language</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),L={href:"https://atom.io/docs/api/latest/Config#instance-set",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"Config::set",-1),V=n("code",null,"scopeSelector",-1),$=n("code",null,"scopeSelector",-1),W=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>atom<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;my-package.my-setting&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;special value&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">scopeSelector</span><span class="token operator">:</span> <span class="token string">&quot;.source.js .function.name&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="scope-descriptors" tabindex="-1"><a class="header-anchor" href="#scope-descriptors" aria-hidden="true">#</a> Scope Descriptors</h4>`,2),K={href:"https://atom.io/docs/api/latest/ScopeDescriptor",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"Array",-1),Y=n("code",null,"String",-1),H=n("em",null,"all",-1),B=t(`<p>In our JavaScript example above, a scope descriptor for the function name token would be:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">&quot;source.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;meta.function.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;entity.name.function.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),U={href:"https://atom.io/docs/api/latest/Config#instance-get",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"Config::get",-1),G=n("code",null,"scopeDescriptor",-1),Q=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> scopeDescriptor <span class="token operator">=</span> <span class="token punctuation">[</span>
	<span class="token string">&quot;source.js&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;meta.function.js&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;entity.name.function.js&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> atom<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;my-package.my-setting&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">scope</span><span class="token operator">:</span> scopeDescriptor<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But, you do not need to generate scope descriptors by hand. There are a couple methods available to get the scope descriptor from the editor:</p>`,2),X={href:"https://atom.io/docs/api/latest/TextEditor#instance-getRootScopeDescriptor",target:"_blank",rel:"noopener noreferrer"},Z=n("code",null,"Editor::getRootScopeDescriptor",-1),nn=n("code",null,'[".source.js"]',-1),sn={href:"https://atom.io/docs/api/latest/TextEditor#instance-scopeDescriptorForBufferPosition",target:"_blank",rel:"noopener noreferrer"},en=n("code",null,"Editor::scopeDescriptorForBufferPosition",-1),an={href:"https://atom.io/docs/api/latest/Cursor#instance-getScopeDescriptor",target:"_blank",rel:"noopener noreferrer"},tn=n("code",null,"Cursor::getScopeDescriptor",-1),on=n("code",null,'["source.js", "meta.function.js", "entity.name.function.js"]',-1),pn=t(`<p>Let&#39;s revisit our example using these methods:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> editor <span class="token operator">=</span> atom<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">getActiveTextEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cursor <span class="token operator">=</span> editor<span class="token punctuation">.</span><span class="token function">getLastCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> valueAtCursor <span class="token operator">=</span> atom<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;my-package.my-setting&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">scope</span><span class="token operator">:</span> cursor<span class="token punctuation">.</span><span class="token function">getScopeDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> valueForLanguage <span class="token operator">=</span> atom<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;my-package.my-setting&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">scope</span><span class="token operator">:</span> editor<span class="token punctuation">.</span><span class="token function">getRootScopeDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="serialization-in-atom" tabindex="-1"><a class="header-anchor" href="#serialization-in-atom" aria-hidden="true">#</a> Serialization in Atom</h3><p>When a window is refreshed or restored from a previous session, the view and its associated objects are <em>deserialized</em> from a JSON representation that was stored during the window&#39;s previous shutdown. For your own views and objects to be compatible with refreshing, you&#39;ll need to make them play nicely with the serializing and deserializing.</p><h4 id="package-serialization-hook" tabindex="-1"><a class="header-anchor" href="#package-serialization-hook" aria-hidden="true">#</a> Package Serialization Hook</h4><p>Your package&#39;s main module can optionally include a <code>serialize</code> method, which will be called before your package is deactivated. You should return a JSON-serializable object, which will be handed back to you as an object argument to <code>activate</code> next time it is called. In the following example, the package keeps an instance of <code>MyObject</code> in the same state across refreshes.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token function">activate</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>myObject <span class="token operator">=</span> state
			<span class="token operator">?</span> atom<span class="token punctuation">.</span>deserializers<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>
			<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">MyObject</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myObject<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="serialization-methods" tabindex="-1"><a class="header-anchor" href="#serialization-methods" aria-hidden="true">#</a> Serialization Methods</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyObject</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">deserializer</span><span class="token operator">:</span> <span class="token string">&quot;MyObject&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="serialize" tabindex="-1"><a class="header-anchor" href="#serialize" aria-hidden="true">#</a> <code>serialize()</code></h5><p>Objects that you want to serialize should implement <code>.serialize()</code>. This method should return a serializable object, and it must contain a key named <code>deserializer</code> whose value is the name of a registered deserializer that can convert the rest of the data to an object. It&#39;s usually just the name of the class itself.</p><h5 id="registering-deserializers" tabindex="-1"><a class="header-anchor" href="#registering-deserializers" aria-hidden="true">#</a> Registering Deserializers</h5><p>The other side of the coin is deserializers, whose job is to convert a state object returned from a previous call to <code>serialize</code> back into a genuine object.</p><h6 id="deserializers-in-package-json" tabindex="-1"><a class="header-anchor" href="#deserializers-in-package-json" aria-hidden="true">#</a> <code>deserializers</code> in <code>package.json</code></h6><p>The preferred way to register deserializers is via your package&#39;s <code>package.json</code> file:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;wordcount&quot;</span><span class="token punctuation">,</span>
  ...
  <span class="token property">&quot;deserializers&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;MyObject&quot;</span><span class="token operator">:</span> <span class="token string">&quot;deserializeMyObject&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, the key (<code>&quot;MyObject&quot;</code>) is the name of the deserializer\u2014the same string used by the <code>deserializer</code> field in the object returned by your <code>serialize()</code> method. The value (<code>&quot;deserializeMyObject&quot;</code>) is the name of a function in your main module that&#39;ll be passed the serialized data and will return a genuine object. For example, your main module might look like this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token function">deserializeMyObject</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyObject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now you can call the global <code>deserialize</code> method with state returned from <code>serialize</code>, and your class&#39;s <code>deserialize</code> method will be selected automatically.</p><h6 id="atom-deserializers-add-klass" tabindex="-1"><a class="header-anchor" href="#atom-deserializers-add-klass" aria-hidden="true">#</a> atom.deserializers.add(klass)</h6><p>An alternative is to use the <code>atom.deserializers.add</code> method with your class in order to make it available to the deserialization system. Usually this is used in conjunction with a class-level <code>deserialize</code> method:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyObject</span> <span class="token punctuation">{</span>
	<span class="token keyword">static</span> <span class="token function">initClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		atom<span class="token punctuation">.</span>deserializers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">static</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyObject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">deserializer</span><span class="token operator">:</span> <span class="token string">&quot;MyObject&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

MyObject<span class="token punctuation">.</span><span class="token function">initClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>While this used to be the standard method of registering a deserializer, the <code>package.json</code> method is now preferred since it allows Atom to defer loading and executing your code until it&#39;s actually needed.</p><h4 id="versioning" tabindex="-1"><a class="header-anchor" href="#versioning" aria-hidden="true">#</a> Versioning</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyObject</span> <span class="token punctuation">{</span>
	<span class="token keyword">static</span> <span class="token function">initClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		atom<span class="token punctuation">.</span>deserializers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">this</span><span class="token punctuation">.</span>version <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">static</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// ...</span>
	<span class="token punctuation">}</span>

	<span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>version<span class="token punctuation">,</span>
			<span class="token comment">// ...</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

MyObject<span class="token punctuation">.</span><span class="token function">initClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Your serializable class can optionally have a class-level <code>@version</code> property and include a <code>version</code> key in its serialized state. When deserializing, Atom will only attempt to call deserialize if the two versions match, and otherwise return undefined. We plan on implementing a migration system in the future, but this at least protects you from improperly deserializing old state.</p><h3 id="developing-node-modules" tabindex="-1"><a class="header-anchor" href="#developing-node-modules" aria-hidden="true">#</a> Developing Node Modules</h3><p>Atom contains a number of packages that are Node modules instead of Atom packages. If you want to make changes to the Node modules, for instance <code>atom-keymap</code>, you have to link them into the development environment differently than you would a normal Atom package.</p><h4 id="linking-a-node-module-into-your-atom-dev-environment" tabindex="-1"><a class="header-anchor" href="#linking-a-node-module-into-your-atom-dev-environment" aria-hidden="true">#</a> Linking a Node Module Into Your Atom Dev Environment</h4><p>Here are the steps to run a local version of a Node module within Atom. We&#39;re using <code>atom-keymap</code> as an example:</p><p>::: tab#developing-node-modules</p>`,31),cn=t(`<template></template><template><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ git clone https://github.com/atom/atom-keymap.git
$ cd atom-keymap
$ npm install
$ npm link
$ cd &lt;em&gt;WHERE YOU CLONED ATOM&lt;/em&gt;
$ npm link atom-keymap

# This is the special step, it makes the Node module work with Atom&#39;s version of Node
$ apm rebuild

# If you have cloned Atom in a different location than ~/github/atom
# you need to set the following environment variable
$ export ATOM_DEV_RESOURCE_PATH=&lt;em&gt;WHERE YOU CLONED ATOM&lt;/em&gt;

# Should work!
$ atom --dev .
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></template>`,2),ln=t(`<div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ git clone https://github.com/atom/atom-keymap.git
$ cd atom-keymap
$ npm install
$ npm link
$ cd &lt;em&gt;WHERE YOU CLONED ATOM&lt;/em&gt;
$ npm link atom-keymap

# This is the special step, it makes the Node module work with Atom&#39;s version of Node
$ apm rebuild

# If you have cloned Atom in a different location than %USERPROFILE%\\github\\atom
# you need to set the following environment variable
$ setx ATOM_DEV_RESOURCE_PATH=&lt;em&gt;WHERE YOU CLONED ATOM&lt;/em&gt;

# Should work!
$ atom --dev .
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><p>After you get the Node module linked and working, every time you make a change to the Node module&#39;s code, you will have to exit Atom and do the following:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ cd &lt;em&gt;WHERE YOU CLONED THE NODE MODULE&lt;/em&gt;
$ npm install
$ cd &lt;em&gt;WHERE YOU CLONED ATOM&lt;/em&gt;
$ apm rebuild
$ atom --dev .
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="interacting-with-other-packages-via-services" tabindex="-1"><a class="header-anchor" href="#interacting-with-other-packages-via-services" aria-hidden="true">#</a> Interacting With Other Packages Via Services</h3><p>Atom packages can interact with each other through versioned APIs called <em>services</em>. To provide a service, in your <code>package.json</code>, specify one or more version numbers, each paired with the name of a method on your package&#39;s main module:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;providedServices&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;my-service&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Does a useful thing&quot;</span><span class="token punctuation">,</span>
			<span class="token property">&quot;versions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token property">&quot;1.2.3&quot;</span><span class="token operator">:</span> <span class="token string">&quot;provideMyServiceV1&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;2.3.4&quot;</span><span class="token operator">:</span> <span class="token string">&quot;provideMyServiceV2&quot;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In your package&#39;s main module, implement the methods named above. These methods will be called any time a package is activated that consumes their corresponding service. They should return a value that implements the service&#39;s API.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token function">activate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// ...</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token function">provideMyServiceV1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">adaptToLegacyAPI</span><span class="token punctuation">(</span>myService<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token function">provideMyServiceV2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> myService<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),rn={href:"https://docs.npmjs.com/cli/v6/using-npm/semver#ranges",target:"_blank",rel:"noopener noreferrer"},dn=n("em",null,"ranges",-1),un=t(`<div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;consumedServices&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;another-service&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token property">&quot;versions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token property">&quot;^1.2.3&quot;</span><span class="token operator">:</span> <span class="token string">&quot;consumeAnotherServiceV1&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;&gt;=2.3.4 &lt;2.5&quot;</span><span class="token operator">:</span> <span class="token string">&quot;consumeAnotherServiceV2&quot;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>These methods will be called any time a package is activated that <em>provides</em> their corresponding service. They will receive the service object as an argument. You will usually need to perform some kind of cleanup in the event that the package providing the service is deactivated. To do this, return a <code>Disposable</code> from your service-consuming method:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Disposable <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;atom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token function">activate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// ...</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token function">consumeAnotherServiceV1</span><span class="token punctuation">(</span><span class="token parameter">service</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">useService</span><span class="token punctuation">(</span><span class="token function">adaptServiceFromLegacyAPI</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Disposable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">stopUsingService</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token function">consumeAnotherServiceV2</span><span class="token punctuation">(</span><span class="token parameter">service</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">useService</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Disposable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">stopUsingService</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="maintaining-your-packages" tabindex="-1"><a class="header-anchor" href="#maintaining-your-packages" aria-hidden="true">#</a> Maintaining Your Packages</h3><p>While publishing is, by far, the most common action you will perform when working with the packages you provide, there are other things you may need to do.</p><h4 id="publishing-a-package-manually" tabindex="-1"><a class="header-anchor" href="#publishing-a-package-manually" aria-hidden="true">#</a> Publishing a Package Manually</h4><div class="custom-container danger"><p class="custom-container-title">Warning</p><p><strong>Danger:</strong> \u{1F6A8} Publishing a package manually is not a recommended practice and is only for the advanced user who has published packages before. If you perform the steps wrong, you may be unable to publish the new version of your package and may have to completely unpublish your package in order to correct the faulty state. You have been warned.</p></div><p>Some people prefer to control every aspect of the package publishing process. Normally, the apm tool manages certain details during publishing to keep things consistent and make everything work smoothly. If you&#39;re one of those people that prefers to do things manually, there are certain steps you&#39;ll have to take in order to make things work just as smoothly as if apm has taken care of things for you.</p>`,8),mn={class:"custom-container note"},kn=n("p",{class:"custom-container-title"},"Note",-1),hn=n("strong",null,"Note:",-1),vn={href:"https://github.com",target:"_blank",rel:"noopener noreferrer"},gn=t('<p>When you have completed the changes that you want to publish and are ready to start the publishing process, you must perform the following steps on the <code>master</code> branch:</p><ol><li>Update the version number in your package&#39;s <code>package.json</code>. The version number <strong>must</strong> match the regular expression: <code>^\\d+\\.\\d+\\.\\d+</code></li><li>Commit the version number change</li><li>Create a Git tag referencing the above commit. The tag <strong>must</strong> match the regular expression <code>^v\\d+\\.\\d+\\.\\d+</code> and the part after the <code>v</code> <strong>must</strong> match the full text of the version number in the <code>package.json</code></li><li>Execute <code>git push --follow-tags</code></li><li>Execute <code>apm publish --tag tagname</code> where <code>tagname</code> <strong>must</strong> match the name of the tag created in the above step</li></ol><h4 id="adding-a-collaborator" tabindex="-1"><a class="header-anchor" href="#adding-a-collaborator" aria-hidden="true">#</a> Adding a Collaborator</h4>',3),bn={href:"https://help.github.com/articles/adding-collaborators-to-a-personal-repository/",target:"_blank",rel:"noopener noreferrer"},fn=n("em",null,"Note:",-1),yn={href:"https://help.github.com/articles/creating-a-new-organization-account/",target:"_blank",rel:"noopener noreferrer"},wn={href:"https://help.github.com/articles/permission-levels-for-an-organization/",target:"_blank",rel:"noopener noreferrer"},_n=n("h4",{id:"transferring-ownership",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#transferring-ownership","aria-hidden":"true"},"#"),s(" Transferring Ownership")],-1),xn=n("div",{class:"custom-container danger"},[n("p",{class:"custom-container-title"},"Warning"),n("p",null,[n("strong",null,"Danger:"),s(" \u{1F6A8} This is a permanent change. There is no going back! \u{1F6A8}")])],-1),jn={href:"https://help.github.com/articles/transferring-a-repository/",target:"_blank",rel:"noopener noreferrer"},qn=n("code",null,"package.json",-1),Sn=t(`<h4 id="unpublish-your-package" tabindex="-1"><a class="header-anchor" href="#unpublish-your-package" aria-hidden="true">#</a> Unpublish Your Package</h4><p>If you no longer want to support your package and cannot find anyone to take it over, you can unpublish your package from https://atom.io. For example, if your package is named <code>package-name</code> then the command you would execute is:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ apm unpublish &lt;em&gt;package-name&lt;/em&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This will remove your package from the https://atom.io package registry. Anyone who has already downloaded a copy of your package will still have it and be able to use it, but it will no longer be available for installation by others.</p><h5 id="unpublish-a-specific-version" tabindex="-1"><a class="header-anchor" href="#unpublish-a-specific-version" aria-hidden="true">#</a> Unpublish a Specific Version</h5><p>If you mistakenly published a version of your package or perhaps you find a glaring bug or security hole, you may want to unpublish just that version of your package. For example, if your package is named <code>package-name</code> and the bad version of your package is v1.2.3 then the command you would execute is:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ apm unpublish &lt;em&gt;package-name@1.2.3&lt;/em&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This will remove just this particular version from the https://atom.io package registry.</p><h4 id="rename-your-package" tabindex="-1"><a class="header-anchor" href="#rename-your-package" aria-hidden="true">#</a> Rename Your Package</h4><p>If you need to rename your package for any reason, you can do so with one simple command \u2013 <code>apm publish --rename</code> changes the <code>name</code> field in your package&#39;s <code>package.json</code>, pushes a new commit and tag, and publishes your renamed package. Requests made to the previous name will be forwarded to the new name.</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ apm publish --rename &lt;em&gt;new-package-name&lt;/em&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Tips</p><p><strong>Tip:</strong> Once a package name has been used, it cannot be re-used by another package even if the original package is unpublished.</p></div><h3 id="how-atom-uses-chromium-snapshots" tabindex="-1"><a class="header-anchor" href="#how-atom-uses-chromium-snapshots" aria-hidden="true">#</a> How Atom Uses Chromium Snapshots</h3>`,13),zn={href:"https://v8project.blogspot.it/2015/09/custom-startup-snapshots.html",target:"_blank",rel:"noopener noreferrer"},An={href:"https://github.com/atom/electron-link",target:"_blank",rel:"noopener noreferrer"},On=n("code",null,"require",-1),Cn={href:"https://github.com/v8/v8/wiki/Embedder%27s-Guide#contexts",target:"_blank",rel:"noopener noreferrer"},Tn={href:"https://github.com/atom/atom/blob/74ff9fdb91205b89673209caf1e2ceb373e9c59f/script/lib/generate-startup-snapshot.js#L19-L65",target:"_blank",rel:"noopener noreferrer"},En={href:"https://github.com/atom/atom/blob/74ff9fdb91205b89673209caf1e2ceb373e9c59f/script/lib/generate-startup-snapshot.js#L73-L78",target:"_blank",rel:"noopener noreferrer"},In={href:"https://github.com/atom/atom/blob/74ff9fdb91205b89673209caf1e2ceb373e9c59f/script/lib/generate-startup-snapshot.js#L80-L89",target:"_blank",rel:"noopener noreferrer"},Mn=n("h3",{id:"summary",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#summary","aria-hidden":"true"},"#"),s(" Summary")],-1),Dn=n("p",null,"You should now have a better understanding of some of the core Atom APIs and systems.",-1);function Nn(Pn,Ln){const a=l("ExternalLinkIcon"),r=l("Tabs");return k(),h("div",null,[g,n("p",null,[s("Subscription methods return "),n("a",b,[f,e(a)]),s(" objects that can be used to unsubscribe. Note in the example above how we save the subscription to the "),y,s(" instance variable and dispose of it when the view is detached. To group multiple subscriptions together, you can add them all to a "),n("a",w,[_,e(a)]),s(" that you dispose when the view is detached.")]),x,n("p",null,[s("If you're exposing package configuration via specific key paths, you'll want to associate them with a schema in your package's main module. Read more about schemas in the "),n("a",j,[s("Config API documentation"),e(a)]),s(".")]),q,S,z,e(r,{id:"53",data:[{title:"Linux"},{title:"Mac"},{title:"Windows"}],"tab-id":"keymaps-indepth"},{tab0:o(({title:i,value:p,isActive:c})=>[A]),tab1:o(({title:i,value:p,isActive:c})=>[O]),tab2:o(({title:i,value:p,isActive:c})=>[C]),_:1}),T,n("template",null,[E,n("p",null,[s("Sometimes the problem isn't mapping the command to a key combination, the problem is that Atom doesn't recognize properly what keys you're pressing. This is due to "),n("a",I,[s("some limitations in how Chromium reports keyboard events"),e(a)]),s(". But even this can be customized now.")]),M,n("p",null,[s("If you want to know the "),D,s(" for the keystroke you pressed you can paste the following script to your "),n("a",N,[s("developer tools console"),e(a)])]),P,n("p",null,[n("a",L,[R,e(a)]),s(" accepts a "),V,s(". If you'd like to set a setting for JavaScript function names, you can give it the JavaScript function name "),$,s(":")]),W,n("p",null,[s("A scope descriptor is an "),n("a",K,[s("Object"),e(a)]),s(" that wraps an "),F,s(" of "),Y,s("s. The Array describes a path from the root of the syntax tree to a token including "),H,s(" scope names for the entire path.")]),B,n("p",null,[n("a",U,[J,e(a)]),s(" accepts a "),G,s(". You can get the value for your setting scoped to JavaScript function names via:")]),Q,n("ul",null,[n("li",null,[n("a",X,[Z,e(a)]),s(" to get the language's descriptor. For example: "),nn]),n("li",null,[n("a",sn,[en,e(a)]),s(" to get the descriptor at a specific position in the buffer.")]),n("li",null,[n("a",an,[tn,e(a)]),s(" to get a cursor's descriptor based on position. eg. if the cursor were in the name of the method in our example it would return "),on])]),pn]),cn,n("template",null,[ln,n("p",null,[s("Similarly, to consume a service, specify one or more "),n("a",rn,[s("version "),dn,e(a)]),s(", each paired with the name of a method on the package's main module:")]),un,n("div",mn,[kn,n("p",null,[hn,s(" The apm tool will only publish and https://atom.io will only list packages that are hosted on "),n("a",vn,[s("GitHub"),e(a)]),s(", regardless of what process is used to publish them.")])]),gn,n("p",null,[s("Some packages get too big for one person. Sometimes priorities change and someone else wants to help out. You can let others help or create co-owners by "),n("a",bn,[s("adding them as a collaborator"),e(a)]),s(" on the GitHub repository for your package. "),fn,s(" Anyone that has push access to your repository will have the ability to publish new versions of the package that belongs to that repository.")]),n("p",null,[s("You can also have packages that are owned by a "),n("a",yn,[s("GitHub organization"),e(a)]),s(". Anyone who is a member of an organization's "),n("a",wn,[s("team"),e(a)]),s(" which has push access to the package's repository will be able to publish new versions of the package.")]),_n,xn,n("p",null,[s("If you want to hand off support of your package to someone else, you can do that by "),n("a",jn,[s("transferring the package's repository"),e(a)]),s(" to the new owner. Once you do that, they can publish a new version with the updated repository information in the "),qn,s(".")]),Sn,n("p",null,[s("In order to improve startup time, when Atom is built we create a "),n("a",zn,[s("V8 snapshot"),e(a)]),s(" in which we preload core services and packages. Then, at runtime, we finish loading Atom by supplying all the information we didn't have during the compilation phase (e.g. loading third party packages, custom style sheets, configuration, etc.).")]),n("p",null,[n("a",An,[s("electron-link"),e(a)]),s(" is the tool that powers snapshots, as it enables us to traverse the entire require graph (starting at the entry point) and replace all the forbidden "),On,s(" calls (e.g. require calls to native modules, node core modules or other modules that can't be accessed in the snapshot "),n("a",Cn,[s("V8 context"),e(a)]),s(") with a function that will be called at runtime. When adding new code to Atom, we always try to put it inside the snapshot by, for example, deferring the usage of DOM APIs or native node modules to a later moment in time when those facilities are available. If that is not possible, we will add the unsupported code paths to the "),n("a",Tn,[s("list of files that get excluded from the snapshot"),e(a)]),s(", ensuring we only exclude those ones that are not supported as opposed to skipping an entire Node module.")]),n("p",null,[s("The output of electron-link is a single script containing the code for all the modules reachable from the entry point, which we then "),n("a",En,[s("supply to mksnapshot"),e(a)]),s(" to generate a snapshot blob.")]),n("p",null,[s("The generated blob is finally "),n("a",In,[s("copied into the application bundle"),e(a)]),s(" and will be automatically loaded by Electron when running Atom.")]),Mn,Dn])])}const Wn=m(v,[["render",Nn],["__file","index.html.vue"]]);export{Wn as default};
