import{_ as o,o as s,c as i,a,b as e,d as t,f as r,r as l}from"./app.87197fef.js";const c={},d=a("h2",{id:"contributing-to-official-pulsar-packages",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#contributing-to-official-pulsar-packages","aria-hidden":"true"},"#"),e(" Contributing to Official Pulsar Packages")],-1),p={href:"https://github.com/pulsar-edit/pulsar",target:"_blank",rel:"noopener noreferrer"},u=r(`<h3 id="hacking-on-packages" tabindex="-1"><a class="header-anchor" href="#hacking-on-packages" aria-hidden="true">#</a> Hacking on Packages</h3><h4 id="cloning" tabindex="-1"><a class="header-anchor" href="#cloning" aria-hidden="true">#</a> Cloning</h4><p>The first step is creating your own clone. For some packages, you may also need to install the <a href="#building-pulsar">requirements necessary for building Pulsar</a> in order to run <code>pulsar -p install</code>.</p><p>For example, if you want to make changes to the <code>tree-view</code> package, fork the repo on your GitHub account, then clone it:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">git</span> clone https://github.com/pulsar-edit/tree-view.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Next install all the dependencies:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> tree-view
$ pulsar <span class="token parameter variable">-p</span> <span class="token function">install</span>
<span class="token operator">&gt;</span> Installing modules \u2713
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now you can link it to development mode so when you run an Pulsar window with <code>pulsar -p --dev</code>, you will use your fork instead of the built in package:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ pulsar <span class="token parameter variable">-p</span> <span class="token function">link</span> <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="running-in-development-mode" tabindex="-1"><a class="header-anchor" href="#running-in-development-mode" aria-hidden="true">#</a> Running in Development Mode</h4><p>Editing a package in Pulsar is a bit of a circular experience: you&#39;re using Pulsar to modify itself. What happens if you temporarily break something? You don&#39;t want the version of Pulsar you&#39;re using to edit to become useless in the process. For this reason, you&#39;ll only want to load packages in <strong>development mode</strong> while you are working on them. You&#39;ll perform your editing in <strong>stable mode</strong>, only switching to development mode to test your changes.</p><p>To open a development mode window, use the <code>Application: Open Dev</code> command. You can also run dev mode from the command line with <code>pulsar --dev</code>.</p><p>To load your package in development mode, create a symlink to it in <strong><em>LNX/MAC</em></strong>: <code>~/.pulsar/dev/packages</code> - <strong><em>WIN</em></strong>: <code>%USERPROFILE%\\.pulsar\\dev\\packages</code>. This occurs automatically when you clone the package with <code>pulsar -p develop</code>. You can also run <code>pulsar -p link --dev</code> and <code>pulsar -p unlink --dev</code> from the package directory to create and remove dev-mode symlinks.</p><h4 id="installing-dependencies" tabindex="-1"><a class="header-anchor" href="#installing-dependencies" aria-hidden="true">#</a> Installing Dependencies</h4><p>You&#39;ll want to keep dependencies up to date by running <code>pulsar -p update</code> after pulling any upstream changes.</p>`,15);function h(g,m){const n=l("ExternalLinkIcon");return s(),i("div",null,[d,a("p",null,[e("If you discover a bug or issue with an official Pulsar package then feel free to open up the issue in that specific repository instead. When in doubt just open the issue on the "),a("a",p,[e("pulsar-edit/pulsar"),t(n)]),e(" repository but be aware that it may get transferred to the proper package's repository.")]),u])}const f=o(c,[["render",h],["__file","contributing-to-official-pulsar-packages.html.vue"]]);export{f as default};
