import{_ as p,o as l,c as u,a as s,b as n,d as t,w as r,e,f as i,r as o}from"./app.87197fef.js";const d={},k=s("h2",{id:"the-init-file",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#the-init-file","aria-hidden":"true"},"#"),n(" The Init File")],-1),m={class:"custom-container info"},h=s("p",{class:"custom-container-title"},"Info",-1),f=s("code",null,"init.coffee",-1),v=s("code",null,"init.js",-1),g=s("strong",null,[s("em",null,"LNX/MAC")],-1),_=s("code",null,"~/.pulsar",-1),b=s("strong",null,[s("em",null,"WIN")],-1),w=s("code",null,"%USERPROFILE%\\.pulsar",-1),x={href:"https://atom.io/docs/api/latest",target:"_blank",rel:"noopener noreferrer"},y=s("a",{href:"#package-word-count"},"Package: Word Count",-1),I=i(`<p>You can open the <code>init.js</code> file in an editor from the <strong><em>LNX</em></strong>: <em>Atom &gt; Init Script</em> - <strong><em>MAC</em></strong>: <em>File &gt; Init Script</em> - <strong><em>WIN</em></strong>: <em>Edit &gt; Init Script</em> menu.</p><p>For example, if you have the Audio Beep configuration setting enabled, you could add the following code to your <code>init.js</code> file to have Pulsar greet you with an audio beep every time it loads:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>atom<span class="token punctuation">.</span><span class="token function">beep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),A=s("code",null,"init.js",-1),P={href:"https://atom.io/docs/api/latest/Selection",target:"_blank",rel:"noopener noreferrer"},C={href:"https://atom.io/docs/api/latest/Clipboard",target:"_blank",rel:"noopener noreferrer"},S=i(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>atom<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;atom-text-editor&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;markdown:paste-as-link&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> clipboardText<span class="token punctuation">,</span> editor<span class="token punctuation">,</span> selection<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>editor <span class="token operator">=</span> atom<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">getActiveTextEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	selection <span class="token operator">=</span> editor<span class="token punctuation">.</span><span class="token function">getLastSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	clipboardText <span class="token operator">=</span> atom<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> selection<span class="token punctuation">.</span><span class="token function">insertText</span><span class="token punctuation">(</span>
		<span class="token string">&quot;[&quot;</span> <span class="token operator">+</span> selection<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;](&quot;</span> <span class="token operator">+</span> clipboardText <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, reload Pulsar and use the <a href="../../getting-started#command-palette">Command Palette</a> to execute the new command, <code>Markdown: Paste As Link</code>, by name. And if you&#39;d like to trigger the command via a keyboard shortcut, you can define a <a href="../../using-pulsar#customizing-keybindings">keybinding for the command</a>.</p>`,2);function T(j,q){const c=o("RouterLink"),a=o("ExternalLinkIcon");return l(),u("div",null,[k,s("div",m,[h,s("p",null,[n("The default init file for Pulsar has been changed from the previous CoffeeScript "),f,n(" file used by Atom to JavaScript. The CoffeeScript file will still work but should you wish to reference the specific version of this document for it then you should look at the "),t(c,{to:"/docs/atom-archive/hacking-atom/#the-init-file"},{default:r(()=>[n("Atom Archive")]),_:1}),n(".")])]),s("p",null,[n("When Pulsar finishes loading, it will evaluate "),v,n(" in your "),g,n(": "),_,n(" - "),b,n(": "),w,n(" directory, giving you a chance to run JavaScript code to make customizations. Code in this file has full access to "),s("a",x,[n("Pulsar's API"),t(a)]),n("."),e("TODO: Replace link when we have the API documented"),n(" If customizations become extensive, consider creating a package, which we will cover in "),y,n(".")]),I,e("TODO: All API links to be updated when it is documented"),s("p",null,[n("Because "),A,n(" provides access to Pulsar's API, you can use it to implement useful commands without creating a new package or extending an existing one. Here's a command which uses the "),s("a",P,[n("Selection API"),t(a)]),n(" and "),s("a",C,[n("Clipboard API"),t(a)]),n(" to construct a Markdown link from the selected text and the clipboard contents as the URL:")]),S])}const N=p(d,[["render",T],["__file","the-init-file.html.vue"]]);export{N as default};
