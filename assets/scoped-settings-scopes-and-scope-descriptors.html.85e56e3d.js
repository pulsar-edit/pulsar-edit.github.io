import{_ as o}from"./markup.30f112ce.js";import{_ as c,o as p,c as i,a as n,d as e,b as s,f as t,r}from"./app.87197fef.js";const l={},u=t(`<h3 id="scoped-settings-scopes-and-scope-descriptors" tabindex="-1"><a class="header-anchor" href="#scoped-settings-scopes-and-scope-descriptors" aria-hidden="true">#</a> Scoped Settings, Scopes and Scope Descriptors</h3><p>Atom supports language-specific settings. You can soft wrap only Markdown files, or set the tab length to 4 in Python files.</p><p>Language-specific settings are a subset of something more general we call &quot;scoped settings&quot;. Scoped settings allow targeting down to a specific syntax token type. For example, you could conceivably set a setting to target only Ruby comments, only code inside Markdown files, or even only JavaScript function names.</p><h4 id="scope-names-in-syntax-tokens" tabindex="-1"><a class="header-anchor" href="#scope-names-in-syntax-tokens" aria-hidden="true">#</a> Scope Names in Syntax Tokens</h4><p>Each token in the editor has a collection of scope names. For example, the aforementioned JavaScript function name might have the scope names <code>function</code> and <code>name</code>. An open paren might have the scope names <code>punctuation</code>, <code>parameters</code>, <code>begin</code>.</p><p>Scope names work just like CSS classes. In fact, in the editor, scope names are attached to a token&#39;s DOM node as CSS classes.</p><p>Take this piece of JavaScript:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">functionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Log it out&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the dev tools, the first line&#39;s markup looks like this.</p><p><img src="`+o+`" alt="Markup"></p><p>All the class names on the spans are scope names. Any scope name can be used to target a setting&#39;s value.</p><h4 id="scope-selectors" tabindex="-1"><a class="header-anchor" href="#scope-selectors" aria-hidden="true">#</a> Scope Selectors</h4><p>Scope selectors allow you to target specific tokens just like a CSS selector targets specific nodes in the DOM. Some examples:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string">&#39;.source.js&#39;</span> <span class="token comment"># selects all javascript tokens</span>
<span class="token string">&#39;.source.js .function.name&#39;</span> <span class="token comment"># selects all javascript function names</span>
<span class="token string">&#39;.function.name&#39;</span> <span class="token comment"># selects all function names in any language</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),d={href:"https://atom.io/docs/api/latest/Config#instance-set",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"Config::set",-1),m=n("code",null,"scopeSelector",-1),g=n("code",null,"scopeSelector",-1),h=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>atom<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;my-package.my-setting&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;special value&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">scopeSelector</span><span class="token operator">:</span> <span class="token string">&quot;.source.js .function.name&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="scope-descriptors" tabindex="-1"><a class="header-anchor" href="#scope-descriptors" aria-hidden="true">#</a> Scope Descriptors</h4>`,2),v={href:"https://atom.io/docs/api/latest/ScopeDescriptor",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"Array",-1),_=n("code",null,"String",-1),b=n("em",null,"all",-1),y=t(`<p>In our JavaScript example above, a scope descriptor for the function name token would be:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">&quot;source.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;meta.function.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;entity.name.function.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),S={href:"https://atom.io/docs/api/latest/Config#instance-get",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"Config::get",-1),x=n("code",null,"scopeDescriptor",-1),q=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> scopeDescriptor <span class="token operator">=</span> <span class="token punctuation">[</span>
	<span class="token string">&quot;source.js&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;meta.function.js&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;entity.name.function.js&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> atom<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;my-package.my-setting&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">scope</span><span class="token operator">:</span> scopeDescriptor<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But, you do not need to generate scope descriptors by hand. There are a couple methods available to get the scope descriptor from the editor:</p>`,2),w={href:"https://atom.io/docs/api/latest/TextEditor#instance-getRootScopeDescriptor",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"Editor::getRootScopeDescriptor",-1),C=n("code",null,'[".source.js"]',-1),A={href:"https://atom.io/docs/api/latest/TextEditor#instance-scopeDescriptorForBufferPosition",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"Editor::scopeDescriptorForBufferPosition",-1),T={href:"https://atom.io/docs/api/latest/Cursor#instance-getScopeDescriptor",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"Cursor::getScopeDescriptor",-1),L=n("code",null,'["source.js", "meta.function.js", "entity.name.function.js"]',-1),B=t(`<p>Let&#39;s revisit our example using these methods:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> editor <span class="token operator">=</span> atom<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">getActiveTextEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cursor <span class="token operator">=</span> editor<span class="token punctuation">.</span><span class="token function">getLastCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> valueAtCursor <span class="token operator">=</span> atom<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;my-package.my-setting&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">scope</span><span class="token operator">:</span> cursor<span class="token punctuation">.</span><span class="token function">getScopeDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> valueForLanguage <span class="token operator">=</span> atom<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;my-package.my-setting&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">scope</span><span class="token operator">:</span> editor<span class="token punctuation">.</span><span class="token function">getRootScopeDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function F(I,N){const a=r("ExternalLinkIcon");return p(),i("div",null,[u,n("p",null,[n("a",d,[k,e(a)]),s(" accepts a "),m,s(". If you'd like to set a setting for JavaScript function names, you can give it the JavaScript function name "),g,s(":")]),h,n("p",null,[s("A scope descriptor is an "),n("a",v,[s("Object"),e(a)]),s(" that wraps an "),f,s(" of "),_,s("s. The Array describes a path from the root of the syntax tree to a token including "),b,s(" scope names for the entire path.")]),y,n("p",null,[n("a",S,[j,e(a)]),s(" accepts a "),x,s(". You can get the value for your setting scoped to JavaScript function names via:")]),q,n("ul",null,[n("li",null,[n("a",w,[D,e(a)]),s(" to get the language's descriptor. For example: "),C]),n("li",null,[n("a",A,[E,e(a)]),s(" to get the descriptor at a specific position in the buffer.")]),n("li",null,[n("a",T,[J,e(a)]),s(" to get a cursor's descriptor based on position. eg. if the cursor were in the name of the method in our example it would return "),L])]),B])}const V=c(l,[["render",F],["__file","scoped-settings-scopes-and-scope-descriptors.html.vue"]]);export{V as default};
