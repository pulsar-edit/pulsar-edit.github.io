import{_ as h,a as u,b as m,c as f}from"./unity-theme.516a5ae9.js";import{_ as g,a as b}from"./symbol.b88bf5a9.js";import{_ as k,a as y,b as v}from"./encodings.f93acf64.js";import{_ as w,a as _}from"./find-replace-project.ada882a7.js";import{_ as x,a as C}from"./snippet-scope.1f381b52.js";import{_ as A}from"./autocomplete.b0bae406.js";import{_ as S}from"./folding.6d09f8df.js";import{_ as q}from"./panes.a7cec271.js";import{_ as T}from"./allow-pending-pane-items.0fe3dd4a.js";import{_ as I}from"./grammar.c16b8cd6.js";import{_ as P,a as F,b as R,c as L,d as G,e as H}from"./open-on-github.6fa9b166.js";import{_ as O,a as M,b as j,c as z,d as E,e as D,f as Y,g as $,h as W,i as U,j as B,k as N,l as V,m as J,n as K,o as Z,p as Q,q as X,r as ee,s as te,t as ae,u as oe,v as ne,w as se,x as ie,y as le}from"./github-review-reply.6d405e4b.js";import{_ as re,a as ce}from"./preview.2eaf146a.js";import{_ as de}from"./menubar.df752f94.js";import{_ as pe,a as he,b as ue,c as me,d as fe}from"./portable-mode-folder.90669a9a.js";import{_ as ge,o as be,c as ke,a as e,b as t,d as a,w as s,f as n,r as p}from"./app.87197fef.js";const ye={},ve=n('<div class="custom-container danger"><p class="custom-container-title">STOP</p><p>This is being kept for archival purposes only from the original Atom documentation. As this may no longer be relevant to Pulsar, you use this at your own risk. Current Pulsar documentation for this section is found at the <a href="/docs/launch-manual/getting-started">documentation home</a>.</p></div><h2 id="using-atom" tabindex="-1"><a class="header-anchor" href="#using-atom" aria-hidden="true">#</a> Using Atom</h2><p>Now that we&#39;ve covered the very basics of Atom, we are ready to see how to really start getting the most out of using it. In this chapter we&#39;ll look at how to find and install new packages in order to add new functionality, how to find and install new themes, how to work with and manipulate text in a more advanced way, how to customize the editor in any way you wish, how to work with Git for version control and more.</p><p>At the end of this chapter, you should have a customized environment that you&#39;re comfortable in and you should be able to change, create and move through your text like a master.</p><h3 id="atom-packages" tabindex="-1"><a class="header-anchor" href="#atom-packages" aria-hidden="true">#</a> Atom Packages</h3>',5),we={href:"https://github.com/atom/tree-view",target:"_blank",rel:"noopener noreferrer"},_e={href:"https://github.com/atom/settings-view",target:"_blank",rel:"noopener noreferrer"},xe={href:"https://github.com/atom/welcome",target:"_blank",rel:"noopener noreferrer"},Ce={href:"https://github.com/atom/spell-check",target:"_blank",rel:"noopener noreferrer"},Ae={href:"https://github.com/atom/one-dark-ui",target:"_blank",rel:"noopener noreferrer"},Se={href:"https://github.com/atom/fuzzy-finder",target:"_blank",rel:"noopener noreferrer"},qe=n('<p>This means that packages can be incredibly powerful and can change everything from the very look and feel of the entire interface to the basic operation of even core functionality.</p><p>In order to install a new package, you can use the Install tab in the now familiar Settings View. Open up the Settings View using <kbd class="platform-mac">Cmd+,</kbd><kbd class="platform-windows platform-linux">Ctrl+,</kbd>, click on the &quot;Install&quot; tab and type your search query into the box under Install Packages.</p><p>The packages listed here have been published to https://atom.io/packages which is the official registry for Atom packages. Searching on the Settings View will go to the Atom package registry and pull in anything that matches your search terms.</p><p><img src="'+h+'" alt="Package install screen" title="Package install screen"></p><p>All of the packages will come up with an &quot;Install&quot; button. Clicking that will download the package and install it. Your editor will now have the functionality that the package provides.</p><h4 id="package-settings" tabindex="-1"><a class="header-anchor" href="#package-settings" aria-hidden="true">#</a> Package Settings</h4><p>Once a package is installed in Atom, it will show up in the Settings View under the &quot;Packages&quot; tab, along with all the preinstalled packages that come with Atom. To filter the list in order to find one, you can type into search box directly under the &quot;Installed Packages&quot; heading.</p><p><img src="'+u+'" alt="Package settings screen" title="Package settings screen"></p><p>Clicking on the &quot;Settings&quot; button for a package will give you the settings screen for that package specifically. Here you have the option of changing some of the default variables for the package, seeing what all the command keybindings are, disabling the package temporarily, looking at the source code, seeing the current version of the package, reporting issues and uninstalling the package.</p><p>If a new version of any of your packages is released, Atom will automatically detect it and you can upgrade the package from either this screen or from the &quot;Updates&quot; tab. This helps you easily keep all your installed packages up to date.</p><h4 id="atom-themes" tabindex="-1"><a class="header-anchor" href="#atom-themes" aria-hidden="true">#</a> Atom Themes</h4><p>You can also find and install new themes for Atom from the Settings View. These can be either UI themes or syntax themes and you can search for them from the &quot;Install&quot; tab, just like searching for new packages. Make sure to press the &quot;Themes&quot; toggle next to the search box.</p><p><img src="'+m+'" alt="Theme search screen" title="Theme search screen"></p><p>Clicking on the theme title will take you to a profile page for the theme on atom.io, which often has a screenshot of the theme. This way you can see what it looks like before installing it.</p>',14),Te=n('<p><img src="'+f+`" alt="Example of the Unity UI theme with Monokai syntax theme" title="Example of the Unity UI theme with Monokai syntax theme"></p><h4 id="command-line" tabindex="-1"><a class="header-anchor" href="#command-line" aria-hidden="true">#</a> Command Line</h4><p>You can also install packages or themes from the command line using <code>apm</code>.</p><div class="custom-container tip"><p class="custom-container-title">Tip</p><p>Check that you have <code>apm</code> installed by running the following command in your terminal:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ apm help install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You should see a message print out with details about the <code>apm install</code> command.</p><p>If you do not, see the <a href="/getting-started/sections/installing-atom">Installing Atom section</a> for instructions on how to install the <code>atom</code> and <code>apm</code> commands for your system.</p></div><p>You can also install packages by using the <code>apm install</code> command:</p><ul><li><code>apm install &lt;package_name&gt;</code> to install the latest version.</li><li><code>apm install &lt;package_name&gt;@&lt;package_version&gt;</code> to install a specific version.</li></ul>`,6),Ie=e("code",null,"apm install emmet@0.1.5",-1),Pe=e("code",null,"0.1.5",-1),Fe={href:"https://github.com/atom/emmet",target:"_blank",rel:"noopener noreferrer"},Re=n(`<p>You can also use <code>apm</code> to find new packages to install. If you run <code>apm search</code>, you can search the package registry for a search term.</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ apm search coffee
&gt; Search Results For &#39;coffee&#39; (29)
&gt; \u251C\u2500\u2500 build-coffee Atom Build provider for coffee, compiles CoffeeScript (1160 downloads, 2 stars)
&gt; \u251C\u2500\u2500 scallahan-coffee-syntax A coffee inspired theme from the guys over at S.CALLAHAN (183 downloads, 0 stars)
&gt; \u251C\u2500\u2500 coffee-paste Copy/Paste As : Js \u27A4 Coffee / Coffee \u27A4 Js (902 downloads, 4 stars)
&gt; \u251C\u2500\u2500 atom-coffee-repl Coffee REPL for Atom Editor (894 downloads, 2 stars)
&gt; \u251C\u2500\u2500 coffee-navigator Code navigation panel for Coffee Script (3493 downloads, 22 stars)
&gt; ...
&gt; \u251C\u2500\u2500 language-iced-coffeescript Iced coffeescript for atom (202 downloads, 1 star)
&gt; \u2514\u2500\u2500 slontech-syntax Dark theme for web developers ( HTML, CSS/LESS, PHP, MYSQL, javascript, AJAX, coffee, JSON ) (2018 downloads, 3 stars)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can use <code>apm view</code> to see more information about a specific package.</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ apm view build-coffee
&gt; build-coffee
&gt; \u251C\u2500\u2500 0.6.4
&gt; \u251C\u2500\u2500 https://github.com/idleberg/atom-build-coffee
&gt; \u251C\u2500\u2500 Atom Build provider for coffee, compiles CoffeeScript
&gt; \u251C\u2500\u2500 1152 downloads
&gt; \u2514\u2500\u2500 2 stars
&gt;
&gt; Run \`apm install build-coffee\` to install this package.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="moving-in-atom" tabindex="-1"><a class="header-anchor" href="#moving-in-atom" aria-hidden="true">#</a> Moving in Atom</h3><p>While it&#39;s pretty easy to move around Atom by clicking with the mouse or using the arrow keys, there are some keybindings that may help you keep your hands on the keyboard and navigate around a little faster.</p>`,6),Le=e("p",null,"Atom has support for all the standard Linux cursor movement key combinations. To go up, down, left or right a single character you can use the arrow keys.",-1),Ge=e("p",null,"In addition to single character movement, there are a number of other movement keybindings:",-1),He=e("p",null,[t("Atom ships with many of the basic Emacs keybindings for navigating a document. To go up and down a single character, you can use "),e("kbd",{class:"platform-mac"},"Ctrl+P"),t(" and "),e("kbd",{class:"platform-mac"},"Ctrl+N"),t(". To go left and right a single character, you can use "),e("kbd",{class:"platform-mac"},"Ctrl+B"),t(" and "),e("kbd",{class:"platform-mac"},"Ctrl+F"),t(". These are the equivalent of using the arrow keys, though some people prefer not having to move their hands to where the arrow keys are located on their keyboard.")],-1),Oe=e("p",null,"In addition to single character movement, there are a number of other movement keybindings:",-1),Me=e("p",null,"Atom has support for all the standard Windows cursor movement key combinations. To go up, down, left or right a single character you can use the arrow keys.",-1),je=e("p",null,"In addition to single character movement, there are a number of other movement keybindings:",-1),ze=n('<ul><li><span class="platform-mac"><kbd class="platform-mac">Alt+Left</kbd> or <kbd class="platform-mac">Alt+B</kbd></span><kbd class="platform-windows platform-linux">Ctrl+Left</kbd> - Move to the beginning of word</li><li><span class="platform-mac"><kbd class="platform-mac">Alt+Right</kbd> or <kbd class="platform-mac">Alt+F</kbd></span><kbd class="platform-windows platform-linux">Ctrl+Right</kbd> - Move to the end of word</li><li><span class="platform-mac"><kbd class="platform-mac">Cmd+Left</kbd> or <kbd class="platform-mac">Ctrl+A</kbd></span><kbd class="platform-windows platform-linux">Home</kbd> - Move to the first character of the current line</li><li><span class="platform-mac"><kbd class="platform-mac">Cmd+Right</kbd> or <kbd class="platform-mac">Ctrl+E</kbd></span><kbd class="platform-windows platform-linux">End</kbd> - Move to the end of the line</li><li><kbd class="platform-mac">Cmd+Up</kbd><kbd class="platform-windows platform-linux">Ctrl+Home</kbd> - Move to the top of the file</li><li><kbd class="platform-mac">Cmd+Down</kbd><kbd class="platform-windows platform-linux">Ctrl+End</kbd> - Move to the bottom of the file</li></ul><p>You can also move directly to a specific line (and column) number with <kbd class="platform-all">Ctrl+G</kbd>. This will bring up a dialog that asks which line you would like to jump to. You can also use the <code>row:column</code> syntax to jump to a character in that line as well.</p><p><img src="'+g+'" alt="Go directly to a line" title="Go directly to a line"></p><h4 id="additional-movement-and-selection-commands" tabindex="-1"><a class="header-anchor" href="#additional-movement-and-selection-commands" aria-hidden="true">#</a> Additional Movement and Selection Commands</h4>',4),Ee=e("code",null,"keymap.cson",-1),De=e("code",null,"keymap.cson",-1),Ye=e("span",{class:"platform-mac"},[e("em",null,"Atom > Keymap")],-1),$e=e("span",{class:"platform-windows"},[e("em",null,"File > Keymap")],-1),We=e("span",{class:"platform-linux"},[e("em",null,"Edit > Keymap")],-1),Ue=e("p",null,[t("For example, the command "),e("code",null,"editor:move-to-beginning-of-screen-line"),t(" is available in the command palette, but it's not bound to any key combination. To create a key combination you need to add an entry in your "),e("code",null,"keymap.cson"),t(" file. For "),e("code",null,"editor:select-to-previous-word-boundary"),t(", you can add the following to your "),e("code",null,"keymap.cson"),t(":")],-1),Be=e("div",{class:"language-coffee ext-coffee line-numbers-mode"},[e("pre",{class:"language-coffee"},[e("code",null,[e("span",{class:"token string-property property"},"'atom-text-editor'"),e("span",{class:"token operator"},":"),t(`
  `),e("span",{class:"token string-property property"},"'ctrl-shift-e'"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token string"},"'editor:select-to-previous-word-boundary'"),t(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Ne=e("div",{class:"language-coffee ext-coffee line-numbers-mode"},[e("pre",{class:"language-coffee"},[e("code",null,[e("span",{class:"token string-property property"},"'atom-text-editor'"),e("span",{class:"token operator"},":"),t(`
  `),e("span",{class:"token string-property property"},"'cmd-shift-e'"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token string"},"'editor:select-to-previous-word-boundary'"),t(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Ve=e("div",{class:"language-coffee ext-coffee line-numbers-mode"},[e("pre",{class:"language-coffee"},[e("code",null,[e("span",{class:"token string-property property"},"'atom-text-editor'"),e("span",{class:"token operator"},":"),t(`
  `),e("span",{class:"token string-property property"},"'ctrl-shift-e'"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token string"},"'editor:select-to-previous-word-boundary'"),t(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Je=e("code",null,"editor:select-to-previous-word-boundary",-1),Ke=e("kbd",{class:"platform-mac"},"Cmd+Shift+E",-1),Ze=e("kbd",{class:"platform-windows platform-linux"},"Ctrl+Shift+E",-1),Qe=e("p",null,"Here's a list of Movement and Selection Commands that do not have a keyboard shortcut by default:",-1),Xe=e("div",{class:"language-text ext-text line-numbers-mode"},[e("pre",{class:"language-text"},[e("code",null,`editor:move-to-beginning-of-next-paragraph
editor:move-to-beginning-of-previous-paragraph
editor:move-to-beginning-of-screen-line
editor:move-to-beginning-of-line
editor:move-to-end-of-line
editor:move-to-first-character-of-line
editor:move-to-beginning-of-next-word
editor:move-to-previous-word-boundary
editor:move-to-next-word-boundary
editor:select-to-beginning-of-next-paragraph
editor:select-to-beginning-of-previous-paragraph
editor:select-to-end-of-line
editor:select-to-beginning-of-line
editor:select-to-beginning-of-next-word
editor:select-to-next-word-boundary
editor:select-to-previous-word-boundary
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),et=e("div",{class:"language-text ext-text line-numbers-mode"},[e("pre",{class:"language-text"},[e("code",null,`editor:move-to-beginning-of-next-paragraph
editor:move-to-beginning-of-previous-paragraph
editor:move-to-beginning-of-screen-line
editor:move-to-beginning-of-line
editor:move-to-beginning-of-next-word
editor:move-to-previous-word-boundary
editor:move-to-next-word-boundary
editor:select-to-beginning-of-next-paragraph
editor:select-to-beginning-of-previous-paragraph
editor:select-to-beginning-of-line
editor:select-to-beginning-of-next-word
editor:select-to-next-word-boundary
editor:select-to-previous-word-boundary
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),tt=e("div",{class:"language-text ext-text line-numbers-mode"},[e("pre",{class:"language-text"},[e("code",null,`editor:move-to-beginning-of-next-paragraph
editor:move-to-beginning-of-previous-paragraph
editor:move-to-beginning-of-screen-line
editor:move-to-beginning-of-line
editor:move-to-end-of-line
editor:move-to-first-character-of-line
editor:move-to-beginning-of-next-word
editor:move-to-previous-word-boundary
editor:move-to-next-word-boundary
editor:select-to-beginning-of-next-paragraph
editor:select-to-beginning-of-previous-paragraph
editor:select-to-end-of-line
editor:select-to-beginning-of-line
editor:select-to-beginning-of-next-word
editor:select-to-next-word-boundary
editor:select-to-previous-word-boundary
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),at=n('<h4 id="navigating-by-symbols" tabindex="-1"><a class="header-anchor" href="#navigating-by-symbols" aria-hidden="true">#</a> Navigating by Symbols</h4><p>You can also jump around a little more informatively with the Symbols View. To jump to a symbol such as a method definition, press <kbd class="platform-mac">Cmd+R</kbd><kbd class="platform-windows platform-linux">Ctrl+R</kbd>. This opens a list of all symbols in the current file, which you can fuzzy filter similarly to <kbd class="platform-mac">Cmd+T</kbd><kbd class="platform-windows platform-linux">Ctrl+T</kbd>. You can also search for symbols across your project but it requires a <code>tags</code> file.</p><p><img src="'+b+'" alt="Search by symbol across your project"></p>',3),ot=e("code",null,"tags",-1),nt={href:"https://ctags.io/",target:"_blank",rel:"noopener noreferrer"},st=e("code",null,"tags",-1),it={href:"https://docs.ctags.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},lt=e("p",null,[t("Once you have your "),e("code",null,"tags"),t(" file generated, you can use it to search for symbols across your project by pressing "),e("kbd",{class:"platform-windows platform-linux"},"Ctrl+Shift+R"),t(". This also enables you to use "),e("kbd",{class:"platform-linux"},"Alt+Ctrl+Down"),t(" to go to and "),e("kbd",{class:"platform-linux"},"Alt+Ctrl+Up"),t(" to return from the declaration of the symbol under the cursor.")],-1),rt=e("p",null,[t("Once you have your "),e("code",null,"tags"),t(" file generated, you can use it to search for symbols across your project by pressing "),e("kbd",{class:"platform-mac"},"Cmd+Shift+R"),t(". This also enables you to use "),e("kbd",{class:"platform-mac"},"Alt+Cmd+Down"),t(" to go to and "),e("kbd",{class:"platform-mac"},"Alt+Cmd+Up"),t(" to return from the declaration of the symbol under the cursor.")],-1),ct=e("p",null,[t("Once you have your "),e("code",null,"tags"),t(" file generated, you can use it to search for symbols across your project by pressing "),e("kbd",{class:"platform-mac"},"Cmd+Shift+R"),e("kbd",{class:"platform-windows platform-linux"},"Ctrl+Shift+R"),t(".")],-1),dt=e("code",null,".ctags",-1),pt=e("span",{class:"platform-mac platform-linux"},[e("code",null,"~/.ctags")],-1),ht=e("span",{class:"platform-windows"},[e("code",null,"%USERPROFILE%\\.ctags")],-1),ut={href:"https://github.com/atom/symbols-view/blob/master/lib/ctags-config",target:"_blank",rel:"noopener noreferrer"},mt={href:"https://github.com/atom/symbols-view",target:"_blank",rel:"noopener noreferrer"},ft=n('<h4 id="bookmarks" tabindex="-1"><a class="header-anchor" href="#bookmarks" aria-hidden="true">#</a> Bookmarks</h4><p>Atom also has a great way to bookmark specific lines in your project so you can jump back to them quickly.</p><p>If you press <kbd class="platform-mac">Cmd+F2</kbd><kbd class="platform-windows">Alt+Ctrl+F2</kbd><kbd class="platform-linux">Ctrl+Shift+F2</kbd>, Atom will toggle a &quot;bookmark&quot; on the current line. You can set these throughout your project and use them to quickly find and jump to important lines of your project. A small bookmark symbol is added to the line gutter, like on line 22 of <a href="#bookmarks-image">the image below</a>.</p><p>If you hit <kbd class="platform-all">F2</kbd>, Atom will jump to the next bookmark in the file you currently have focused. If you use <kbd class="platform-all">Shift+F2</kbd> it will cycle backwards through them instead.</p><p>You can also see a list of all your project&#39;s current bookmarks and quickly filter them and jump to any of them by hitting <kbd class="platform-all">Ctrl+F2</kbd>.</p><a name="bookmarks-image"></a>',6),gt={href:"https://github.com/atom/bookmarks",target:"_blank",rel:"noopener noreferrer"},bt=n('<h3 id="atom-selections" tabindex="-1"><a class="header-anchor" href="#atom-selections" aria-hidden="true">#</a> Atom Selections</h3><p>Text selections in Atom support a number of actions, such as scoping deletion, indentation and search actions, and marking text for actions such as quoting and bracketing.</p><p>Selections mirror many of the movement commands. They&#39;re actually exactly the same keybindings as the movement commands, but with a <kbd class="platform-all">Shift</kbd> key added in.</p><ul><li><kbd class="platform-all">Shift+Up</kbd><span class="platform-mac"> or <kbd class="platform-mac">Ctrl+Shift+P</kbd></span> - Select up</li><li><kbd class="platform-all">Shift+Down</kbd><span class="platform-mac"> or <kbd class="platform-mac">Ctrl+Shift+N</kbd></span> - Select down</li><li><kbd class="platform-all">Shift+Left</kbd><span class="platform-mac"> or <kbd class="platform-mac">Ctrl+Shift+B</kbd></span> - Select previous character</li><li><kbd class="platform-all">Shift+Right</kbd><span class="platform-mac"> or <kbd class="platform-mac">Ctrl+Shift+F</kbd></span> - Select next character</li><li><kbd class="platform-mac">Alt+Shift+Left</kbd><kbd class="platform-windows platform-linux">Ctrl+Shift+Left</kbd><span class="platform-mac"> or <kbd class="platform-mac">Alt+Shift+B</kbd></span> - Select to beginning of word</li><li><kbd class="platform-mac">Alt+Shift+Right</kbd><kbd class="platform-windows platform-linux">Ctrl+Shift+Right</kbd><span class="platform-mac"> or <kbd class="platform-mac">Alt+Shift+F</kbd></span> - Select to end of word</li><li><kbd class="platform-mac">Cmd+Shift+Right</kbd><kbd class="platform-windows platform-linux">Shift+End</kbd><span class="platform-mac"> or <kbd class="platform-mac">Ctrl+Shift+E</kbd></span> - Select to end of line</li><li><kbd class="platform-mac">Cmd+Shift+Left</kbd><kbd class="platform-windows platform-linux">Shift+Home</kbd><span class="platform-mac"> or <kbd class="platform-mac">Ctrl+Shift+A</kbd></span> - Select to first character of line</li><li><kbd class="platform-mac">Cmd+Shift+Up</kbd><kbd class="platform-windows platform-linux">Ctrl+Shift+Home</kbd> - Select to top of file</li><li><kbd class="platform-mac">Cmd+Shift+Down</kbd><kbd class="platform-windows platform-linux">Ctrl+Shift+End</kbd> - Select to bottom of file</li></ul><p>In addition to the cursor movement selection commands, there are also a few commands that help with selecting specific areas of content.</p><ul><li><kbd class="platform-mac">Cmd+A</kbd><kbd class="platform-windows platform-linux">Ctrl+A</kbd> - Select the entire contents of the file</li><li><kbd class="platform-mac">Cmd+L</kbd><kbd class="platform-windows platform-linux">Ctrl+L</kbd> - Select the entire line</li></ul>',6),kt=e("ul",null,[e("li",null,[e("kbd",{class:"platform-mac"},"Ctrl+Shift+W"),t(" - Select the current word")])],-1),yt=n('<h3 id="editing-and-deleting-text" tabindex="-1"><a class="header-anchor" href="#editing-and-deleting-text" aria-hidden="true">#</a> Editing and Deleting Text</h3><p>So far we&#39;ve looked at a number of ways to move around and select regions of a file, so now let&#39;s actually change some of that text. Obviously you can type in order to insert characters, but there are also a number of ways to delete and manipulate text that could come in handy.</p><h4 id="basic-manipulation" tabindex="-1"><a class="header-anchor" href="#basic-manipulation" aria-hidden="true">#</a> Basic Manipulation</h4><p>There are a handful of cool keybindings for basic text manipulation that might come in handy. These range from moving around lines of text and duplicating lines to changing the case.</p><ul><li><kbd class="platform-mac">Cmd+J</kbd><kbd class="platform-windows platform-linux">Ctrl+J</kbd> - Join the next line to the end of the current line</li><li><kbd class="platform-mac">Cmd+Ctrl+Up/Down</kbd><kbd class="platform-windows platform-linux">Ctrl+Up/Down</kbd> - Move the current line up or down</li><li><kbd class="platform-mac">Cmd+Shift+D</kbd><kbd class="platform-windows platform-linux">Ctrl+Shift+D</kbd> - Duplicate the current line</li><li><kbd class="platform-mac">Cmd+K</kbd> <kbd class="platform-mac">Cmd+U</kbd><kbd class="platform-windows platform-linux">Ctrl+K</kbd> <kbd class="platform-windows platform-linux">Ctrl+U</kbd> - Upper case the current word</li><li><kbd class="platform-mac">Cmd+K</kbd> <kbd class="platform-mac">Cmd+L</kbd><kbd class="platform-windows platform-linux">Ctrl+K</kbd> <kbd class="platform-windows platform-linux">Ctrl+L</kbd> - Lower case the current word</li></ul>',5),vt=e("ul",null,[e("li",null,[e("kbd",{class:"platform-mac"},"Ctrl+T"),t(" - Transpose characters. This swaps the two characters on either side of the cursor.")])],-1),wt=n('<p>Atom also has built in functionality to re-flow a paragraph to hard-wrap at a given maximum line length. You can format the current selection to have lines no longer than 80 (or whatever number <code>editor.preferredLineLength</code> is set to) characters using <kbd class="platform-mac">Alt+Cmd+Q</kbd><kbd class="platform-windows platform-linux">Alt+Ctrl+Q</kbd>. If nothing is selected, the current paragraph will be reflowed.</p><h4 id="deleting-and-cutting" tabindex="-1"><a class="header-anchor" href="#deleting-and-cutting" aria-hidden="true">#</a> Deleting and Cutting</h4><p>You can also delete or cut text out of your buffer with some shortcuts. Be ruthless.</p><ul><li><kbd class="platform-mac platform-windows platform-linux">Ctrl+Shift+K</kbd> - Delete current line</li><li><span class="platform-mac"><kbd class="platform-mac">Alt+Backspace</kbd> or <kbd class="platform-mac">Alt+H</kbd></span><kbd class="platform-windows platform-linux">Ctrl+Backspace</kbd> - Delete to beginning of word</li><li><span class="platform-mac"><kbd class="platform-mac">Alt+Delete</kbd> or <kbd class="platform-mac">Alt+D</kbd></span><kbd class="platform-windows platform-linux">Ctrl+Delete</kbd> - Delete to end of word</li></ul>',4),_t=e("ul",null,[e("li",null,[e("kbd",{class:"platform-mac"},"Cmd+Delete"),t(" - Delete to end of line")]),e("li",null,[e("kbd",{class:"platform-mac"},"Ctrl+K"),t(" - Cut to end of line")]),e("li",null,[e("kbd",{class:"platform-mac"},"Cmd+Backspace"),t(" - Delete to beginning of line")])],-1),xt=n('<h4 id="multiple-cursors-and-selections" tabindex="-1"><a class="header-anchor" href="#multiple-cursors-and-selections" aria-hidden="true">#</a> Multiple Cursors and Selections</h4><p>One of the cool things that Atom can do out of the box is support multiple cursors. This can be incredibly helpful in manipulating long lists of text.</p><ul><li><kbd class="platform-mac">Cmd+Click</kbd><kbd class="platform-windows platform-linux">Ctrl+Click</kbd> - Add a new cursor at the clicked location</li><li><kbd class="platform-mac">Ctrl+Shift+Up/Down</kbd><kbd class="platform-windows">Alt+Ctrl+Up/Down</kbd><kbd class="platform-linux">Alt+Shift+Up/Down</kbd> - Add another cursor above/below the current cursor</li><li><kbd class="platform-mac">Cmd+D</kbd><kbd class="platform-windows platform-linux">Ctrl+D</kbd> - Select the next word in the document that is the same as the currently selected word</li><li><kbd class="platform-mac">Cmd+Ctrl+G</kbd><kbd class="platform-windows platform-linux">Alt+F3</kbd> - Select all words in the document that are the same as the currently selected word</li></ul>',3),Ct=e("ul",null,[e("li",null,[e("kbd",{class:"platform-mac"},"Cmd+Shift+L"),t(" - Convert a multi-line selection into multiple cursors")])],-1),At=n('<p>Using these commands you can place cursors in multiple places in your document and effectively execute the same commands in multiple places at once.</p><p><img src="'+k+'" alt="Using multiple cursors"></p><p>This can be incredibly helpful in doing many type of repetitive tasks such as renaming variables or changing the format of some text. You can use this with almost any plugin or command - for example, changing case and moving or duplicating lines.</p><p>You can also use the mouse to select text with the <kbd class="platform-mac">Cmd</kbd><kbd class="platform-windows platform-linux">Ctrl</kbd> key pressed down to select multiple regions of your text simultaneously.</p><h4 id="whitespace" tabindex="-1"><a class="header-anchor" href="#whitespace" aria-hidden="true">#</a> Whitespace</h4><p>Atom comes with several commands to help you manage the whitespace in your document. One very useful pair of commands converts leading spaces into tabs and converts leading tabs into spaces. If you&#39;re working with a document that has mixed whitespace, these commands are great for helping to normalize the file. There are no keybindings for the whitespace commands, so you will have to search your command palette for &quot;Convert Spaces to Tabs&quot; (or vice versa) to run one of these commands.</p>',6),St={href:"https://github.com/atom/whitespace",target:"_blank",rel:"noopener noreferrer"},qt=e("code",null,"whitespace",-1),Tt=n('<p><img src="'+y+'" alt="Managing your whitespace settings"></p><div class="custom-container note"><p class="custom-container-title">Note</p><p>The &quot;Remove Trailing Whitespace&quot; option is on by default. This means that every time you save any file opened in Atom, it will strip all trailing whitespace from the file. If you want to disable this, go to the <code>whitespace</code> package in your settings panel and uncheck that option.</p></div><p>Atom will also by default ensure that your file has a trailing newline. You can also disable this option on that screen.</p><h4 id="brackets" tabindex="-1"><a class="header-anchor" href="#brackets" aria-hidden="true">#</a> Brackets</h4><p>Atom ships with intelligent and easy to use bracket handling.</p><p>It will by default highlight <code>[]</code>, <code>()</code>, and <code>{}</code> style brackets when your cursor is over them. It will also highlight matching XML and HTML tags.</p><p>Atom will also automatically autocomplete <code>[]</code>, <code>()</code>, and <code>{}</code>, <code>&quot;&quot;</code>, <code>&#39;&#39;</code>, <code>\u201C\u201D</code>, <code>\u2018\u2019</code>, <code>\xAB\xBB</code>, <code>\u2039\u203A</code>, and backticks when you type the leading one. If you have a selection and you type any of these opening brackets or quotes, Atom will enclose the selection with the opening and closing brackets or quotes.</p><p>There are a few other interesting bracket related commands that you can use.</p><ul><li><kbd class="platform-mac platform-windows platform-linux">Ctrl+M</kbd> - Jump to the bracket matching the one adjacent to the cursor. It jumps to the nearest enclosing bracket when there&#39;s no adjacent bracket.</li><li><kbd class="platform-mac">Cmd+Ctrl+M</kbd><kbd class="platform-windows platform-linux">Alt+Ctrl+,</kbd> - Select all the text inside the current brackets</li><li><kbd class="platform-mac">Alt+Cmd+.</kbd><kbd class="platform-windows platform-linux">Alt+Ctrl+.</kbd> - Close the current XML/HTML tag</li></ul>',9),It={href:"https://github.com/atom/bracket-matcher",target:"_blank",rel:"noopener noreferrer"},Pt=n('<h4 id="encoding" tabindex="-1"><a class="header-anchor" href="#encoding" aria-hidden="true">#</a> Encoding</h4><p>Atom also ships with some basic file encoding support should you find yourself working with non-UTF-8 encoded files, or should you wish to create one.</p><ul><li><kbd class="platform-mac platform-windows">Ctrl+Shift+U</kbd><kbd class="platform-linux">Alt+U</kbd> - Toggle menu to change file encoding</li></ul><p>If you pull up the file encoding dialog, you can choose an alternate file encoding to save your file in.</p><p>When you open a file, Atom will try to auto-detect the encoding. If Atom can&#39;t identify the encoding, the encoding will default to UTF-8, which is also the default encoding for new files.</p><p><img src="'+v+'" alt="Changing your file encoding"></p><p>If you pull up the encoding menu and change the active encoding to something else, the file will be written out in that encoding the next time you save the file.</p>',7),Ft={href:"https://github.com/atom/encoding-selector",target:"_blank",rel:"noopener noreferrer"},Rt=n('<h3 id="find-and-replace" tabindex="-1"><a class="header-anchor" href="#find-and-replace" aria-hidden="true">#</a> Find and Replace</h3><p>Finding and replacing text in your file or project is quick and easy in Atom.</p><ul><li><kbd class="platform-mac">Cmd+F</kbd><kbd class="platform-windows platform-linux">Ctrl+F</kbd> - Search within a buffer</li><li><kbd class="platform-mac">Cmd+Shift+F</kbd><kbd class="platform-windows platform-linux">Ctrl+Shift+F</kbd> - Search the entire project</li></ul><p>If you launch either of those commands, you&#39;ll be greeted with the Find and Replace panel at the bottom of your screen.</p><p><img src="'+_+'" alt="Find and replace text in the current file" title="Find and replace text in the current file"></p><p>To search within your current file you can press <kbd class="platform-mac">Cmd+F</kbd><kbd class="platform-windows platform-linux">Ctrl+F</kbd>, type in a search string and press <kbd class="platform-all">Enter</kbd> (or <kbd class="platform-mac">Cmd+G</kbd><kbd class="platform-windows platform-linux">F3</kbd> or the &quot;Find Next&quot; button) multiple times to cycle through all the matches in that file. <kbd class="platform-all">Alt+Enter</kbd> will find all occurences of the search string. The Find and Replace panel also contains buttons for toggling case sensitivity, performing regular expression matching, scoping the search to selections, and performing whole word search.</p><p>If you type a string in the replacement text box, you can replace matches with a different string. For example, if you wanted to replace every instance of the string &quot;Scott&quot; with the string &quot;Dragon&quot;, you would enter those values in the two text boxes and press the &quot;Replace All&quot; button to perform the replacements.</p>',7),Lt={class:"custom-container note"},Gt=e("p",{class:"custom-container-title"},"Note",-1),Ht=e("p",null,[e("strong",null,"Note:"),t(" Atom uses JavaScript regular expressions to perform regular expression searches.")],-1),Ot={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions",target:"_blank",rel:"noopener noreferrer"},Mt=e("p",null,[t("You can also find and replace throughout your entire project if you invoke the panel with "),e("kbd",{class:"platform-mac"},"Cmd+Shift+F"),e("kbd",{class:"platform-windows platform-linux"},"Ctrl+Shift+F"),t(".")],-1),jt=e("p",null,[e("img",{src:w,alt:"Find and replace text in your project",title:"Find and replace text in your project"})],-1),zt=e("p",null,"This is a great way to find out where in your project a function is called, an anchor is linked to or a specific misspelling is located. Click on the matching line to jump to that location in that file.",-1),Et={href:"https://en.wikipedia.org/wiki/Glob_%28programming%29",target:"_blank",rel:"noopener noreferrer"},Dt=e("code",null,"src/*.js",-1),Yt=e("code",null,"src",-1),$t=e("code",null,"**",-1),Wt=e("code",null,"docs/**/*.md",-1),Ut=e("code",null,"docs/a/foo.md",-1),Bt=e("code",null,"docs/a/b/foo.md",-1),Nt=e("p",null,[t("When you have multiple project folders open, this feature can also be used to search in only one of those folders. For example, if you had the folders "),e("code",null,"/path1/folder1"),t(" and "),e("code",null,"/path2/folder2"),t(" open, you could enter a pattern starting with "),e("code",null,"folder1"),t(" to search only in the first folder.")],-1),Vt=e("p",null,[t("Press "),e("kbd",{class:"platform-all"},"Esc"),t(" while focused on the Find and Replace panel to clear the pane from your workspace.")],-1),Jt={href:"https://github.com/atom/find-and-replace",target:"_blank",rel:"noopener noreferrer"},Kt={href:"https://github.com/atom/scandal",target:"_blank",rel:"noopener noreferrer"},Zt=n(`<h3 id="snippets" tabindex="-1"><a class="header-anchor" href="#snippets" aria-hidden="true">#</a> Snippets</h3><p>Snippets are an incredibly powerful way to quickly generate commonly needed code syntax from a shortcut.</p><p>The idea is that you can type something like <code>habtm</code> and then press the <kbd class="platform-all">Tab</kbd> key and it will expand into <code>has_and_belongs_to_many</code>.</p><p>Many Core and Community packages come bundled with their own snippets that are specific to it. For example, the <code>language-html</code> package that provides support for HTML syntax highlighting and grammar comes with dozens of snippets to create many of the various HTML tags you might want to use. If you create a new HTML file in Atom, you can type <code>html</code> and then press <kbd class="platform-all">Tab</kbd> and it will expand to:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ltr<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It will also position the cursor in the <code>lang</code> attribute value so you can edit it if necessary. Many snippets have multiple focus points that you can move through with the <kbd class="platform-all">Tab</kbd> key as well - for instance, in the case of this HTML snippet, after the cursor is placed in the <code>lang</code> attribute value, you can continue pressing <kbd class="platform-all">Tab</kbd> and the cursor will move to the <code>dir</code> attribute value, then to the middle of the <code>title</code> tag, then finally to the middle of the <code>body</code> tag.</p><p>To see all the available snippets for the file type that you currently have open, choose &quot;Snippets: Available&quot; in the Command Palette.</p><p><img src="`+x+`" alt="View all available snippets" title="View all available snippets"></p><p>You can also use fuzzy search to filter this list down by typing in the selection box. Selecting one of them will execute the snippet where your cursor is (or multiple cursors are).</p><h4 id="creating-your-own-snippets" tabindex="-1"><a class="header-anchor" href="#creating-your-own-snippets" aria-hidden="true">#</a> Creating Your Own Snippets</h4><p>So that&#39;s pretty cool, but what if there is something the language package didn&#39;t include or something that is custom to the code you write? Luckily it&#39;s incredibly easy to add your own snippets.</p><p>There is a text file in your <span class="platform-mac platform-linux"><code>~/.atom</code></span><span class="platform-windows"><code>%USERPROFILE%\\.atom</code></span> directory called <code>snippets.cson</code> that contains all your custom snippets that are loaded when you launch Atom. You can also easily open up that file by selecting the <span class="platform-mac"><em>Atom &gt; Snippets</em></span><span class="platform-linux"><em>Edit &gt; Snippets</em></span><span class="platform-windows"><em>File &gt; Snippets</em></span> menu.</p><h5 id="snippet-format" tabindex="-1"><a class="header-anchor" href="#snippet-format" aria-hidden="true">#</a> Snippet Format</h5><p>So let&#39;s look at how to write a snippet. The basic snippet format looks like this:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;.source.js&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;console.log&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;prefix&#39;</span><span class="token operator">:</span> <span class="token string">&#39;log&#39;</span>
    <span class="token string-property property">&#39;body&#39;</span><span class="token operator">:</span> <span class="token string">&#39;console.log(\${1:&quot;crash&quot;});$2&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The leftmost keys are the selectors where these snippets should be active. The easiest way to determine what this should be is to go to the language package of the language you want to add a snippet for and look for the &quot;Scope&quot; string.</p><p>For example, if we wanted to add a snippet that would work for Java files, we would look up the <code>language-java</code> package in our Settings view and we can see the Scope is <code>source.java</code>. Then the top level snippet key would be that prepended by a period (like a CSS class selector would do).</p><p><img src="`+C+`" alt="Finding the selector scope for a snippet" title="Finding the selector scope for a snippet"></p><p>The next level of keys are the snippet names. These are used for describing the snippet in a more readable way in the snippet menu. You can name them whatever you want.</p><p>Under each snippet name is a <code>prefix</code> that should trigger the snippet and a <code>body</code> to insert when the snippet is triggered.</p><p>Each <code>$</code> followed by a number is a tab stop. Tab stops are cycled through by pressing <kbd class="platform-all">Tab</kbd> once a snippet has been triggered.</p><p>Tab stops with the same number will create multiple cursors.</p><p>The above example adds a <code>log</code> snippet to JavaScript files that would expand to:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;crash&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The string <code>&quot;crash&quot;</code> would be initially selected and pressing tab again would place the cursor after the <code>;</code></p>`,25),Qt={class:"custom-container warning"},Xt=e("p",{class:"custom-container-title"},"Warning",-1),ea=e("h5",{id:"multi-line-snippet-body",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#multi-line-snippet-body","aria-hidden":"true"},"#"),t(" Multi-line Snippet Body")],-1),ta={href:"http://coffeescript.org/#strings",target:"_blank",rel:"noopener noreferrer"},aa=e("code",null,'"""',-1),oa=n(`<div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;.source.js&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;if, else if, else&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;prefix&#39;</span><span class="token operator">:</span> <span class="token string">&#39;ieie&#39;</span>
    <span class="token string-property property">&#39;body&#39;</span><span class="token operator">:</span> <span class="token multiline-string string">&quot;&quot;&quot;
      if (\${1:true}) {
        $2
      } else if (\${3:false}) {
        $4
      } else {
        $5
      }
    &quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you might expect, there is a snippet to create snippets. If you open up a snippets file and type <code>snip</code> and then press <kbd class="platform-all">Tab</kbd>, you will get the following text inserted:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;.source.js&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;Snippet Name&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;prefix&#39;</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span>
    <span class="token string-property property">&#39;body&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Hello World!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u{1F4A5} just fill that bad boy out and you have yourself a snippet. As soon as you save the file, Atom should reload the snippets and you will immediately be able to try it out.</p><h5 id="multiple-snippets-per-source" tabindex="-1"><a class="header-anchor" href="#multiple-snippets-per-source" aria-hidden="true">#</a> Multiple Snippets per Source</h5><p>You can see below the format for including multiple snippets for the same scope in your <code>snippets.cson</code> file. Just include the snippet name, prefix, and body keys for additional snippets inside the scope key:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;.source.gfm&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;Hello World&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;prefix&#39;</span><span class="token operator">:</span> <span class="token string">&#39;hewo&#39;</span>
    <span class="token string-property property">&#39;body&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Hello World!&#39;</span>

  <span class="token string-property property">&#39;Github Hello&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;prefix&#39;</span><span class="token operator">:</span> <span class="token string">&#39;gihe&#39;</span>
    <span class="token string-property property">&#39;body&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Octocat says Hi!&#39;</span>

  <span class="token string-property property">&#39;Octocat Image Link&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;prefix&#39;</span><span class="token operator">:</span> <span class="token string">&#39;octopic&#39;</span>
    <span class="token string-property property">&#39;body&#39;</span><span class="token operator">:</span> <span class="token string">&#39;![GitHub Octocat](https://assets-cdn.github.com/images/modules/logos_page/Octocat.png)&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),na=e("h4",{id:"more-info",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#more-info","aria-hidden":"true"},"#"),t(" More Info")],-1),sa={href:"https://github.com/atom/snippets",target:"_blank",rel:"noopener noreferrer"},ia={href:"https://github.com/atom/language-html/blob/master/snippets/language-html.cson",target:"_blank",rel:"noopener noreferrer"},la={href:"https://github.com/atom/language-javascript/blob/master/snippets/language-javascript.cson",target:"_blank",rel:"noopener noreferrer"},ra=n('<h3 id="autocomplete" tabindex="-1"><a class="header-anchor" href="#autocomplete" aria-hidden="true">#</a> Autocomplete</h3><p>If you&#39;re still looking to save some typing time, Atom also ships with simple autocompletion functionality.</p><p>The autocomplete system lets you view and insert possible completions in the editor using <kbd class="platform-all">Tab</kbd> or <kbd class="platform-all">Enter</kbd>.</p><p><img src="'+A+'" alt="Autocomplete menu" title="Autocomplete menu"></p><p>By default, the autocomplete system will look through the current open file for strings that match what you&#39;re starting to type.</p><p>If you want more options, in the Settings panel for the autocomplete-plus package you can toggle a setting to make autocomplete-plus look for text in all your open buffers rather than just the current file.</p>',6),ca={href:"https://github.com/atom/autocomplete-plus",target:"_blank",rel:"noopener noreferrer"},da=n('<h3 id="folding" tabindex="-1"><a class="header-anchor" href="#folding" aria-hidden="true">#</a> Folding</h3><p>If you want to see an overview of the structure of the code file you&#39;re working on, folding can be a helpful tool. Folding hides blocks of code such as functions or looping blocks in order to simplify what is on your screen.</p><p>You can fold blocks of code by clicking the arrows that appear when you hover your mouse cursor over the gutter. You can also fold and unfold from the keyboard with the <kbd class="platform-mac">Alt+Cmd+[</kbd><kbd class="platform-windows platform-linux">Alt+Ctrl+[</kbd> and <kbd class="platform-mac">Alt+Cmd+]</kbd><kbd class="platform-windows platform-linux">Alt+Ctrl+]</kbd> keybindings.</p><p><img src="'+S+'" alt="Code folding example" title="Code folding example"></p><p>To fold everything, use <kbd class="platform-mac">Alt+Cmd+Shift+[</kbd><kbd class="platform-windows platform-linux">Alt+Ctrl+Shift+[</kbd> and to unfold everything use <kbd class="platform-mac">Alt+Cmd+Shift+]</kbd><kbd class="platform-windows platform-linux">Alt+Ctrl+Shift+]</kbd>. You can also fold at a specific indentation level with <kbd class="platform-mac">Cmd+K</kbd><kbd class="platform-windows platform-linux">Ctrl+K</kbd> <kbd class="platform-mac">Cmd+0-9</kbd><kbd class="platform-windows platform-linux">Ctrl+0-9</kbd> where the number is the indentation depth.</p><p>Finally, you can fold arbitrary sections of your code or text by making a selection and then typing <kbd class="platform-mac">Alt+Cmd+Ctrl+F</kbd><kbd class="platform-windows platform-linux">Alt+Ctrl+F</kbd> or choosing &quot;Fold Selection&quot; in the Command Palette.</p><h3 id="panes" tabindex="-1"><a class="header-anchor" href="#panes" aria-hidden="true">#</a> Panes</h3><p>You can split any editor pane horizontally or vertically by using <kbd class="platform-mac">Cmd+K</kbd><kbd class="platform-windows platform-linux">Ctrl+K</kbd> <kbd class="platform-all">Up/Down/Left/Right</kbd> where the direction key is the direction to split the pane. Once you have a split pane, you can switch between them with <kbd class="platform-mac">Cmd+K</kbd><kbd class="platform-windows platform-linux">Ctrl+K</kbd> <kbd class="platform-mac">Cmd+Up/Down/Left/Right</kbd><kbd class="platform-windows platform-linux">Ctrl+Up/Down/Left/Right</kbd> where the direction is the direction the focus should move to.</p><p><img src="'+q+'" alt="Multiple panes" title="Multiple panes"></p><p>Each pane has its own &quot;pane items&quot;, which are represented by tabs. You can move the files from pane to pane by dragging them with the mouse and dropping them in the pane you want that file to be in.</p>',10),pa={class:"custom-container tip"},ha=e("p",{class:"custom-container-title"},"Tip",-1),ua={href:"https://github.com/atom/tabs",target:"_blank",rel:"noopener noreferrer"},ma=n('<p>To close a pane, you can close all pane items with <kbd class="platform-mac">Cmd+W</kbd><kbd class="platform-windows platform-linux">Ctrl+W</kbd>. You can configure whether panes auto-close when empty in the Settings View with the &quot;Remove Empty Panes&quot; setting under Core Settings.</p><h3 id="pending-pane-items" tabindex="-1"><a class="header-anchor" href="#pending-pane-items" aria-hidden="true">#</a> Pending Pane Items</h3><p><em>&quot;Pending Pane Items&quot; were formerly referred to as &quot;Preview Tabs&quot;</em></p><p>When you open a new file by single-clicking in the Tree View, it will open in a new tab with an italic title. This indicates that the file is &quot;pending&quot;. When a file is pending, it will be replaced by the next pending file that is opened. This allows you to click through a bunch of files to find something without having to go back and close them all.</p><p>You can confirm a pending file by doing any of the following:</p><ul><li>Double-clicking the tab of the file</li><li>Double-clicking the file in the tree view</li><li>Editing the contents of the file</li><li>Saving the file</li></ul><p>You can also open a file already confirmed by double-clicking it in the tree view instead of single-clicking it.</p><h4 id="disabling-pending-pane-items" tabindex="-1"><a class="header-anchor" href="#disabling-pending-pane-items" aria-hidden="true">#</a> Disabling Pending Pane Items</h4><p><img src="'+T+'" alt="Allow Pending Pane Items setting" title="Allow Pending Pane Items setting"></p><p>If you would prefer to not have files open in pending form, you can disable this behavior by unchecking &quot;Allow Pending Pane Items&quot; in the Core Settings section of the Settings View. With pending pane items disabled, single-clicking a file in the Tree View will select the file but not open it. You will have to double-click the file to open it.</p><h3 id="grammar" tabindex="-1"><a class="header-anchor" href="#grammar" aria-hidden="true">#</a> Grammar</h3>',11),fa=e("p",null,[t("When you load a file, Atom does a little work to try to figure out what type of file it is. Largely this is accomplished by looking at its file extension ("),e("code",null,".md"),t(" is generally a Markdown file, etc), though sometimes it has to inspect the content a bit to figure it out.")],-1),ga=e("p",null,[t(`When you open a file and Atom can't determine a grammar for the file, it will default to "Plain Text", which is the simplest one. If it does default to "Plain Text", picks the wrong grammar for the file, or if for any reason you wish to change the selected grammar, you can pull up the Grammar Selector with `),e("kbd",{class:"platform-all"},"Ctrl+Shift+L"),t(".")],-1),ba=e("p",null,[e("img",{src:I,alt:"Grammar Selector",title:"Grammar Selector"})],-1),ka=e("p",null,"When the grammar of a file is changed, Atom will remember that for the current session.",-1),ya={href:"https://github.com/atom/atom/tree/master/packages/grammar-selector",target:"_blank",rel:"noopener noreferrer"},va=e("h3",{id:"version-control-in-atom",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#version-control-in-atom","aria-hidden":"true"},"#"),t(" Version Control in Atom")],-1),wa={href:"https://git-scm.com",target:"_blank",rel:"noopener noreferrer"},_a={href:"https://github.com",target:"_blank",rel:"noopener noreferrer"},xa=n('<p>In order to use version control in Atom, the project root needs to contain the Git repository.</p><h4 id="checkout-head-revision" tabindex="-1"><a class="header-anchor" href="#checkout-head-revision" aria-hidden="true">#</a> Checkout HEAD revision</h4><p>The <kbd class="platform-mac">Alt+Cmd+Z</kbd><kbd class="platform-windows platform-linux">Alt+Ctrl+Z</kbd> keybinding checks out the <code>HEAD</code> revision of the file in the editor.</p><p>This is a quick way to discard any saved and staged changes you&#39;ve made and restore the file to the version in the <code>HEAD</code> commit. This is essentially the same as running <code>git checkout HEAD -- &lt;path&gt;</code> and <code>git reset HEAD -- &lt;path&gt;</code> from the command line for that path.</p><p><img src="'+R+'" alt="Git checkout " title="Git checkout `HEAD`"></p><p>This command goes onto the undo stack so you can use <kbd class="platform-mac">Cmd+Z</kbd><kbd class="platform-windows platform-linux">Ctrl+Z</kbd> afterwards to restore the previous contents.</p><h4 id="git-status-list" tabindex="-1"><a class="header-anchor" href="#git-status-list" aria-hidden="true">#</a> Git status list</h4>',7),Ca={href:"https://github.com/atom/fuzzy-finder",target:"_blank",rel:"noopener noreferrer"},Aa=e("kbd",{class:"platform-mac"},"Cmd+T",-1),Sa=e("kbd",{class:"platform-windows platform-linux"},"Ctrl+T",-1),qa=e("kbd",{class:"platform-mac"},"Cmd+B",-1),Ta=e("kbd",{class:"platform-windows platform-linux"},"Ctrl+B",-1),Ia=e("kbd",{class:"platform-mac"},"Cmd+Shift+B",-1),Pa=e("kbd",{class:"platform-windows platform-linux"},"Ctrl+Shift+B",-1),Fa=e("code",null,"git status",-1),Ra=e("p",null,[e("img",{src:P,alt:"Git status list",title:"`git status` list"})],-1),La=e("p",null,"An icon will appear to the right of each file letting you know whether it is untracked or modified.",-1),Ga=e("h4",{id:"commit-editor",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#commit-editor","aria-hidden":"true"},"#"),t(" Commit editor")],-1),Ha={href:"https://github.com/atom/language-git",target:"_blank",rel:"noopener noreferrer"},Oa=n('<p><img src="'+L+`" alt="Git commit message highlighting" title="Git commit message highlighting"></p><p>You can configure Atom to be your Git commit editor with the following command:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ git config --global core.editor &quot;atom --wait&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),Ma={href:"https://github.com/atom/language-git",target:"_blank",rel:"noopener noreferrer"},ja=e("h4",{id:"status-bar-icons",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#status-bar-icons","aria-hidden":"true"},"#"),t(" Status bar icons")],-1),za={href:"https://github.com/atom/status-bar",target:"_blank",rel:"noopener noreferrer"},Ea=e("p",null,[e("img",{src:F,alt:"Git Status Bar decorations",title:"Git Status Bar decorations"})],-1),Da=e("p",null,"The currently checked out branch name is shown with the number of commits the branch is ahead of or behind its upstream branch. An icon is added if the file is untracked, modified, or ignored. The number of lines added and removed since the file was last committed will be displayed as well.",-1),Ya=e("h4",{id:"line-diffs",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#line-diffs","aria-hidden":"true"},"#"),t(" Line diffs")],-1),$a={href:"https://github.com/atom/git-diff",target:"_blank",rel:"noopener noreferrer"},Wa=n('<p><img src="'+G+'" alt="Git line diff indications" title="Git line diff indications"></p><p>This package also adds <kbd class="platform-all">Alt+G</kbd> <kbd class="platform-all">Down</kbd> and <kbd class="platform-all">Alt+G</kbd> <kbd class="platform-all">Up</kbd> keybindings that allow you to move the cursor to the next or previous diff in the current editor.</p><h4 id="open-on-github" tabindex="-1"><a class="header-anchor" href="#open-on-github" aria-hidden="true">#</a> Open on GitHub</h4><p>If the project you&#39;re working on is on GitHub, there are also some very useful integrations you can use. Most of the commands will take the current file you&#39;re viewing and open a view of that file on GitHub - for instance, the blame or commit history of that file.</p><ul><li><kbd class="platform-all">Alt+G</kbd> <kbd class="platform-all">O</kbd> - Open file on GitHub</li><li><kbd class="platform-all">Alt+G</kbd> <kbd class="platform-all">B</kbd> - Open Blame view of file on GitHub</li><li><kbd class="platform-all">Alt+G</kbd> <kbd class="platform-all">H</kbd> - Open History view of file on GitHub</li><li><kbd class="platform-all">Alt+G</kbd> <kbd class="platform-all">C</kbd> - Copy the URL of the current file on GitHub to the clipboard</li><li><kbd class="platform-all">Alt+G</kbd> <kbd class="platform-all">R</kbd> - Branch compare on GitHub</li></ul><p>The branch comparison shows you the commits that are on the branch you&#39;re currently working on locally that are not on the mainline branch.</p><p><img src="'+H+'" alt="Open Blame of file on GitHub" title="Open Blame of file on GitHub"></p><h3 id="github-package" tabindex="-1"><a class="header-anchor" href="#github-package" aria-hidden="true">#</a> GitHub package</h3><p>The github package brings Git and GitHub integration right inside Atom.</p><ul><li><a href="#initialize-repositories">Initialize</a></li><li><a href="#clone-repositories">Clone</a></li><li><a href="#branch">Branch</a></li><li><a href="#stage">Stage</a></li><li><a href="#discard-changes">Discard</a></li><li><a href="#commit">Commit</a></li><li><a href="#amend-and-undo">Amend and undo</a></li><li><a href="#publish-and-push">Publish and push</a></li><li><a href="#fetch-and-pull">Fetch and pull</a></li><li><a href="#resolve-conflicts">Resolve conflicts</a></li><li><a href="#create-a-pull-request">Create a Pull Request</a></li><li><a href="#view-pull-requests">View Pull Requests</a></li><li><a href="#checkout-a-pull-request">Checkout a Pull Request</a></li><li><a href="#open-any-issue-or-pull-request">Open any Issue or Pull Request</a></li><li><a href="#view-pull-request-review-comments">View Pull Request review comments</a></li><li><a href="#navigate-pull-request-review-comments">Navigate Pull Request review comments</a></li><li><a href="#respond-to-a-pull-request-review-comment">Respond to a Pull Request review comment</a></li></ul><p>Most of the functionality lives within the Git and GitHub dock items.</p><p><img src="'+O+'" alt="The Git and GitHub panels" title="The Git and GitHub panels"></p><p>There are different ways to access them, probably the most common way is through their keybindings:</p><ul><li>Open the <strong>Git</strong> panel: <kbd class=".platform-all">Ctrl+9</kbd></li><li>Open the <strong>GitHub</strong> panel: <kbd class=".platform-all">Ctrl+8</kbd></li></ul><p>Another way is from the menu: <code>Packages -&gt; GitHub -&gt; Toggle Git Tab and Toggle GitHub Tab</code></p><p>Or you can also toggle the Git panel from the Status Bar by clicking on the changed files icon:</p><p><img src="'+M+'" alt="Open Git panel" title="Open Git panel"></p><hr><h4 id="initialize-repositories" tabindex="-1"><a class="header-anchor" href="#initialize-repositories" aria-hidden="true">#</a> Initialize repositories</h4><p>In case a project doesn&#39;t have a Git repository yet, you can create one from the Git panel.</p><p><img src="'+j+'" alt="Initialize repositories" title="Initialize repositories"></p><h4 id="clone-repositories" tabindex="-1"><a class="header-anchor" href="#clone-repositories" aria-hidden="true">#</a> Clone repositories</h4><p>To clone a repository, open the GitHub panel while you have no project folders open in Atom and click &quot;Clone an existing GitHub repository&quot;. In the dialog, paste the URL of a repository and click &quot;Clone&quot;. The new project will be added to the Tree View.</p><p><img src="'+z+'" alt="GitHub panel" title="GitHub panel without projects"></p><p><img src="'+E+'" alt="Clone dialog" title="Clone repositories"></p><p>Alternately, run the <code>GitHub: Clone</code> command to open the Clone dialog any time.</p><h4 id="branch" tabindex="-1"><a class="header-anchor" href="#branch" aria-hidden="true">#</a> Branch</h4><p>To open the branch tooltip, click the branch icon in the Status Bar. From there you can <strong>create</strong> or <strong>switch</strong> branches.</p><p><img src="'+D+'" alt="Create or switch branches" title="Create or switch branches"></p><h4 id="stage" tabindex="-1"><a class="header-anchor" href="#stage" aria-hidden="true">#</a> Stage</h4><p>After making some changes, <strong>stage</strong> anything you want to be part of the next commit. Choose between staging...</p><ul><li><strong>All changes</strong>: Click the &quot;Stage All&quot; button in the &quot;Unstaged Changes&quot; bar.</li><li><strong>Files</strong>: Double-click a file or select a file and press <kbd class=".platform-all">Enter</kbd>.</li><li><strong>Hunk</strong>: Click on the &quot;Stage Hunk&quot; button or select a hunk and press <kbd class=".platform-all">Enter</kbd>.</li><li><strong>Lines</strong>: Click on a line (or drag on multiple lines) to select, then click on the &quot;Stage Selection&quot; button. Or use the <kbd class="platform-mac">Cmd-/</kbd><kbd class="platform-windows platform-linux">Cmd-/</kbd> key to toggle from hunk mode to line mode, then press <kbd class="platform-mac">Cmd-Enter</kbd><kbd class="platform-windows platform-linux">Ctrl-Enter</kbd> to stage just a single line.</li></ul><p>Use the <kbd class="platform-mac">Cmd-Left</kbd><kbd class="platform-windows platform-linux">Ctrl-Left</kbd> or <kbd class="platform-mac">Cmd-Right</kbd><kbd class="platform-windows platform-linux">Ctrl-Right</kbd> arrow key to switch between file list and the diff view. Unstaging can be done in the same way.</p><p><img src="'+Y+'" alt="Stage changes" title="Stage changes"></p><h4 id="discard-changes" tabindex="-1"><a class="header-anchor" href="#discard-changes" aria-hidden="true">#</a> Discard changes</h4><p>If you no longer want to keep some changes, you can discard them. It&#39;s similar to staging, but accessible behind a context menu.</p><ul><li><strong>All changes</strong>: Click the <kbd>...</kbd> menu in the &quot;Unstaged Changes&quot; header and choose &quot;Discard All Changes&quot;.</li><li><strong>Files</strong>: Right-click a file (or multiple) and choose &quot;Discard Changes&quot;.</li><li><strong>Hunk</strong>: Click on the trash icon in the top bar of a hunk.</li><li><strong>Lines</strong>: Right-click on a line (or multiple) and choose &quot;Discard Selection&quot;.</li></ul><p><img src="'+$+'" alt="Discard changes" title="Discard changes"></p><h4 id="commit-preview" tabindex="-1"><a class="header-anchor" href="#commit-preview" aria-hidden="true">#</a> Commit Preview</h4><p>To double check <strong>all changes</strong> that are going into your next commit, click the &quot;<strong>See All Staged Changes</strong>&quot; button above the commit message box. It lets you see all of your staged changes in a single pane. This &quot;commit preview&quot; can also serve as an inspiration for writing the commit message.</p><p><img src="'+W+'" alt="Commit Preview" title="Commit Preview"></p><h4 id="commit" tabindex="-1"><a class="header-anchor" href="#commit" aria-hidden="true">#</a> Commit</h4><p>Once you&#39;ve staged your changes, enter a commit <strong>message</strong>. Feel free to describe the commit in more detail after leaving an empty line. Finalize by clicking the <strong>Commit</strong> button. If you need more space, click the expand icon at the bottom right. It will open a commit editor in the center.</p><p><img src="'+U+'" alt="Commit changes" title="Commit changes"></p><p>To add multiple <strong>co-authors</strong> to a commit, click the &quot;\u{1F464}\u2795&quot; icon in the bottom left corner of the commit message editor. Now you can search by name, email or GitHub username to give credit to a co-author.</p><p><img src="'+B+'" alt="Commit with co-authors" title="Commit with co-authors"></p><h4 id="amend-and-undo" tabindex="-1"><a class="header-anchor" href="#amend-and-undo" aria-hidden="true">#</a> Amend and undo</h4><p>In case you forgot to commit a change and would like to add it to your previous commit, right-click on the last commit, then choose &quot;Amend&quot; from the context menu.</p><p><img src="'+N+'" alt="Amend previous commit" title="Amend previous commit"></p><p>If you want to edit the commit message of your last commit, or add/remove changes, click on the &quot;Undo&quot; button. It will roll back to the state just before you clicked on the commit button.</p><p><img src="'+V+'" alt="Undo previous commit" title="Undo previous commit"></p><h4 id="view-commits" tabindex="-1"><a class="header-anchor" href="#view-commits" aria-hidden="true">#</a> View commits</h4><p>Once you&#39;ve made some commits, click on a commit message in the recent commit list to see the full diff and commit message associated with each:</p><p><img src="'+J+'" alt="View commit detai" title="View commit detai"></p><h4 id="publish-and-push" tabindex="-1"><a class="header-anchor" href="#publish-and-push" aria-hidden="true">#</a> Publish and push</h4><p>When you&#39;re ready to share your changes with your team members, click the <strong>Publish</strong> button in the Status Bar. It will push your local branch to the remote repository. After making more commits, you can <strong>Push</strong> them as well from the Status Bar.</p><p><img src="'+K+'" alt="Publish and push commits" title="Publish and push commits"></p><h4 id="fetch-and-pull" tabindex="-1"><a class="header-anchor" href="#fetch-and-pull" aria-hidden="true">#</a> Fetch and pull</h4><p>From time to time it&#39;s a good idea to click on the <strong>Fetch</strong> button to see if any other team member pushed changes. If so, click on <strong>Pull</strong> to merge the changes into your local branch.</p><p><img src="'+Z+`" alt="Fetch and pull commits" title="Fetch and pull commits"></p><p>If you prefer to <strong>rebase</strong> when pulling, you can configure Git to make it the default behavior:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git config --global --bool pull.rebase true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,62),Ua={href:"https://mislav.net/2013/02/merge-vs-rebase/",target:"_blank",rel:"noopener noreferrer"},Ba=n('<h4 id="resolve-conflicts" tabindex="-1"><a class="header-anchor" href="#resolve-conflicts" aria-hidden="true">#</a> Resolve conflicts</h4><p>Sometimes there can be conflicts when trying to merge. Files that have merge conflicts will show up in the &quot;Merge Conflicts&quot; list. Click on a file to open the editor. There you can <strong>resolve</strong> the conflict by picking a version or make further edits. Once done, stage the file and commit.</p><p><img src="'+Q+'" alt="Resolve conflicts" title="Resolve conflicts"></p><h4 id="create-a-pull-request" tabindex="-1"><a class="header-anchor" href="#create-a-pull-request" aria-hidden="true">#</a> Create a Pull Request</h4><p>When your changes are ready to be reviewed by your team members, open the &quot;GitHub&quot; panel <kbd>Ctrl+8</kbd> and click on <strong>Open new pull request</strong>. It will open the browser where you can continue creating a pull request. If commits haven&#39;t been pushed or the branch isn&#39;t published yet, the GitHub package will do that automatically for you.</p><p><img src="'+X+'" alt="Create a Pull Request" title="Create a Pull Request"></p><h4 id="view-pull-requests" tabindex="-1"><a class="header-anchor" href="#view-pull-requests" aria-hidden="true">#</a> View Pull Requests</h4><p>Once the pull request is created, it will appear under <strong>Current pull request</strong> at the top of the panel. Underneath is a list of <strong>Open pull requests</strong>. It lets you quickly find a pull request by avatar, title or PR number. It also lets you keep an eye on the CI status. Clicking on a pull request in the list opens a center pane with more details, the timeline and conversations.</p><p><img src="'+ee+'" alt="View Pull Requests" title="View Pull Requests"></p><h4 id="open-any-issue-or-pull-request" tabindex="-1"><a class="header-anchor" href="#open-any-issue-or-pull-request" aria-hidden="true">#</a> Open any Issue or Pull Request</h4><p>You can open issues or pull requests from any repo on GitHub. To do so, run the <code>GitHub: Open Issue Or Pull Request</code> command and paste the URL from an issue or pull request. Then press the <strong>Open Issue or Pull Request</strong> button and it will open a center pane. This lets you keep an issue or pull request as a reference, when working in another repo.</p><p><img src="'+te+'" alt="Open Issue or Pull Request" title="Open Issue or Pull Request"></p><h4 id="checkout-a-pull-request" tabindex="-1"><a class="header-anchor" href="#checkout-a-pull-request" aria-hidden="true">#</a> Checkout a Pull Request</h4><p>To test a pull request locally, open it in the workspace center by clicking on the pull request in the &quot;open pull requests&quot; list from the GitHub tab, then click on the <strong>Checkout</strong> button. It will automatically create a local branch and pull all the changes. If you would like to contribute to that pull request, start making changes, commit and push. Your contribution is now part of that pull request.</p><p><img src="'+ae+'" alt="Checkout a pull request" title="Checkout a pull request"></p><h4 id="view-pull-request-review-comments" tabindex="-1"><a class="header-anchor" href="#view-pull-request-review-comments" aria-hidden="true">#</a> View Pull Request review comments</h4><p>To view review comments on a Pull Request, open the Reviews Tab from the <strong>See Reviews</strong> button from the footer of a Pull Request Pane. Alternatively, if the pull request has already been checked out, Reviews Tab can also be open from the same button on GitHub Tab.</p><p><img src="'+oe+'" alt="Open review tab from footer" title="Open review tab from footer"></p><h4 id="navigate-pull-request-review-comments" tabindex="-1"><a class="header-anchor" href="#navigate-pull-request-review-comments" aria-hidden="true">#</a> Navigate Pull Request review comments</h4><p>You can see all the review summaries and comments of a pull request in the Reviews Tab. The comment section has a progress bar to help you keep track of how close are you to finish addressing the Pull Request comments (i.e. marking all comment threads on a Pull Request as &quot;resolved&quot;). Comment threads are greyed out after they have been resolved.</p><p><img src="'+ne+'" alt="Review tab" title="Review tab"></p><p>After the pull request branch has been checked out, you can click <strong>Jump To File</strong> to open the commented on file and make changes as per the review comment right in the editor. If you would like to get the full context of the review comment, click <strong>Open Diff</strong> to open the diff view with line highlighting.</p><p><img src="'+se+'" alt="Jump to file from review tab" title="Jump to file from review tab"></p><p>Conversely, in-editor comments are indicated by the comment icon in the gutter. Clicking the icon, either from within the editor or the diff view, will take you back to the Reviews Tab.</p><p><img src="'+ie+'" alt="Open review tab from diff" title="Open review tab from diff"></p><h4 id="respond-to-a-pull-request-review-comment" tabindex="-1"><a class="header-anchor" href="#respond-to-a-pull-request-review-comment" aria-hidden="true">#</a> Respond to a Pull Request review comment</h4><p>To respond to a Pull Request review comment, type your message and click <strong>Comment</strong>; a single line comment will be created in the same thread as the comment you responded to. After addressing a Pull Request review comment, click <strong>Resolve conversation</strong> to mark the whole thread as &quot;resolved&quot;. The progress bar in the &quot;Comments&quot; section will update accordingly.</p><p><img src="'+le+'" alt="Respond to a Pull Request review comment" title="Respond to a Pull Request review comment"></p><h3 id="writing-in-atom" tabindex="-1"><a class="header-anchor" href="#writing-in-atom" aria-hidden="true">#</a> Writing in Atom</h3>',29),Na={href:"https://help.github.com/articles/about-writing-and-formatting-on-github/",target:"_blank",rel:"noopener noreferrer"},Va=n('<p>In these docs, we&#39;ll concentrate on writing in Markdown; however, other prose markup languages like Asciidoc have packages that provide similar functionality.</p><h4 id="spell-checking" tabindex="-1"><a class="header-anchor" href="#spell-checking" aria-hidden="true">#</a> Spell Checking</h4><p>If you&#39;re working in text (which includes plain text files, GitHub markdown, and Git commit messages by default), Atom will automatically try to check your spelling.</p><p>Any misspelled words will be highlighted (by default with a dashed red line beneath the word), and you can pull up a menu of possible corrections by hitting <kbd class="platform-mac">Cmd+Shift+;</kbd><kbd class="platform-windows platform-linux">Ctrl+Shift+;</kbd> (or by choosing &quot;Correct Spelling&quot; from the right-click context menu or from the Command Palette).</p><p><img src="'+re+'" alt="Checking your spelling"></p><p>To add more types of files to the list of what Atom will try to spell check, go to the Spell Check package settings in your Settings view and add any grammars you want to spell check.</p><p>The default grammars to spell check are <code>text.plain</code>, <code>source.gfm</code>, <code>text.git-commit</code>, <code>source.asciidoc</code>, <code>source.rst</code>, and <code>text.restructuredtext</code> but you can add other grammars if you wish to check those types of files too.</p>',7),Ja={href:"https://github.com/atom/spell-check",target:"_blank",rel:"noopener noreferrer"},Ka=n('<h4 id="previews" tabindex="-1"><a class="header-anchor" href="#previews" aria-hidden="true">#</a> Previews</h4><p>When writing prose in a markup language, it&#39;s often very useful to get an idea of what the content will look like when it&#39;s rendered. Atom ships with a package for previewing Markdown by default.</p><ul><li><kbd class="platform-mac platform-windows platform-linux">Ctrl+Shift+M</kbd> - Will toggle Preview mode for Markdown.</li></ul><p><img src="'+ce+'" alt="Preview your prose"></p><p>As you edit the text, the preview will also update automatically. This makes it fairly easy to check your syntax as you type.</p><p>You can also copy the rendered HTML from the preview pane into your system clipboard when the preview is focused and you press <kbd class="platform-mac">Cmd+C</kbd><kbd class="platform-windows">Ctrl+C</kbd><kbd class="platform-linux">Ctrl+Ins</kbd> or if you right-click in the preview pane and choose &quot;Copy as HTML&quot;.</p>',6),Za={href:"https://github.com/atom/markdown-preview",target:"_blank",rel:"noopener noreferrer"},Qa=n(`<h4 id="snippets-1" tabindex="-1"><a class="header-anchor" href="#snippets-1" aria-hidden="true">#</a> Snippets</h4><p>There are also a number of great snippets available for writing Markdown quickly.</p><p>If you type <code>img</code> and hit <code>tab</code> you get a Markdown-formatted image embed code like <code>![]()</code>. If you type <code>table</code> and hit <code>tab</code> you get a nice example table to fill out.</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code><span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important"> Header One </span><span class="token punctuation">|</span><span class="token table-header important"> Header Two </span><span class="token punctuation">|</span>
</span><span class="token table-line"><span class="token punctuation">|</span> <span class="token punctuation">:---------</span> <span class="token punctuation">|</span> <span class="token punctuation">:---------</span> <span class="token punctuation">|</span>
</span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data"> Item One   </span><span class="token punctuation">|</span><span class="token table-data"> Item Two   </span><span class="token punctuation">|</span>
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Although there are only a handful of Markdown snippets (<code>b</code> for bold, <code>i</code> for italic, <code>code</code> for a code block, etc), they save you from having to look up the more obscure syntaxes. Again, you can easily see a list of all available snippets for the type of file you&#39;re currently in by choosing &quot;Snippets: Available&quot; in the Command Palette.</p><h3 id="basic-customization" tabindex="-1"><a class="header-anchor" href="#basic-customization" aria-hidden="true">#</a> Basic Customization</h3><p>Now that we are feeling comfortable with just about everything built into Atom, let&#39;s look at how to tweak it. Perhaps there is a keybinding that you use a lot but feels wrong or a color that isn&#39;t quite right for you. Atom is amazingly flexible, so let&#39;s go over some of the simpler flexes it can do.</p><h4 id="configuring-with-cson" tabindex="-1"><a class="header-anchor" href="#configuring-with-cson" aria-hidden="true">#</a> Configuring with CSON</h4>`,8),Xa=e("a",{href:"#style-tweaks"},"style sheet",-1),eo=e("a",{href:"/hacking-atom/sections/the-init-file"},"Init Script",-1),to={href:"https://github.com/bevry/cson#what-is-cson",target:"_blank",rel:"noopener noreferrer"},ao={href:"https://json.org/",target:"_blank",rel:"noopener noreferrer"},oo=n(`<div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token property">key</span><span class="token operator">:</span>
  <span class="token property">key</span><span class="token operator">:</span> value
  <span class="token property">key</span><span class="token operator">:</span> value
  <span class="token property">key</span><span class="token operator">:</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> value<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Objects are the backbone of any CSON file, and are delineated by indentation (as in the above example). A key&#39;s value can either be a String, a Number, an Object, a Boolean, <code>null</code>, or an Array of any of these data types.</p><div class="custom-container warning"><p class="custom-container-title">Warning</p><p>Just like the more common JSON, CSON&#39;s keys can only be repeated once per object. If there are duplicate keys, then the last usage of that key overwrites all others, as if they weren&#39;t there. The same holds true for Atom&#39;s config files.</p><p><strong>Don&#39;t do this:</strong></p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># Only the second snippet will be loaded</span>
<span class="token string-property property">&#39;.source.js&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;console.log&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;prefix&#39;</span><span class="token operator">:</span> <span class="token string">&#39;log&#39;</span>
    <span class="token string-property property">&#39;body&#39;</span><span class="token operator">:</span> <span class="token string">&#39;console.log(\${1:&quot;crash&quot;});$2&#39;</span>
<span class="token string-property property">&#39;.source.js&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;console.error&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;prefix&#39;</span><span class="token operator">:</span> <span class="token string">&#39;error&#39;</span>
    <span class="token string-property property">&#39;body&#39;</span><span class="token operator">:</span> <span class="token string">&#39;console.error(\${1:&quot;crash&quot;});$2&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Use this instead:</strong></p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token comment"># Both snippets will be loaded</span>
<span class="token string-property property">&#39;.source.js&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;console.log&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;prefix&#39;</span><span class="token operator">:</span> <span class="token string">&#39;log&#39;</span>
    <span class="token string-property property">&#39;body&#39;</span><span class="token operator">:</span> <span class="token string">&#39;console.log(\${1:&quot;crash&quot;});$2&#39;</span>
  <span class="token string-property property">&#39;console.error&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;prefix&#39;</span><span class="token operator">:</span> <span class="token string">&#39;error&#39;</span>
    <span class="token string-property property">&#39;body&#39;</span><span class="token operator">:</span> <span class="token string">&#39;console.error(\${1:&quot;crash&quot;});$2&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h4 id="style-tweaks" tabindex="-1"><a class="header-anchor" href="#style-tweaks" aria-hidden="true">#</a> Style Tweaks</h4><p>If you want to apply quick-and-dirty personal styling changes without creating an entire theme that you intend to publish, you can add styles to the <code>styles.less</code> file in your <span class="platform-mac platform-linux"><code>~/.atom</code></span><span class="platform-windows"><code>%USERPROFILE%\\.atom</code></span> directory. You can open this file in an editor from the <span class="platform-mac"><em>Atom &gt; Stylesheet</em></span><span class="platform-windows"><em>File &gt; Stylesheet</em></span><span class="platform-linux"><em>Edit &gt; Stylesheet</em></span> menu.</p>`,5),no=e("p",null,[e("img",{src:de,alt:"Stylesheet",title:"Stylesheet..."})],-1),so=n(`<p>For example, to change the colors of the Status Bar, you could add the following rule to your <code>styles.less</code> file:</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">.status-bar</span> <span class="token punctuation">{</span>
	<span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
	<span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The easiest way to see what classes are available to style is to inspect the DOM manually via the Developer Tools. We&#39;ll go over the Developer Tools in great detail in the next chapter, but for now let&#39;s take a simple look. You can open the Developer Tools by pressing <kbd class="platform-mac">Alt+Cmd+I</kbd><kbd class="platform-windows platform-linux">Ctrl+Shift+I</kbd>, which will bring up the Chromium Developer Tools panel.</p><p><img src="`+pe+'" alt="Developer Tools" title="Developer Tools"></p><p>With the Developer Tools, you can inspect all the elements in Atom. If you want to update the style of something, you can figure out what classes it has and add a Less rule to your stylesheet to modify it.</p>',5),io={class:"custom-container tip"},lo=e("p",{class:"custom-container-title"},"Tip",-1),ro={href:"http://www.lesscss.org",target:"_blank",rel:"noopener noreferrer"},co=e("p",null,[t("If you prefer to use CSS instead, you can do that in the same "),e("code",null,"styles.less"),t(" file, since CSS is also valid in Less.")],-1),po=n(`<h4 id="customizing-keybindings" tabindex="-1"><a class="header-anchor" href="#customizing-keybindings" aria-hidden="true">#</a> Customizing Keybindings</h4><p>Atom keymaps work similarly to stylesheets. Just as stylesheets use selectors to apply styles to elements, Atom keymaps use selectors to associate key combinations with events in specific contexts. Here&#39;s a small example, excerpted from Atom&#39;s built-in keymap:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;atom-text-editor&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;enter&#39;</span><span class="token operator">:</span> <span class="token string">&#39;editor:newline&#39;</span>

<span class="token string-property property">&#39;atom-text-editor[mini] input&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;enter&#39;</span><span class="token operator">:</span> <span class="token string">&#39;core:confirm&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This keymap defines the meaning of <kbd class="platform-all">Enter</kbd> in two different contexts. In a normal editor, pressing <kbd class="platform-all">Enter</kbd> triggers the <code>editor:newline</code> command, which causes the editor to insert a newline. But if the same keystroke occurs inside a select list&#39;s mini-editor, it instead triggers the <code>core:confirm</code> command based on the binding in the more-specific selector.</p><p>By default, <code>keymap.cson</code> is loaded when Atom is started. It will always be loaded last, giving you the chance to override bindings that are defined by Atom&#39;s core keymaps or third-party packages. You can open this file in an editor from the <span class="platform-mac"><em>Atom &gt; Keymap</em></span><span class="platform-windows"><em>File &gt; Keymap</em></span><span class="platform-linux"><em>Edit &gt; Keymap</em></span> menu.</p><p>You can see all the keybindings that are currently configured in your installation of Atom in the Keybindings tab in the Settings View.</p><p>If you run into problems with keybindings, the Keybinding Resolver is a huge help. It can be opened with the <kbd class="platform-mac">Cmd+.</kbd><kbd class="platform-windows platform-linux">Ctrl+.</kbd> key combination. It will show you what keys Atom saw you press and what command Atom executed because of that combination.</p><h4 id="global-configuration-settings" tabindex="-1"><a class="header-anchor" href="#global-configuration-settings" aria-hidden="true">#</a> Global Configuration Settings</h4><p>Atom loads configuration settings from the <code>config.cson</code> file in your <span class="platform-mac platform-linux"><code>~/.atom</code></span><span class="platform-windows"><code>%USERPROFILE%\\.atom</code></span> directory.</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;*&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;core&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;excludeVcsIgnoredPaths&#39;</span><span class="token operator">:</span> <span class="token keyword">true</span>
  <span class="token string-property property">&#39;editor&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;fontSize&#39;</span><span class="token operator">:</span> <span class="token number">18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The configuration is grouped into global settings under the <code>*</code> key and language-specific settings under scope named keys like <code>.python.source</code> or <code>.html.text</code>. Underneath that, you&#39;ll find configuration settings grouped by package name or one of the two core namespaces: <code>core</code> or <code>editor</code>.</p><p>You can open this file in an editor from the <span class="platform-mac"><em>Atom &gt; Config</em></span><span class="platform-windows"><em>File &gt; Config</em></span><span class="platform-linux"><em>Edit &gt; Config</em></span> menu.</p><h5 id="configuration-key-reference" tabindex="-1"><a class="header-anchor" href="#configuration-key-reference" aria-hidden="true">#</a> Configuration Key Reference</h5><ul><li><code>core</code><ul><li><code>customFileTypes</code>: Associations of language scope to file extensions (see <a href="#customizing-language-recognition">Customizing Language Recognition</a>)</li><li><code>disabledPackages</code>: An array of package names to disable</li><li><code>excludeVcsIgnoredPaths</code>: Don&#39;t search within files specified by <code>.gitignore</code></li><li><code>ignoredNames</code>: File names to ignore across all of Atom</li><li><code>projectHome</code>: The directory where projects are assumed to be located</li><li><code>themes</code>: An array of theme names to load, in cascading order</li></ul></li><li><code>editor</code><ul><li><code>autoIndent</code>: Enable/disable basic auto-indent (defaults to <code>true</code>)</li><li><code>nonWordCharacters</code>: A string of non-word characters to define word boundaries</li><li><code>fontSize</code>: The editor font size</li><li><code>fontFamily</code>: The editor font family</li><li><code>invisibles</code>: A hash of characters Atom will use to render whitespace characters. Keys are whitespace character types, values are rendered characters (use value <code>false</code> to turn off individual whitespace character types) <ul><li><code>tab</code>: Hard tab characters</li><li><code>cr</code>: Carriage return (for Microsoft-style line endings)</li><li><code>eol</code>: <code>\\n</code> characters</li><li><code>space</code>: Leading and trailing space characters</li></ul></li><li><code>lineHeight</code>: Height of editor lines, as a multiplier of font size</li><li><code>preferredLineLength</code>: Identifies the length of a line (defaults to <code>80</code>)</li><li><code>showInvisibles</code>: Whether to render placeholders for invisible characters (defaults to <code>false</code>)</li><li><code>showIndentGuide</code>: Show/hide indent indicators within the editor</li><li><code>showLineNumbers</code>: Show/hide line numbers within the gutter</li><li><code>softWrap</code>: Enable/disable soft wrapping of text within the editor</li><li><code>softWrapAtPreferredLineLength</code>: Enable/disable soft line wrapping at <code>preferredLineLength</code></li><li><code>tabLength</code>: Number of spaces within a tab (defaults to <code>2</code>)</li></ul></li><li><code>fuzzyFinder</code><ul><li><code>ignoredNames</code>: Files to ignore <em>only</em> in the fuzzy-finder</li></ul></li><li><code>whitespace</code><ul><li><code>ensureSingleTrailingNewline</code>: Whether to reduce multiple newlines to one at the end of files</li><li><code>removeTrailingWhitespace</code>: Enable/disable stripping of whitespace at the end of lines (defaults to <code>true</code>)</li></ul></li><li><code>wrap-guide</code><ul><li><code>columns</code>: Array of hashes with a <code>pattern</code> and <code>column</code> key to match the path of the current editor to a column position.</li></ul></li></ul><h4 id="language-specific-configuration-settings" tabindex="-1"><a class="header-anchor" href="#language-specific-configuration-settings" aria-hidden="true">#</a> Language Specific Configuration Settings</h4><p>You can also set several configuration settings differently for different file types. For example, you may want Atom to soft wrap markdown files, have two-space tabs for ruby files, and four-space tabs for python files.</p><p>There are several settings now scoped to an editor&#39;s language. Here is the current list:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>editor.autoIndent
editor.autoIndentOnPaste
editor.invisibles
editor.nonWordCharacters
editor.preferredLineLength
editor.scrollPastEnd
editor.showIndentGuide
editor.showInvisibles
editor.softWrap
editor.softWrapAtPreferredLineLength
editor.softWrapHangingIndent
editor.tabLength
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="language-specific-settings-in-the-settings-view" tabindex="-1"><a class="header-anchor" href="#language-specific-settings-in-the-settings-view" aria-hidden="true">#</a> Language-specific Settings in the Settings View</h5><p>You can edit these config settings in the Settings View on a per-language basis. Click on &quot;Packages&quot; tab in the navigation bar on the left, search for the language of your choice, select it, and edit away!</p><p><img src="`+he+`" alt="Python-specific settings" title="Python-specific settings"></p><h5 id="language-specific-settings-in-your-config-file" tabindex="-1"><a class="header-anchor" href="#language-specific-settings-in-your-config-file" aria-hidden="true">#</a> Language-specific Settings in your Config File</h5><p>You can also edit the <code>config.cson</code> directly. To open your configuration file via the Command Palette, press <kbd class="platform-mac">Cmd+Shift+P</kbd><kbd class="platform-windows platform-linux">Ctrl+Shift+P</kbd> type <code>open config</code>, and press <kbd class="platform-all">Enter</kbd>.</p><p>Global settings are under the <code>*</code> key, and each language can have its own top-level key. This key is the language&#39;s scope. Language-specific settings take precedence over anything set in the global section for that language only.</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;*&#39;</span><span class="token operator">:</span> <span class="token comment"># all languages unless overridden</span>
  <span class="token string-property property">&#39;editor&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;softWrap&#39;</span><span class="token operator">:</span> <span class="token keyword">false</span>
    <span class="token string-property property">&#39;tabLength&#39;</span><span class="token operator">:</span> <span class="token number">8</span>

<span class="token string-property property">&#39;.source.gfm&#39;</span><span class="token operator">:</span> <span class="token comment"># markdown overrides</span>
  <span class="token string-property property">&#39;editor&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;softWrap&#39;</span><span class="token operator">:</span> <span class="token keyword">true</span>

<span class="token string-property property">&#39;.source.ruby&#39;</span><span class="token operator">:</span> <span class="token comment"># ruby overrides</span>
  <span class="token string-property property">&#39;editor&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;tabLength&#39;</span><span class="token operator">:</span> <span class="token number">2</span>

<span class="token string-property property">&#39;.source.python&#39;</span><span class="token operator">:</span> <span class="token comment"># python overrides</span>
  <span class="token string-property property">&#39;editor&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;tabLength&#39;</span><span class="token operator">:</span> <span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="finding-a-language-s-scope-name" tabindex="-1"><a class="header-anchor" href="#finding-a-language-s-scope-name" aria-hidden="true">#</a> Finding a Language&#39;s Scope Name</h5><p>In order to write these overrides effectively, you&#39;ll need to know the scope name for the language. We&#39;ve already done this for finding a scope for writing a snippet in <a href="/using-atom/sections/snippets#snippet-format">Snippet Format</a>, but we can quickly cover it again.</p><p>The scope name is shown in the settings view for each language. Click on &quot;Packages&quot; in the navigation on the left, search for the language of your choice, select it, and you should see the scope name under the language name heading:</p><p><img src="`+ue+'" alt="Finding a language grammar" title="Finding a grammar&#39;s scope name"></p><p>Another way to find the scope for a specific language is to open a file of its kind and <span class="platform-mac">press <kbd class="platform-mac">Alt+Cmd+P</kbd></span><span class="platform-windows platform-linux">choose &quot;Editor: Log Cursor Scope&quot; in the Command Palette</span> to show all scopes for the current position of the cursor. The scope mentioned top most is always the language for this kind of file, the scopes following are specific to the cursor position:</p><p><img src="'+me+`" alt="Finding a language grammar with cursor scope" title="Finding a language grammar with cursor scope"></p><p>These scopes can be especially useful to style the editor, since they can also be used as class names in your stylesheet.</p><h4 id="customizing-language-recognition" tabindex="-1"><a class="header-anchor" href="#customizing-language-recognition" aria-hidden="true">#</a> Customizing Language Recognition</h4><p>If you want Atom to always recognize certain file types as a specific grammar, you&#39;ll need to manually edit your <code>config.cson</code> file. You can open it using the <em>Application: Open Your Config</em> command from the Command Palette. For example, if you wanted to add the <code>foo</code> extension to the CoffeeScript language, you could add this to your configuration file under the <code>*.core</code> section:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;*&#39;</span><span class="token operator">:</span>
  <span class="token property">core</span><span class="token operator">:</span>
    <span class="token property">customFileTypes</span><span class="token operator">:</span>
      <span class="token string-property property">&#39;source.coffee&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;foo&#39;</span>
      <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the example above, <code>source.coffee</code> is the language&#39;s scope name (see <a href="#finding-a-languages-scope-name">Finding a Language&#39;s Scope Name</a> for more information) and <code>foo</code> is the file extension to match without the period. Adding a period to the beginning of either of these will not work.</p><h4 id="controlling-where-customization-is-stored-to-simplify-your-workflow" tabindex="-1"><a class="header-anchor" href="#controlling-where-customization-is-stored-to-simplify-your-workflow" aria-hidden="true">#</a> Controlling Where Customization is Stored to Simplify Your Workflow</h4><p>The CSON configuration files for Atom are stored on disk on your machine. The location for this storage is customizable. The default is to use the home directory of the user executing the application. The Atom Home directory will, by default, be called <code>.atom</code> and will be located in the root of the home directory of the user.</p><h5 id="custom-home-location-with-an-environment-variable" tabindex="-1"><a class="header-anchor" href="#custom-home-location-with-an-environment-variable" aria-hidden="true">#</a> Custom home location with an environment variable</h5><p>An environment variable can be used to make Atom use a different location. This can be useful for several reasons. One of these may be that multiple user accounts on a machine want to use the same Atom Home. The environment variable used to specify an alternate location is called <code>ATOM_HOME</code>. If this environment variable exists, the location specified will be used to load and store Atom settings.</p><h5 id="taking-your-customization-with-you-with-portable-mode" tabindex="-1"><a class="header-anchor" href="#taking-your-customization-with-you-with-portable-mode" aria-hidden="true">#</a> Taking your customization with you with Portable Mode</h5><p>In addition to using the <code>ATOM_HOME</code> environment variable, Atom can also be set to use &quot;Portable Mode&quot;.</p><p>Portable Mode is most useful for taking Atom with you, with all your custom setting and packages, from machine to machine. This may take the form of keeping Atom on a USB drive or a cloud storage platform that syncs folders to different machines, like Dropbox. Atom is in Portable Mode when there is a directory named .atom sibling to the directory in which the atom executable file lives. For example, the installed Atom directory can be placed into a Dropbox folder next to a .atom folder.</p><p><img src="`+fe+`" alt="Portable mode directory structure"></p><p>With such a setup, Atom will use the same Home directory with the same settings for any machine with this directory syncronized/plugged in.</p><h5 id="moving-to-portable-mode" tabindex="-1"><a class="header-anchor" href="#moving-to-portable-mode" aria-hidden="true">#</a> Moving to Portable Mode</h5><p>Atom provides a command-line parameter option for setting Portable Mode.</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ atom --portable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Executing atom with the <code>--portable</code> option will take the <code>.atom</code> directory you have in the default location (<code>~/.atom</code>) and copy the relevant contents for your configuration to a new home directory in the Portable Mode location. This enables easily moving from the default location to a portable operation without losing the customization you have already set up.</p><h3 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h3><p>At this point you should be something of an Atom master user. You should be able to navigate and manipulate your text and files like a wizard. You should also be able to customize Atom backwards and forwards to make it look and act just how you want it to.</p><p>In the next chapter, we&#39;re going to kick it up a notch: we&#39;ll take a look at changing and adding new functionality to the core of Atom itself. We&#39;re going to start creating packages for Atom. If you can dream it, you can build it.</p>`,52);function ho(uo,mo){const o=p("ExternalLinkIcon"),d=p("RouterLink"),c=p("Tabs");return be(),ke("div",null,[ve,e("p",null,[t("First we'll start with the Atom package system. As we mentioned previously, Atom itself is a very basic core of functionality that ships with a number of useful packages that add new features like the "),e("a",we,[t("Tree View"),a(o)]),t(" and the "),e("a",_e,[t("Settings View"),a(o)]),t(".")]),e("p",null,[t("In fact, there are more than 80 packages that comprise all of the functionality that is available in Atom by default. For example, the "),e("a",xe,[t("Welcome screen"),a(o)]),t(" that you see when you first start Atom, the "),e("a",Ce,[t("spell checker"),a(o)]),t(", the "),e("a",Ae,[t("themes"),a(o)]),t(" and the "),e("a",Se,[t("Fuzzy Finder"),a(o)]),t(" are all packages that are separately maintained and all use the same APIs that you have access to, as we'll see in great detail in "),a(d,{to:"/hacking-atom/"},{default:s(()=>[t("Hacking Atom")]),_:1}),t(".")]),qe,e("p",null,[t('Clicking on "Install" will install the theme and make it available in the Theme dropdowns as we saw in '),a(d,{to:"/getting-started/sections/atom-basics/#changing-the-theme"},{default:s(()=>[t("Changing the Theme")]),_:1}),t(".")]),Te,e("p",null,[t("For example "),Ie,t(" installs the "),Pe,t(" release of the "),e("a",Fe,[t("Emmet"),a(o)]),t(" package.")]),Re,a(c,{id:"124",data:[{title:"Linux"},{title:"Mac"},{title:"Windows"}],"tab-id":"moving-in-atom"},{tab0:s(({title:i,value:l,isActive:r})=>[Le,Ge]),tab1:s(({title:i,value:l,isActive:r})=>[He,Oe]),tab2:s(({title:i,value:l,isActive:r})=>[Me,je]),_:1}),ze,e("p",null,[t("Atom also has a few movement and selection commands that don't have keybindings by default. You can access these commands from the "),a(d,{to:"/getting-started/sections/atom-basics/#command-palette"},{default:s(()=>[t("Command Palette")]),_:1}),t(", but if you find yourself using commands that don't have a keybinding often, have no fear! You can easily add an entry to your "),Ee,t(" to create a key combination. You can open "),De,t(" file in an editor from the "),Ye,$e,We,t(" menu.")]),Ue,a(c,{id:"197",data:[{title:"Linux"},{title:"Mac"},{title:"Windows"}],"tab-id":"moving-in-atom"},{tab0:s(({title:i,value:l,isActive:r})=>[Be]),tab1:s(({title:i,value:l,isActive:r})=>[Ne]),tab2:s(({title:i,value:l,isActive:r})=>[Ve]),_:1}),e("p",null,[t("This will bind the command "),Je,t(" to "),Ke,Ze,t(". For more information on customizing your keybindings, see "),a(d,{to:"/using-atom/sections/basic-customization/#customizing-keybindings"},{default:s(()=>[t("Customizing Keybindings")]),_:1}),t(".")]),Qe,a(c,{id:"214",data:[{title:"Linux"},{title:"Mac"},{title:"Windows"}],"tab-id":"moving-in-atom"},{tab0:s(({title:i,value:l,isActive:r})=>[Xe]),tab1:s(({title:i,value:l,isActive:r})=>[et]),tab2:s(({title:i,value:l,isActive:r})=>[tt]),_:1}),at,e("p",null,[t("You can generate a "),ot,t(" file by using the "),e("a",nt,[t("ctags utility"),a(o)]),t(". Once it is installed, you can use it to generate a "),st,t(" file by running a command to generate it. See the "),e("a",it,[t("ctags documentation"),a(o)]),t(" for details.")]),a(c,{id:"237",data:[{title:"Linux"},{title:"Mac"},{title:"Windows"}],"tab-id":"moving-in-atom"},{tab0:s(({title:i,value:l,isActive:r})=>[lt]),tab1:s(({title:i,value:l,isActive:r})=>[rt]),tab2:s(({title:i,value:l,isActive:r})=>[ct]),_:1}),e("p",null,[t("You can customize how tags are generated by creating your own "),dt,t(" file in your home directory, "),pt,ht,t(". An example can be found "),e("a",ut,[t("here"),a(o)]),t(".")]),e("p",null,[t("The symbols navigation functionality is implemented in the "),e("a",mt,[t("symbols-view"),a(o)]),t(" package.")]),ft,t(' ![View and filter bookmarks](@images/atom/bookmarks.png "View and filter bookmarks") '),e("p",null,[t("The bookmarks functionality is implemented in the "),e("a",gt,[t("bookmarks"),a(o)]),t(" package.")]),bt,a(c,{id:"357",data:[{title:"Mac"}],"tab-id":"atom-selections"},{tab0:s(({title:i,value:l,isActive:r})=>[kt]),_:1}),yt,a(c,{id:"409",data:[{title:"Mac"}],"tab-id":"editing-and-deleting"},{tab0:s(({title:i,value:l,isActive:r})=>[vt]),_:1}),wt,a(c,{id:"446",data:[{title:"Mac"}],"tab-id":"editing-and-deleting"},{tab0:s(({title:i,value:l,isActive:r})=>[_t]),_:1}),xt,a(c,{id:"495",data:[{title:"Mac"}],"tab-id":"editing-and-deleting"},{tab0:s(({title:i,value:l,isActive:r})=>[Ct]),_:1}),At,e("p",null,[t("The whitespace commands are implemented in the "),e("a",St,[t("atom/whitespace"),a(o)]),t(" package. The settings for the whitespace commands are managed on the page for the "),qt,t(" package.")]),Tt,e("p",null,[t("The brackets functionality is implemented in the "),e("a",It,[t("bracket-matcher"),a(o)]),t(" package. Like all of these packages, to change defaults related to bracket handling, or to disable it entirely, you can navigate to this package in the Settings view.")]),Pt,e("p",null,[t("The encoding selector is implemented in the "),e("a",Ft,[t("encoding-selector"),a(o)]),t(" package.")]),Rt,e("div",Lt,[Gt,Ht,e("p",null,[t("When doing a regular expression search, the replacement syntax to refer back to search groups is $1, $2, \u2026 $&. Refer to JavaScript's "),e("a",Ot,[t("guide to regular expressions"),a(o)]),t(" to learn more about regular expression syntax you can use in Atom.")])]),Mt,jt,zt,e("p",null,[t("You can limit a search to a subset of the files in your project by entering a "),e("a",Et,[t("glob pattern"),a(o)]),t(' into the "File/Directory pattern" text box. For example, the pattern '),Dt,t(" would restrict the search to JavaScript files in the "),Yt,t(' directory. The "globstar" pattern ('),$t,t(") can be used to match arbitrarily many subdirectories. For example, "),Wt,t(" will match "),Ut,t(", "),Bt,t(", etc. You can enter multiple glob patterns separated by commas, which is useful for searching in multiple file types or subdirectories.")]),Nt,Vt,e("p",null,[t("The Find and Replace functionality is implemented in the "),e("a",Jt,[t("find-and-replace"),a(o)]),t(" package and uses the "),e("a",Kt,[t("scandal"),a(o)]),t(" Node module to do the actual searching.")]),Zt,e("div",Qt,[Xt,e("p",null,[t("Snippet keys, unlike CSS selectors, can only be repeated once per level. If there are duplicate keys at the same level, then only the last one will be read. See "),a(d,{to:"/using-atom/sections/basic-customization/#configuring-with-cson"},{default:s(()=>[t("Configuring with CSON")]),_:1}),t(" for more information.")])]),ea,e("p",null,[t("You can also use "),e("a",ta,[t("CoffeeScript multi-line syntax"),a(o)]),t(" using "),aa,t(" for larger templates:")]),oa,e("p",null,[t("Again, see "),a(d,{to:"/using-atom/sections/basic-customization/#configuring-with-cson"},{default:s(()=>[t("Configuring with CSON")]),_:1}),t(" for more information on CSON key structure and non-repeatability.")]),na,e("p",null,[t("The snippets functionality is implemented in the "),e("a",sa,[t("snippets"),a(o)]),t(" package.")]),e("p",null,[t("For more examples, see the snippets in the "),e("a",ia,[t("language-html"),a(o)]),t(" and "),e("a",la,[t("language-javascript"),a(o)]),t(" packages.")]),ra,e("p",null,[t("The Autocomplete functionality is implemented in the "),e("a",ca,[t("autocomplete-plus"),a(o)]),t(" package.")]),da,e("div",pa,[ha,e("p",null,[t("If you don't like using tabs, you don't have to. You can disable the "),e("a",ua,[t("tabs package"),a(o)]),t(" and each pane will still support multiple pane items. You just won't have tabs to use to click between them.")])]),ma,e("p",null,[t('The "grammar" of a file is what language Atom has associated with that file. Types of grammars would include "Java" or "GitHub-Flavored Markdown". We looked at this a bit when we created some snippets in '),a(d,{to:"/using-atom/sections/snippets/"},{default:s(()=>[t("Snippets")]),_:1}),t(".")]),fa,ga,ba,ka,e("p",null,[t("The Grammar Selector functionality is implemented in the "),e("a",ya,[t("grammar-selector"),a(o)]),t(" package.")]),va,e("p",null,[t("Version control is an important aspect of any project and Atom comes with basic "),e("a",wa,[t("Git"),a(o)]),t(" and "),e("a",_a,[t("GitHub"),a(o)]),t(" integration built in.")]),xa,e("p",null,[t("Atom ships with the "),e("a",Ca,[t("fuzzy-finder package"),a(o)]),t(" which provides "),Aa,Sa,t(" to quickly open files in the project and "),qa,Ta,t(" to jump to any open editor. The package also provides "),Ia,Pa,t(" which displays a list of all the untracked and modified files in the project. These will be the same files that you would see on the command line if you ran "),Fa,t(".")]),Ra,La,Ga,e("p",null,[t("Atom can be used as your Git commit editor and ships with the "),e("a",Ha,[t("language-git package"),a(o)]),t(" which adds syntax highlighting to edited commit, merge, and rebase messages.")]),Oa,e("p",null,[t("The "),e("a",Ma,[t("language-git"),a(o)]),t(" package will help remind you to be brief by colorizing the first lines of commit messages when they're longer than 50 or 65 characters.")]),ja,e("p",null,[t("The "),e("a",za,[t("status-bar"),a(o)]),t(" package that ships with Atom includes several Git decorations that display on the right side of the status bar:")]),Ea,Da,Ya,e("p",null,[t("The included "),e("a",$a,[t("git-diff"),a(o)]),t(" package colorizes the gutter next to lines that have been added, edited, or removed.")]),Wa,e("p",null,[t("Learn more about "),e("a",Ua,[t("merge vs. rebase"),a(o)]),t(".")]),Ba,e("p",null,[t("Though it is probably most common to use Atom to write software code, Atom can also be used to write prose quite effectively. Most often this is done in some sort of markup language such as Asciidoc or "),e("a",Na,[t("Markdown"),a(o)]),t(" (in which this manual is written). Here we'll quickly cover a few of the tools Atom provides for helping you write prose.")]),Va,e("p",null,[t("The spell checking is implemented in the "),e("a",Ja,[t("spell-check"),a(o)]),t(" package.")]),Ka,e("p",null,[t("Markdown preview is implemented in the "),e("a",Za,[t("markdown-preview"),a(o)]),t(" package.")]),Qa,e("p",null,[t("All of Atom's config files (with the exception of your "),Xa,t(" and your "),eo,t(") are written in CSON, short for "),e("a",to,[t("CoffeeScript Object Notation"),a(o)]),t(". Just like its namesake JSON, "),e("a",ao,[t("JavaScript Object Notation"),a(o)]),t(", CSON is a text format for storing structured data in the form of simple objects made up of key-value pairs.")]),oo,a(c,{id:"1512",data:[{title:"Mac"}],"tab-id":"basic-customization"},{tab0:s(({title:i,value:l,isActive:r})=>[no]),_:1}),so,e("div",io,[lo,e("p",null,[t("If you are unfamiliar with Less, it is a basic CSS preprocessor that makes some things in CSS a bit easier. You can learn more about it at "),e("a",ro,[t("lesscss.org"),a(o)]),t(".")]),co]),po])}const Fo=ge(ye,[["render",ho],["__file","index.html.vue"]]);export{Fo as default};
