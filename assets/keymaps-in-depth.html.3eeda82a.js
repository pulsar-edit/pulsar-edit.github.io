import{_ as d}from"./keybinding.964a4e0d.js";import{_ as u,o as m,c as k,d as a,w as t,a as e,b as n,f as s,r as c}from"./app.87197fef.js";const h={},g=e("h3",{id:"keymaps-in-depth",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#keymaps-in-depth","aria-hidden":"true"},"#"),n(" Keymaps In-Depth")],-1),y=e("h4",{id:"structure-of-a-keymap-file",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#structure-of-a-keymap-file","aria-hidden":"true"},"#"),n(" Structure of a Keymap File")],-1),f=e("p",null,[n("Keymap files are encoded as JSON or CSON files containing nested hashes. They work much like style sheets, but instead of applying style properties to elements matching the selector, they specify the meaning of keystrokes on elements matching the selector. Here is an example of some bindings that apply when keystrokes pass through "),e("code",null,"atom-text-editor"),n(" elements:")],-1),v=e("div",{class:"language-coffee ext-coffee line-numbers-mode"},[e("pre",{class:"language-coffee"},[e("code",null,[e("span",{class:"token string-property property"},"'atom-text-editor'"),e("span",{class:"token operator"},":"),n(`
  `),e("span",{class:"token string-property property"},"'ctrl-left'"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token string"},"'editor:move-to-beginning-of-word'"),n(`
  `),e("span",{class:"token string-property property"},"'ctrl-right'"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token string"},"'editor:move-to-end-of-word'"),n(`
  `),e("span",{class:"token string-property property"},"'ctrl-shift-left'"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token string"},"'editor:select-to-beginning-of-word'"),n(`
  `),e("span",{class:"token string-property property"},"'ctrl-shift-right'"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token string"},"'editor:select-to-end-of-word'"),n(`
  `),e("span",{class:"token string-property property"},"'ctrl-backspace'"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token string"},"'editor:delete-to-beginning-of-word'"),n(`
  `),e("span",{class:"token string-property property"},"'ctrl-delete'"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token string"},"'editor:delete-to-end-of-word'"),n(`

`),e("span",{class:"token string-property property"},"'atom-text-editor:not([mini])'"),e("span",{class:"token operator"},":"),n(`
  `),e("span",{class:"token string-property property"},"'ctrl-alt-['"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token string"},"'editor:fold-current-row'"),n(`
  `),e("span",{class:"token string-property property"},"'ctrl-alt-]'"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token string"},"'editor:unfold-current-row'"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),b=e("div",{class:"language-coffee ext-coffee line-numbers-mode"},[e("pre",{class:"language-coffee"},[e("code",null,[e("span",{class:"token string-property property"},"'atom-text-editor'"),e("span",{class:"token operator"},":"),n(`
  `),e("span",{class:"token string-property property"},"'cmd-delete'"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token string"},"'editor:delete-to-beginning-of-line'"),n(`
  `),e("span",{class:"token string-property property"},"'alt-backspace'"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token string"},"'editor:delete-to-beginning-of-word'"),n(`
  `),e("span",{class:"token string-property property"},"'ctrl-A'"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token string"},"'editor:select-to-first-character-of-line'"),n(`
  `),e("span",{class:"token string-property property"},"'ctrl-shift-e'"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token string"},"'editor:select-to-end-of-line'"),n(`
  `),e("span",{class:"token string-property property"},"'cmd-left'"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token string"},"'editor:move-to-first-character-of-line'"),n(`

`),e("span",{class:"token string-property property"},"'atom-text-editor:not([mini])'"),e("span",{class:"token operator"},":"),n(`
  `),e("span",{class:"token string-property property"},"'cmd-alt-['"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token string"},"'editor:fold-current-row'"),n(`
  `),e("span",{class:"token string-property property"},"'cmd-alt-]'"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token string"},"'editor:unfold-current-row'"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),w=e("div",{class:"language-coffee ext-coffee line-numbers-mode"},[e("pre",{class:"language-coffee"},[e("code",null,[e("span",{class:"token string-property property"},"'atom-text-editor'"),e("span",{class:"token operator"},":"),n(`
  `),e("span",{class:"token string-property property"},"'ctrl-left'"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token string"},"'editor:move-to-beginning-of-word'"),n(`
  `),e("span",{class:"token string-property property"},"'ctrl-right'"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token string"},"'editor:move-to-end-of-word'"),n(`
  `),e("span",{class:"token string-property property"},"'ctrl-shift-left'"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token string"},"'editor:select-to-beginning-of-word'"),n(`
  `),e("span",{class:"token string-property property"},"'ctrl-shift-right'"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token string"},"'editor:select-to-end-of-word'"),n(`
  `),e("span",{class:"token string-property property"},"'ctrl-backspace'"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token string"},"'editor:delete-to-beginning-of-word'"),n(`
  `),e("span",{class:"token string-property property"},"'ctrl-delete'"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token string"},"'editor:delete-to-end-of-word'"),n(`

`),e("span",{class:"token string-property property"},"'atom-text-editor:not([mini])'"),e("span",{class:"token operator"},":"),n(`
  `),e("span",{class:"token string-property property"},"'ctrl-alt-['"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token string"},"'editor:fold-current-row'"),n(`
  `),e("span",{class:"token string-property property"},"'ctrl-alt-]'"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token string"},"'editor:unfold-current-row'"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),x=s(`<p>Beneath the first selector are several keybindings, mapping specific key combinations to commands. When an element with the <code>atom-text-editor</code> class is focused and <kbd class="platform-mac">Alt+Backspace</kbd><kbd class="platform-windows platform-linux">Ctrl+Backspace</kbd> is pressed, a custom DOM event called <code>editor:delete-to-beginning-of-word</code> is emitted on the <code>atom-text-editor</code> element.</p><p>The second selector group also targets editors, but only if they don&#39;t have the <code>mini</code> attribute. In this example, the commands for code folding don&#39;t really make sense on mini-editors, so the selector restricts them to regular editors.</p><h5 id="key-combinations" tabindex="-1"><a class="header-anchor" href="#key-combinations" aria-hidden="true">#</a> Key Combinations</h5><p>Key combinations express one or more keys combined with optional modifier keys. For example: <code>ctrl-w v</code>, or <code>cmd-shift-up</code>. A key combination is composed of the following symbols, separated by a <code>-</code>. A key sequence can be expressed as key combinations separated by spaces.</p><table><thead><tr><th style="text-align:left;">Type</th><th style="text-align:left;">Examples</th></tr></thead><tbody><tr><td style="text-align:left;">Character literals</td><td style="text-align:left;"><code>a</code> <code>4</code> <code>$</code></td></tr><tr><td style="text-align:left;">Modifier keys</td><td style="text-align:left;"><code>cmd</code> <code>ctrl</code> <code>alt</code> <code>shift</code></td></tr><tr><td style="text-align:left;">Special keys</td><td style="text-align:left;"><code>enter</code> <code>escape</code> <code>backspace</code> <code>delete</code> <code>tab</code> <code>home</code> <code>end</code> <code>pageup</code> <code>pagedown</code> <code>left</code> <code>right</code> <code>up</code> <code>down</code> <code>space</code></td></tr></tbody></table><h5 id="commands" tabindex="-1"><a class="header-anchor" href="#commands" aria-hidden="true">#</a> Commands</h5><p>Commands are custom DOM events that are triggered when a key combination or sequence matches a binding. This allows user interface code to listen for named commands without specifying the specific keybinding that triggers it. For example, the following code creates a command to insert the current date in an editor:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>atom<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;atom-text-editor&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token string-property property">&quot;user:insert-date&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> editor<span class="token punctuation">.</span><span class="token function">insertText</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>atom.commands</code> refers to the global <code>CommandRegistry</code> instance where all commands are set and consequently picked up by the command palette.</p><p>When you are looking to bind new keys, it is often useful to use the Command Palette (<kbd class="platform-mac">Cmd+Shift+P</kbd><kbd class="platform-windows platform-linux">Ctrl+Shift+P</kbd>) to discover what commands are being listened for in a given focus context. Commands are &quot;humanized&quot; following a simple algorithm, so a command like <code>editor:fold-current-row</code> would appear as &quot;Editor: Fold Current Row&quot;.</p><h5 id="composed-commands" tabindex="-1"><a class="header-anchor" href="#composed-commands" aria-hidden="true">#</a> &quot;Composed&quot; Commands</h5><p>A common question is, &quot;How do I make a single keybinding execute two or more commands?&quot; There isn&#39;t any direct support for this in Atom, but it can be achieved by creating a custom command that performs the multiple actions you desire and then creating a keybinding for that command. For example, let&#39;s say I want to create a &quot;composed&quot; command that performs a Select Line followed by Cut. You could add the following to your <code>init.coffee</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>atom<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;atom-text-editor&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;custom:cut-line&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> editor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	editor<span class="token punctuation">.</span><span class="token function">selectLinesContainingCursors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	editor<span class="token punctuation">.</span><span class="token function">cutSelectedText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then let&#39;s say we want to map this custom command to <code>alt-ctrl-z</code>, you could add the following to your keymap:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;atom-text-editor&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;alt-ctrl-z&#39;</span><span class="token operator">:</span> <span class="token string">&#39;custom:cut-line&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="specificity-and-cascade-order" tabindex="-1"><a class="header-anchor" href="#specificity-and-cascade-order" aria-hidden="true">#</a> Specificity and Cascade Order</h5><p>As is the case with CSS applying styles, when multiple bindings match for a single element, the conflict is resolved by choosing the most <em>specific</em> selector. If two matching selectors have the same specificity, the binding for the selector appearing later in the cascade takes precedence.</p><p>Currently, there&#39;s no way to specify selector ordering within a single keymap, because JSON objects do not preserve order. We handle cases where selector ordering is critical by breaking the keymap into separate files, such as <code>snippets-1.cson</code> and <code>snippets-2.cson</code>.</p><h5 id="selectors-and-custom-packages" tabindex="-1"><a class="header-anchor" href="#selectors-and-custom-packages" aria-hidden="true">#</a> Selectors and Custom Packages</h5><p>If a keybinding should only apply to a specific grammar, you can limit bindings to that grammar using the <code>data-grammar</code> attribute on the <code>atom-text-editor</code> element:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&quot;atom-text-editor[data-grammar=&#39;source example&#39;]&quot;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;ctrl-.&#39;</span><span class="token operator">:</span> <span class="token string">&#39;custom:custom-command&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>While selectors can be applied to the entire editor by what grammar is associated with it, they cannot be applied to scopes defined within the grammar or to sub-elements of <code>atom-text-editor</code>.</p><h4 id="removing-bindings" tabindex="-1"><a class="header-anchor" href="#removing-bindings" aria-hidden="true">#</a> Removing Bindings</h4><p>When the keymap system encounters a binding with the <code>unset!</code> directive as its command, it will treat the current element as if it had no key bindings matching the current keystroke sequence and continue searching from its parent. For example, the following code removes the keybinding for <code>a</code> in the Tree View, which is normally used to trigger the <code>tree-view:add-file</code> command:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;.tree-view&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;a&#39;</span><span class="token operator">:</span> <span class="token string">&#39;unset!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+`" alt="Keybinding Resolver"></p><p>But if some element above the Tree View had a keybinding for <code>a</code>, that keybinding would still execute even when the focus is inside the Tree View.</p><p>When the keymap system encounters a binding with the <code>abort!</code> directive as its command, it will stop searching for a keybinding. For example, the following code removes the keybinding for <kbd class="platform-mac">Cmd+O</kbd><kbd class="platform-windows platform-linux">Ctrl+O</kbd> when the selection is inside an editor pane:</p><p>::: codetabs#keymaps-in-depth</p><template><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;atom-text-editor&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;ctrl-o&#39;</span><span class="token operator">:</span> <span class="token string">&#39;abort!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></template><template><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;atom-text-editor&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;cmd-o&#39;</span><span class="token operator">:</span> <span class="token string">&#39;abort!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></template>`,31),_=s(`<div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;atom-text-editor&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;ctrl-o&#39;</span><span class="token operator">:</span> <span class="token string">&#39;abort!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><p>But if you click inside the Tree View and press <kbd class="platform-mac">Cmd+O</kbd><kbd class="platform-windows platform-linux">Ctrl+O</kbd>, it will work.</p><h4 id="forcing-chromium-s-native-keystroke-handling" tabindex="-1"><a class="header-anchor" href="#forcing-chromium-s-native-keystroke-handling" aria-hidden="true">#</a> Forcing Chromium&#39;s Native Keystroke Handling</h4><p>If you want to force the native browser behavior for a given keystroke, use the <code>native!</code> directive as the command of a binding. This can be useful to enable the correct behavior in native input elements. If you apply the <code>.native-key-bindings</code> class to an element, all the keystrokes typically handled by the browser will be assigned the <code>native!</code> directive.</p><div class="custom-container tip"><p class="custom-container-title">Tips</p><p><strong>Tip:</strong> Components and input elements may not correctly handle backspace and arrow keys without forcing this behavior. If your backspace isn&#39;t working correctly inside of a component, add either the directive or the <code>.native-key-bindings</code> class.</p></div><h4 id="overloading-key-bindings" tabindex="-1"><a class="header-anchor" href="#overloading-key-bindings" aria-hidden="true">#</a> Overloading Key Bindings</h4><p>Occasionally, it makes sense to layer multiple actions on top of the same key binding. An example of this is the snippets package. Snippets are inserted by typing a snippet prefix such as <code>for</code> and then pressing <kbd class="platform-all">Tab</kbd>. Every time <kbd class="platform-all">Tab</kbd> is pressed, we want to execute code attempting to expand a snippet if one exists for the text preceding the cursor. If a snippet <em>doesn&#39;t</em> exist, we want <kbd class="platform-all">Tab</kbd> to actually insert whitespace.</p><p>To achieve this, the snippets package makes use of the <code>.abortKeyBinding()</code> method on the event object representing the <code>snippets:expand</code> command.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// pseudo-code</span>
editor<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;snippets:expand&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cursorFollowsValidPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">expandSnippet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		e<span class="token punctuation">.</span><span class="token function">abortKeyBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the event handler observes that the cursor does not follow a valid prefix, it calls <code>e.abortKeyBinding()</code>, telling the keymap system to continue searching for another matching binding.</p><h4 id="step-by-step-how-keydown-events-are-mapped-to-commands" tabindex="-1"><a class="header-anchor" href="#step-by-step-how-keydown-events-are-mapped-to-commands" aria-hidden="true">#</a> Step-by-Step: How Keydown Events are Mapped to Commands</h4><ul><li>A keydown event occurs on a <em>focused</em> element.</li><li>Starting at the focused element, the keymap walks upward towards the root of the document, searching for the most specific CSS selector that matches the current DOM element and also contains a keystroke pattern matching the keydown event.</li><li>When a matching keystroke pattern is found, the search is terminated and the pattern&#39;s corresponding command is triggered on the current element.</li><li>If <code>.abortKeyBinding()</code> is called on the triggered event object, the search is resumed, triggering a binding on the next-most-specific CSS selector for the same element or continuing upward to parent elements.</li><li>If no bindings are found, the event is handled by Chromium normally.</li></ul><h4 id="overriding-atom-s-keyboard-layout-recognition" tabindex="-1"><a class="header-anchor" href="#overriding-atom-s-keyboard-layout-recognition" aria-hidden="true">#</a> Overriding Atom&#39;s Keyboard Layout Recognition</h4>`,14),C={href:"https://blog.atom.io/2016/10/17/the-wonderful-world-of-keyboards.html",target:"_blank",rel:"noopener noreferrer"},q=s(`<p>You can add the following to your <code>init.coffee</code> to send <kbd class="platform-all">Ctrl+@</kbd> when you press <kbd class="platform-all">Ctrl+Alt+G</kbd>:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code>atom<span class="token punctuation">.</span>keymaps<span class="token punctuation">.</span><span class="token function">addKeystrokeResolver</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>event<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token keyword">if</span> event<span class="token punctuation">.</span>code <span class="token keyword">is</span> <span class="token string">&#39;KeyG&#39;</span> <span class="token keyword">and</span> event<span class="token punctuation">.</span>altKey <span class="token keyword">and</span> event<span class="token punctuation">.</span>ctrlKey <span class="token keyword">and</span> event<span class="token punctuation">.</span>type <span class="token keyword">isnt</span> <span class="token string">&#39;keyup&#39;</span>
    <span class="token keyword">return</span> <span class="token string">&#39;ctrl-@&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or if you&#39;ve converted your init script to JavaScript:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>atom<span class="token punctuation">.</span>keymaps<span class="token punctuation">.</span><span class="token function">addKeystrokeResolver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> event <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>
		event<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">&quot;KeyG&quot;</span> <span class="token operator">&amp;&amp;</span>
		event<span class="token punctuation">.</span>altKey <span class="token operator">&amp;&amp;</span>
		event<span class="token punctuation">.</span>ctrlKey <span class="token operator">&amp;&amp;</span>
		event<span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">&quot;keyup&quot;</span>
	<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;ctrl-@&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),S=e("code",null,"event",-1),K={href:"https://flight-manual.atom.io/hacking-atom/sections/debugging/#check-for-errors-in-the-developer-tools",target:"_blank",rel:"noopener noreferrer"},T=s(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;keydown&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This will print every keypress event in Atom to the console so you can inspect <code>KeyboardEvent.key</code> and <code>KeyboardEvent.code</code>.</p>`,2);function j(A,I){const l=c("Tabs"),o=c("ExternalLinkIcon");return m(),k("div",null,[g,y,f,a(l,{id:"9",data:[{title:"Linux"},{title:"Mac"},{title:"Windows"}],"tab-id":"keymaps-indepth"},{tab0:t(({title:i,value:p,isActive:r})=>[v]),tab1:t(({title:i,value:p,isActive:r})=>[b]),tab2:t(({title:i,value:p,isActive:r})=>[w]),_:1}),x,e("template",null,[_,e("p",null,[n("Sometimes the problem isn't mapping the command to a key combination, the problem is that Atom doesn't recognize properly what keys you're pressing. This is due to "),e("a",C,[n("some limitations in how Chromium reports keyboard events"),a(o)]),n(". But even this can be customized now.")]),q,e("p",null,[n("If you want to know the "),S,n(" for the keystroke you pressed you can paste the following script to your "),e("a",K,[n("developer tools console"),a(o)])]),T])])}const E=u(h,[["render",j],["__file","keymaps-in-depth.html.vue"]]);export{E as default};
