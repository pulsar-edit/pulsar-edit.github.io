import{_ as h,a as m,b as g,c as k,d as v,e as b}from"./spec-suite.8f5e854d.js";import{_ as u}from"./dev-tools.1b7b2813.js";import{_ as f,a as y,b as w}from"./theme-side-by-side.33cf8d5d.js";import{_}from"./iconography.bf3cea92.js";import{_ as x,a as q,b as A,c as T,d as C,e as S,f as I,g as j,h as P,i as R}from"./cpu-profile-done.c24435bc.js";import{_ as N,o as E,c as U,a as e,b as n,d as a,w as o,e as M,f as t,r as d}from"./app.87197fef.js";const W={},F=t('<div class="custom-container danger"><p class="custom-container-title">STOP</p><p>This is being kept for archival purposes only from the original Atom documentation. As this may no longer be relevant to Pulsar, you use this at your own risk. Current Pulsar documentation for this section is found at the <a href="/docs/launch-manual/getting-started">documentation home</a>.</p></div><h2 id="hacking-atom" tabindex="-1"><a class="header-anchor" href="#hacking-atom" aria-hidden="true">#</a> Hacking Atom</h2>',2),D={href:"https://github.com/atom/tree-view",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/atom/command-palette",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/atom/find-and-replace",target:"_blank",rel:"noopener noreferrer"},z=t(`<p>In this chapter, we&#39;re going to learn how to extend the functionality of Atom through writing packages. This will be everything from new user interfaces to new language grammars to new themes. We&#39;ll learn this by writing a series of increasingly complex packages together, introducing you to new APIs and tools and techniques as we need them.</p><p>If you&#39;re looking for an example using a specific API or feature, you can skip to the end of the chapter where we&#39;ve indexed all the examples that way.</p><h3 id="tools-of-the-trade" tabindex="-1"><a class="header-anchor" href="#tools-of-the-trade" aria-hidden="true">#</a> Tools of the Trade</h3><p>To begin, there are a few things we&#39;ll assume you know, at least to some degree. Since all of Atom is implemented using web technologies, we have to assume you know web technologies such as JavaScript and CSS. Specifically, we&#39;ll be using Less, which is a preprocessor for CSS.</p><p>While much of Atom has been converted to JavaScript, a lot of older code has been left implemented in CoffeeScript because changing it would have been too risky. Additionally, Atom&#39;s default configuration language is CSON, which is based on CoffeeScript. If you don&#39;t know CoffeeScript, but you are familiar with JavaScript, you shouldn&#39;t have too much trouble. Here is an example of some simple CoffeeScript code:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code>MyPackageView <span class="token operator">=</span> require <span class="token string">&#39;./my-package-view&#39;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span>
  <span class="token property">myPackageView</span><span class="token operator">:</span> <span class="token keyword">null</span>

  <span class="token property">activate</span><span class="token operator">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token class-member variable">@myPackageView</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPackageView</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>myPackageViewState<span class="token punctuation">)</span>

  <span class="token property">deactivate</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token class-member variable">@myPackageView</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token property">serialize</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
    <span class="token property">myPackageViewState</span><span class="token operator">:</span> <span class="token class-member variable">@myPackageView</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),Y={href:"http://coffeescript.org",target:"_blank",rel:"noopener noreferrer"},V={href:"http://lesscss.org/",target:"_blank",rel:"noopener noreferrer"},$=e("h3",{id:"the-init-file",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#the-init-file","aria-hidden":"true"},"#"),n(" The Init File")],-1),G=e("code",null,"init.coffee",-1),H=e("span",{class:"platform-mac platform-linux"},[e("code",null,"~/.atom")],-1),B=e("span",{class:"platform-windows"},[e("code",null,"%USERPROFILE%\\.atom")],-1),J={href:"https://atom.io/docs/api/latest",target:"_blank",rel:"noopener noreferrer"},K=e("a",{href:"./package-word-count"},"Package: Word Count",-1),X=t(`<p>You can open the <code>init.coffee</code> file in an editor from the <span class="platform-mac"><em>Atom &gt; Init Script</em></span><span class="platform-windows"><em>File &gt; Init Script</em></span><span class="platform-linux"><em>Edit &gt; Init Script</em></span> menu. This file can also be named <code>init.js</code> and contain JavaScript code.</p><p>For example, if you have the Audio Beep configuration setting enabled, you could add the following code to your <code>init.coffee</code> file to have Atom greet you with an audio beep every time it loads:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code>atom<span class="token punctuation">.</span><span class="token function">beep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),Z=e("code",null,"init.coffee",-1),Q={href:"https://atom.io/docs/api/latest/Selection",target:"_blank",rel:"noopener noreferrer"},ee={href:"https://atom.io/docs/api/latest/Clipboard",target:"_blank",rel:"noopener noreferrer"},ne=t(`<div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code>atom<span class="token punctuation">.</span>commands<span class="token punctuation">.</span>add <span class="token string">&#39;atom-text-editor&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;markdown:paste-as-link&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">&gt;</span>
  <span class="token keyword">return</span> <span class="token keyword">unless</span> editor <span class="token operator">=</span> atom<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">getActiveTextEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  selection <span class="token operator">=</span> editor<span class="token punctuation">.</span><span class="token function">getLastSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  clipboardText <span class="token operator">=</span> atom<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  selection<span class="token punctuation">.</span><span class="token function">insertText</span><span class="token punctuation">(</span><span class="token string">&quot;[<span class="token interpolation variable">#{selection.getText()}</span>](<span class="token interpolation variable">#{clipboardText}</span>)&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ae=e("h3",{id:"package-word-count",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#package-word-count","aria-hidden":"true"},"#"),n(" Package: Word Count")],-1),se=e("p",null,"Let's get started by writing a very simple package and looking at some of the tools needed to develop one effectively. We'll start by writing a package that tells you how many words are in the current buffer and display it in a small modal window.",-1),te=e("h4",{id:"package-generator",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#package-generator","aria-hidden":"true"},"#"),n(" Package Generator")],-1),oe={href:"https://github.com/atom/package-generator",target:"_blank",rel:"noopener noreferrer"},ie=e("p",null,[n('You can run the generator by invoking the command palette and searching for "Generate Package". A dialog will appear asking you to name your new project. Name it '),e("code",null,"your-name-word-count"),n(". Atom will then create that directory and fill it out with a skeleton project and link it into your "),e("span",{class:"platform-mac platform-linux"},[e("code",null,"~/.atom/packages")]),e("span",{class:"platform-windows"},[e("code",null,"%USERPROFILE%\\.atom\\packages")]),n(" directory so it's loaded when you launch your editor next time.")],-1),le={class:"custom-container note"},ce=e("p",{class:"custom-container-title"},"Note",-1),re=e("strong",null,"Note:",-1),pe={href:"https://atom.io/packages",target:"_blank",rel:"noopener noreferrer"},de=e("code",null,"your-name-word-count",-1),ue=e("em",null,"should",-1),he=t('<p><img src="'+h+`" alt="Basic generated Atom package"></p><p>You can see that Atom has created about a dozen files that make up the package. Let&#39;s take a look at each of them to get an idea of how a package is structured, then we can modify them to get our word count functionality.</p><p>The basic package layout is as follows:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>my-package/
\u251C\u2500 grammars/
\u251C\u2500 keymaps/
\u251C\u2500 lib/
\u251C\u2500 menus/
\u251C\u2500 spec/
\u251C\u2500 snippets/
\u251C\u2500 styles/
\u251C\u2500 index.js
\u2514\u2500 package.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Not every package will have (or need) all of these directories and the package generator doesn&#39;t create <code>snippets</code> or <code>grammars</code>. Let&#39;s see what some of these are so we can start messing with them.</p><h5 id="package-json" tabindex="-1"><a class="header-anchor" href="#package-json" aria-hidden="true">#</a> <code>package.json</code></h5>`,6),me={href:"https://en.wikipedia.org/wiki/Npm_(software)",target:"_blank",rel:"noopener noreferrer"},ge=e("code",null,"package.json",-1),ke={href:"https://docs.npmjs.com/files/package.json",target:"_blank",rel:"noopener noreferrer"},ve=e("code",null,"package.json",-1),be=e("code",null,"package.json",-1),fe=t(`<ul><li><code>main</code>: the path to the JavaScript file that&#39;s the entry point to your package. If this is missing, Atom will default to looking for an <code>index.coffee</code> or <code>index.js</code>.</li><li><code>styles</code>: an Array of Strings identifying the order of the style sheets your package needs to load. If not specified, style sheets in the <code>styles</code> directory are added alphabetically.</li><li><code>keymaps</code>: an Array of Strings identifying the order of the key mappings your package needs to load. If not specified, mappings in the <code>keymaps</code> directory are added alphabetically.</li><li><code>menus</code>: an Array of Strings identifying the order of the menu mappings your package needs to load. If not specified, mappings in the <code>menus</code> directory are added alphabetically.</li><li><code>snippets</code>: an Array of Strings identifying the order of the snippets your package needs to load. If not specified, snippets in the <code>snippets</code> directory are added alphabetically.</li><li><code>activationCommands</code>: an Object identifying commands that trigger your package&#39;s activation. The keys are CSS selectors, the values are Arrays of Strings identifying the command. The loading of your package is delayed until one of these events is triggered within the associated scope defined by the CSS selector. If not specified, the <code>activate()</code> method of your main export will be called when your package is loaded.</li><li><code>activationHooks</code>: an Array of Strings identifying hooks that trigger your package&#39;s activation. The loading of your package is delayed until one of these hooks are triggered. Currently, there are three activation hooks: <ul><li><code>core:loaded-shell-environment</code> for when Atom has finished loading the shell environment variables</li><li><code>scope.name:root-scope-used</code> for when a file is opened from the specified language (e.g. <code>source.ruby:root-scope-used</code>)</li><li><code>language-package-name:grammar-used</code> for when a specific language package is used (e.g., <code>my-special-language-javascript:grammar-used</code>)</li></ul></li><li><code>workspaceOpeners</code>: An Array of Strings identifying URIs that trigger your package&#39;s activation. For example, say your package registers a custom opener for <code>atom://my-custom-panel</code>. By including that string in <code>workspaceOpeners</code>, your package will defer its activation until that URI is opened.</li></ul><p>The <code>package.json</code> in the package we&#39;ve just generated looks like this currently:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;your-name-word-count&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./lib/your-name-word-count&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.0.0&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;A short description of your package&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;activationCommands&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;atom-workspace&quot;</span><span class="token operator">:</span> <span class="token string">&quot;your-name-word-count:toggle&quot;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token property">&quot;repository&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://github.com/atom/your-name-word-count&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;MIT&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;engines&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;atom&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&gt;=1.0.0 &lt;2.0.0&quot;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you wanted to use activationHooks, you might have:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;your-name-word-count&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./lib/your-name-word-count&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.0.0&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;A short description of your package&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;activationHooks&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token string">&quot;language-javascript:grammar-used&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;language-coffee-script:grammar-used&quot;</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token property">&quot;repository&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://github.com/atom/your-name-word-count&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;MIT&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;engines&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;atom&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&gt;=1.0.0 &lt;2.0.0&quot;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>One of the first things you should do is ensure that this information is filled out. The name, description, repository URL the project will be at, and the license can all be filled out immediately. The other information we&#39;ll get into more detail on as we go.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p><strong>Warning:</strong> Do not forget to update the repository URL. The one generated for you is invalid by design and will prevent you from publishing your package until updated.</p></div><h5 id="source-code" tabindex="-1"><a class="header-anchor" href="#source-code" aria-hidden="true">#</a> Source Code</h5><p>If you want to extend Atom&#39;s behavior, your package should contain a single top-level module, which you export from whichever file is indicated by the <code>main</code> key in your <code>package.json</code> file. In the package we just generated, the main package file is <code>lib/your-name-word-count.js</code>. The remainder of your code should be placed in the <code>lib</code> directory, and required from your top-level file. If the <code>main</code> key is not in your <code>package.json</code> file, it will look for <code>index.js</code> or <code>index.coffee</code> as the main entry point.</p><p>Your package&#39;s top-level module is a singleton object that manages the lifecycle of your extensions to Atom. Even if your package creates ten different views and appends them to different parts of the DOM, it&#39;s all managed from your top-level object.</p><p>Your package&#39;s top-level module can implement the following basic methods:</p>`,11),ye=e("li",null,[e("code",null,"activate(state)"),n(": This "),e("strong",null,"optional"),n(" method is called when your package is activated. It is passed the state data from the last time the window was serialized if your module implements the "),e("code",null,"serialize()"),n(" method. Use this to do initialization work when your package is started (like setting up DOM elements or binding events). If this method returns a promise the package will be considered loading until the promise resolves (or rejects).")],-1),we=e("code",null,"initialize(state)",-1),_e=e("strong",null,"optional",-1),xe=e("code",null,"activate()",-1),qe=e("code",null,"initialize()",-1),Ae=e("code",null,"activate()",-1),Te=e("code",null,"initialize()",-1),Ce=e("li",null,[e("code",null,"serialize()"),n(": This "),e("strong",null,"optional"),n(" method is called when the window is shutting down, allowing you to return JSON to represent the state of your component. When the window is later restored, the data you returned is passed to your module's "),e("code",null,"activate"),n(" method so you can restore your view to where the user left off.")],-1),Se=e("li",null,[e("code",null,"deactivate()"),n(": This "),e("strong",null,"optional"),n(" method is called when the window is shutting down and when the package is disabled. If your package is watching any files or holding external resources in any other way, release them here. You should also dispose of all subscriptions you're holding on to.")],-1),Ie=e("h5",{id:"style-sheets",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#style-sheets","aria-hidden":"true"},"#"),n(" Style Sheets")],-1),je=e("code",null,"styles",-1),Pe={href:"http://lesscss.org",target:"_blank",rel:"noopener noreferrer"},Re=e("p",null,[n("Ideally, you won't need much in the way of styling. Atom provides a standard set of components which define both the colors and UI elements for any package that fits into Atom seamlessly. You can view all of Atom's UI components by opening the styleguide: open the command palette "),e("kbd",{class:"platform-mac"},"Cmd+Shift+P"),e("kbd",{class:"platform-windows platform-linux"},"Ctrl+Shift+P"),n(" and search for "),e("code",null,"styleguide"),n(", or type "),e("kbd",{class:"platform-mac"},"Cmd+Ctrl+Shift+G"),e("kbd",{class:"platform-windows platform-linux"},"Ctrl+Shift+G"),n(".")],-1),Ne=e("em",null,"do",-1),Ee=e("em",null,"must",-1),Ue={href:"https://github.com/atom/atom-dark-ui/blob/master/styles/ui-variables.less",target:"_blank",rel:"noopener noreferrer"},Me=t(`<p>An optional <code>styleSheets</code> array in your <code>package.json</code> can list the style sheets by name to specify a loading order; otherwise, style sheets are loaded alphabetically.</p><h5 id="keymaps" tabindex="-1"><a class="header-anchor" href="#keymaps" aria-hidden="true">#</a> Keymaps</h5><p>You can provide key bindings for commonly used actions for your extension, especially if you&#39;re also adding a new command. In our new package, we have a keymap filled in for us already in the <code>keymaps/your-name-word-count.json</code> file:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;atom-workspace&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;ctrl-alt-o&quot;</span><span class="token operator">:</span> <span class="token string">&quot;your-name-word-count:toggle&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This means that if you press <kbd class="platform-all">Alt+Ctrl+O</kbd>, our package will run the <code>your-name-word-count:toggle</code> command. We&#39;ll look at that code next, but if you want to change the default key mapping, you can do that in this file.</p><p>Keymaps are placed in the <code>keymaps</code> subdirectory. By default, all keymaps are loaded in alphabetical order. An optional <code>keymaps</code> array in your <code>package.json</code> can specify which keymaps to load and in what order.</p><p>Keybindings are executed by determining which element the keypress occurred on. In the example above, the <code>your-name-word-count:toggle</code> command is executed when pressing <kbd class="platform-all">Alt+Ctrl+O</kbd> on the <code>atom-workspace</code> element. Because the <code>atom-workspace</code> element is the parent of the entire Atom UI, this means the key combination will work anywhere in the application.</p>`,7),We=t(`<h5 id="menus" tabindex="-1"><a class="header-anchor" href="#menus" aria-hidden="true">#</a> Menus</h5><p>Menus are placed in the <code>menus</code> subdirectory. This defines menu elements like what pops up when you right click a context-menu or would go in the application menu to trigger functionality in your plugin.</p><p>By default, all menus are loaded in alphabetical order. An optional <code>menus</code> array in your <code>package.json</code> can specify which menus to load and in what order.</p><h6 id="application-menu" tabindex="-1"><a class="header-anchor" href="#application-menu" aria-hidden="true">#</a> Application Menu</h6><p>It&#39;s recommended that you create an application menu item under the <em>Packages</em> menu for common actions with your package that aren&#39;t tied to a specific element. If we look in the <code>menus/your-name-word-count.json</code> file that was generated for us, we&#39;ll see a section that looks like this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
<span class="token string-property property">&quot;menu&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;label&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Packages&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;submenu&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;label&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Word Count&quot;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;submenu&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;label&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Toggle&quot;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token string">&quot;your-name-word-count:toggle&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This section puts a &quot;Toggle&quot; menu item under a menu group named &quot;Your Name Word Count&quot; in the &quot;Packages&quot; menu.</p><p><img src="`+m+`" alt="Application Menu Item"></p><p>When you select that menu item, it will run the <code>your-name-word-count:toggle</code> command, which we&#39;ll look at in a bit.</p><p>The menu templates you specify are merged with all other templates provided by other packages in the order which they were loaded.</p><h6 id="context-menu" tabindex="-1"><a class="header-anchor" href="#context-menu" aria-hidden="true">#</a> Context Menu</h6><p>It&#39;s recommended to specify a context menu item for commands that are linked to specific parts of the interface. In our <code>menus/your-name-word-count.json</code> file, we can see an auto-generated section that looks like this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string-property property">&quot;context-menu&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;atom-text-editor&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;label&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Toggle your-name-word-count&quot;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token string">&quot;your-name-word-count:toggle&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This adds a &quot;Toggle Word Count&quot; menu option to the menu that pops up when you right-click in an Atom text editor pane.</p><p><img src="`+g+`" alt="Context Menu Entry"></p><p>When you click that it will again run the <code>your-name-word-count:toggle</code> method in your code.</p><p>Context menus are created by determining which element was selected and then adding all of the menu items whose selectors match that element (in the order which they were loaded). The process is then repeated for the elements until reaching the top of the DOM tree.</p><p>You can also add separators and submenus to your context menus. To add a submenu, provide a <code>submenu</code> key instead of a command. To add a separator, add an item with a single <code>type: &#39;separator&#39;</code> key/value pair. For instance, you could do something like this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;context-menu&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;atom-workspace&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;label&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Text&quot;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;submenu&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;label&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Inspect Element&quot;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token string">&quot;core:inspect&quot;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;separator&quot;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;label&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Selector All&quot;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token string">&quot;core:select-all&quot;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;separator&quot;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;label&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Deleted Selected Text&quot;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token string">&quot;core:delete&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="developing-our-package" tabindex="-1"><a class="header-anchor" href="#developing-our-package" aria-hidden="true">#</a> Developing Our Package</h4><p>Currently with the generated package we have, if we run that <code>your-name-word-count:toggle</code> command through the menu or the command palette, we&#39;ll get a dialog that says &quot;The YourNameWordCount package is Alive! It&#39;s ALIVE!&quot;.</p><p><img src="`+k+`" alt="Wordcount Package is Alive Dialog"></p><h5 id="understanding-the-generated-code" tabindex="-1"><a class="header-anchor" href="#understanding-the-generated-code" aria-hidden="true">#</a> Understanding the Generated Code</h5><p>Let&#39;s take a look at the code in our <code>lib</code> directory and see what is happening.</p><p>There are two files in our <code>lib</code> directory. One is the main file (<code>lib/your-name-word-count.js</code>), which is pointed to in the <code>package.json</code> file as the main file to execute for this package. This file handles the logic of the whole plugin.</p><p>The second file is a View class, <code>lib/your-name-word-count-view.js</code>, which handles the UI elements of the package. Let&#39;s look at this file first, since it&#39;s pretty simple.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">YourNameWordCountView</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">serializedState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// Create root element</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;your-name-word-count&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Create message element</span>
		<span class="token keyword">const</span> message <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		message<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">&quot;The YourNameWordCount package is Alive! It&#39;s ALIVE!&quot;</span><span class="token punctuation">;</span>
		message<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Returns an object that can be retrieved when package is activated</span>
	<span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token comment">// Tear down any state and detach</span>
	<span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Basically the only thing happening here is that when the View class is created, it creates a simple <code>div</code> element and adds the <code>your-name-word-count</code> class to it (so we can find or style it later) and then adds the &quot;<code>Your Name Word Count package is Alive!</code>&quot; text to it. There is also a <code>getElement</code> method which returns that <code>div</code>. The <code>serialize</code> and <code>destroy</code> methods don&#39;t do anything and we won&#39;t have to worry about that until another example.</p><p>Notice that we&#39;re simply using the basic browser DOM methods: <code>createElement()</code> and <code>appendChild()</code>.</p><p>The second file we have is the main entry point to the package. Again, because it&#39;s referenced in the <code>package.json</code> file. Let&#39;s take a look at that file.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> YourNameWordCountView <span class="token keyword">from</span> <span class="token string">&quot;./your-name-word-count-view&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CompositeDisposable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;atom&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">yourNameWordCountView</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	<span class="token literal-property property">modalPanel</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
	<span class="token literal-property property">subscriptions</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>

	<span class="token function">activate</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>yourNameWordCountView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">YourNameWordCountView</span><span class="token punctuation">(</span>
			state<span class="token punctuation">.</span>yourNameWordCountViewState
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>modalPanel <span class="token operator">=</span> atom<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">addModalPanel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
			<span class="token literal-property property">item</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>yourNameWordCountView<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token literal-property property">visible</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Events subscribed to in atom&#39;s system can be easily cleaned up with a CompositeDisposable</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>subscriptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositeDisposable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Register command that toggles this view</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>subscriptions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
			atom<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;atom-workspace&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
				<span class="token string-property property">&quot;your-name-word-count:toggle&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token function">deactivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>modalPanel<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>subscriptions<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>yourNameWordCountView<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">yourNameWordCountViewState</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>yourNameWordCountView<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;YourNameWordCount was toggled!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modalPanel<span class="token punctuation">.</span><span class="token function">isVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modalPanel<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modalPanel<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There is a bit more going on here. First of all we can see that we are defining four methods. The only required one is <code>activate</code>. The <code>deactivate</code> and <code>serialize</code> methods are expected by Atom but optional. The <code>toggle</code> method is one Atom is not looking for, so we&#39;ll have to invoke it somewhere for it to be called, which you may recall we do both in the <code>activationCommands</code> section of the <code>package.json</code> file and in the action we have in the menu file.</p><p>The <code>deactivate</code> method simply destroys the various class instances we&#39;ve created and the <code>serialize</code> method simply passes on the serialization to the View class. Nothing too exciting here.</p><p>The <code>activate</code> command does a number of things. For one, it is not called automatically when Atom starts up, it is first called when one of the <code>activationCommands</code> as defined in the <code>package.json</code> file are called. In this case, <code>activate</code> is only called the first time the <code>toggle</code> command is called. If nobody ever invokes the menu item or hotkey, this code is never called.</p><p>This method does two things. The first is that it creates an instance of the View class we have and adds the element that it creates to a hidden modal panel in the Atom workspace.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>yourNameWordCountView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">YourNameWordCountView</span><span class="token punctuation">(</span>
	state<span class="token punctuation">.</span>yourNameWordCountViewState
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>modalPanel <span class="token operator">=</span> atom<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">addModalPanel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">item</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>yourNameWordCountView<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token literal-property property">visible</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We&#39;ll ignore the state stuff for now, since it&#39;s not important for this simple plugin. The rest should be fairly straightforward.</p><p>The next thing this method does is create an instance of the CompositeDisposable class so it can register all the commands that can be called from the plugin so other plugins could subscribe to these events.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Events subscribed to in atom&#39;s system can be easily cleaned up with a CompositeDisposable</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>subscriptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositeDisposable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Register command that toggles this view</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>subscriptions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
	atom<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;atom-workspace&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
		<span class="token string-property property">&quot;your-name-word-count:toggle&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next we have the <code>toggle</code> method. This method simply toggles the visibility of the modal panel that we created in the <code>activate</code> method.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;YourNameWordCount was toggled!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>modalPanel<span class="token punctuation">.</span><span class="token function">isVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>modalPanel<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>modalPanel<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This should be fairly simple to understand. We&#39;re looking to see if the modal element is visible and hiding or showing it depending on its current state.</p><h5 id="the-flow" tabindex="-1"><a class="header-anchor" href="#the-flow" aria-hidden="true">#</a> The Flow</h5><p>So, let&#39;s review the actual flow in this package.</p><ol><li>Atom starts up</li><li>Atom starts loading packages</li><li>Atom reads your <code>package.json</code></li><li>Atom loads keymaps, menus, styles and the main module</li><li>Atom finishes loading packages</li><li>At some point, the user executes your package command <code>your-name-word-count:toggle</code></li><li>Atom executes the <code>activate</code> method in your main module which sets up the UI by creating the hidden modal view</li><li>Atom executes the package command <code>your-name-word-count:toggle</code> which reveals the hidden modal view</li><li>At some point, the user executes the <code>your-name-word-count:toggle</code> command again</li><li>Atom executes the command which hides the modal view</li><li>Eventually, Atom is shut down which can trigger any serializations that your package has defined</li></ol><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>Tip:</strong> Keep in mind that the flow will be slightly different if you choose not to use <code>activationCommands</code> in your package.</p></div><h5 id="counting-the-words" tabindex="-1"><a class="header-anchor" href="#counting-the-words" aria-hidden="true">#</a> Counting the Words</h5><p>So now that we understand what is happening, let&#39;s modify the code so that our little modal box shows us the current word count instead of static text.</p><p>We&#39;ll do this in a very simple way. When the dialog is toggled, we&#39;ll count the words right before displaying the modal. So let&#39;s do this in the <code>toggle</code> command. If we add some code to count the words and ask the view to update itself, we&#39;ll have something like this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>modalPanel<span class="token punctuation">.</span><span class="token function">isVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>modalPanel<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> editor <span class="token operator">=</span> atom<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">getActiveTextEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> words <span class="token operator">=</span> editor<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>yourNameWordCountView<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>modalPanel<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,50),Fe={href:"https://atom.io/docs/api/latest/Workspace#instance-getActiveTextEditor",target:"_blank",rel:"noopener noreferrer"},De=e("code",null,"atom.workspace.getActiveTextEditor()",-1),Le={href:"https://atom.io/docs/api/latest/TextEditor#instance-getText",target:"_blank",rel:"noopener noreferrer"},Oe=e("code",null,"getText()",-1),ze=t(`<p>Finally, we tell our view to update the word count it displays by calling the <code>setCount()</code> method on our view and then showing the modal again. Since that method doesn&#39;t yet exist, let&#39;s create it now.</p><p>We can add this code to the end of our <code>your-name-word-count-view.js</code> file:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">setCount</span><span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> displayText <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">There are </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> words.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> displayText<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pretty simple! We take the count number that was passed in and place it into a string that we then stick into the element that our view is controlling.</p><div class="custom-container note"><p class="custom-container-title">Note</p><p><strong>Note:</strong> To see your changes, you&#39;ll need to reload the code. You can do this by reloading the window (The <code>window:reload</code> command in the Command Palette). A common practice is to have two Atom windows, one for developing your package, and one for testing and reloading.</p></div><p><img src="`+v+'" alt="Word Count Working"></p><h4 id="basic-debugging" tabindex="-1"><a class="header-anchor" href="#basic-debugging" aria-hidden="true">#</a> Basic Debugging</h4><p>You&#39;ll notice a few <code>console.log</code> statements in the code. One of the cool things about Atom being built on Chromium is that you can use some of the same debugging tools available to you that you have when doing web development.</p><p>To open up the Developer Console, press <kbd class="platform-mac">Alt+Cmd+I</kbd><kbd class="platform-windows platform-linux">Ctrl+Shift+I</kbd>, or choose the menu option <em>View &gt; Developer &gt; Toggle Developer Tools</em>.</p><p><img src="'+u+'" alt="Developer Tools Debugging"></p><p>From here you can inspect objects, run code and view console output just as though you were debugging a web site.</p><h4 id="testing" tabindex="-1"><a class="header-anchor" href="#testing" aria-hidden="true">#</a> Testing</h4><p>Your package should have tests, and if they&#39;re placed in the <code>spec</code> directory, they can be run by Atom.</p>',13),Ye={href:"https://jasmine.github.io/archives/1.3/introduction",target:"_blank",rel:"noopener noreferrer"},Ve=t('<h5 id="running-tests" tabindex="-1"><a class="header-anchor" href="#running-tests" aria-hidden="true">#</a> Running Tests</h5><p>Once you&#39;ve got your test suite written, you can run it by pressing <kbd class="platform-mac">Alt+Cmd+Ctrl+P</kbd><kbd class="platform-windows platform-linux">Alt+Ctrl+P</kbd> or via the <em>View &gt; Developer &gt; Run Package Specs</em> menu. Our generated package comes with an example test suite, so you can run this right now to see what happens.</p><p><img src="'+b+'" alt="Spec Suite Results"></p><p>You can also use the <code>atom --test spec</code> command to run them from the command line. It prints the test output and results to the console and returns the proper status code depending on whether the tests passed or failed.</p><h4 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h4>',5),$e=e("h3",{id:"package-modifying-text",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#package-modifying-text","aria-hidden":"true"},"#"),n(" Package: Modifying Text")],-1),Ge={href:"https://en.wikipedia.org/wiki/ASCII_art",target:"_blank",rel:"noopener noreferrer"},He=t(`<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>                                     o888
    ooooooo     ooooooo     ooooooo   888
  888     888 888     888 888     888 888
  888         888     888 888     888 888
    88ooo888    88ooo88     88ooo88  o888o

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This should demonstrate how to do basic text manipulation in the current text buffer and how to deal with selections.</p><p>The final package can be viewed at https://github.com/atom/ascii-art.</p><h4 id="basic-text-insertion" tabindex="-1"><a class="header-anchor" href="#basic-text-insertion" aria-hidden="true">#</a> Basic Text Insertion</h4>`,4),Be=e("kbd",{class:"platform-mac"},"Cmd+Shift+P",-1),Je=e("kbd",{class:"platform-windows platform-linux"},"Ctrl+Shift+P",-1),Ke={href:"https://github.com/atom/command-palette",target:"_blank",rel:"noopener noreferrer"},Xe=e("code",null,"ascii-art",-1),Ze=t(`<p>Now let&#39;s edit the package files to make our ASCII Art package do something interesting. Since this package doesn&#39;t need any UI, we can remove all view-related code so go ahead and delete <code>lib/ascii-art-view.js</code>, <code>spec/ascii-art-view-spec.js</code>, and <code>styles/</code>.</p><p>Next, open up <code>lib/ascii-art.js</code> and remove all view code, so it looks like this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> CompositeDisposable <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;atom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">subscriptions</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>

	<span class="token function">activate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>subscriptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositeDisposable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>subscriptions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
			atom<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;atom-workspace&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
				<span class="token string-property property">&quot;ascii-art:convert&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token function">deactivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>subscriptions<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token function">convert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Convert text!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="create-a-command" tabindex="-1"><a class="header-anchor" href="#create-a-command" aria-hidden="true">#</a> Create a Command</h5><p>Now let&#39;s add a command. You should namespace your commands with the package name followed by a <code>:</code> and then the name of the command. As you can see in the code, we called our command <code>ascii-art:convert</code> and we will define it to call the <code>convert()</code> method when it&#39;s executed.</p><p>So far, that will simply log to the console. Let&#39;s start by making it insert something into the text buffer.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">convert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> editor <span class="token operator">=</span> atom<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">getActiveTextEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>editor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    editor<span class="token punctuation">.</span><span class="token function">insertText</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, World!&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),Qe=e("code",null,"atom.workspace.getActiveTextEditor()",-1),en=e("code",null,"convert()",-1),nn={href:"https://atom.io/docs/api/latest/TextEditor#instance-insertText",target:"_blank",rel:"noopener noreferrer"},an=e("code",null,"insertText()",-1),sn=t(`<h5 id="reload-the-package" tabindex="-1"><a class="header-anchor" href="#reload-the-package" aria-hidden="true">#</a> Reload the Package</h5><p>Before we can trigger <code>ascii-art:convert</code>, we need to load the latest code for our package by reloading the window. Run the command &quot;Window: Reload&quot; from the Command Palette or by pressing <kbd class="platform-mac">Alt+Cmd+Ctrl+L</kbd><kbd class="platform-windows platform-linux">Ctrl+Shift+F5</kbd>.</p><h5 id="trigger-the-command" tabindex="-1"><a class="header-anchor" href="#trigger-the-command" aria-hidden="true">#</a> Trigger the Command</h5><p>Now open the Command Palette and search for the &quot;Ascii Art: Convert&quot; command. But it&#39;s not there! To fix this, open <code>package.json</code> and find the property called <code>activationCommands</code>. Activation commands make Atom launch faster by allowing Atom to delay a package&#39;s activation until it&#39;s needed. So remove the existing command and use <code>ascii-art:convert</code> in <code>activationCommands</code>:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;activationCommands&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;atom-workspace&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ascii-art:convert&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>First, reload the window by running the command &quot;Window: Reload&quot; from the command palette. Now when you run the &quot;Ascii Art: Convert&quot; command it will insert &quot;Hello, World!&quot; into the active editor, if any.</p><h5 id="add-a-key-binding" tabindex="-1"><a class="header-anchor" href="#add-a-key-binding" aria-hidden="true">#</a> Add a Key Binding</h5><p>Now let&#39;s add a key binding to trigger the <code>ascii-art:convert</code> command. Open <code>keymaps/ascii-art.json</code> and add a key binding linking <kbd class="platform-all">Alt+Ctrl+A</kbd> to the <code>ascii-art:convert</code> command. You can delete the pre-existing key binding since you won&#39;t need it anymore.</p><p>When finished, the file should look like this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;atom-text-editor&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;ctrl-alt-a&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ascii-art:convert&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now reload the window and verify that the key binding works.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p><strong>Warning:</strong> The Atom keymap system is <em>case-sensitive</em>. This means that there is a distinction between <code>a</code> and <code>A</code> when creating keybindings. <code>a</code> means that you want to trigger the keybinding when you press <kbd class="platform-all">A</kbd>. But <code>A</code> means that you want to trigger the keybinding when you press <kbd class="platform-all">Shift+A</kbd>. You can also write <code>shift-a</code> when you want to trigger the keybinding when you press <kbd class="platform-all">Shift+A</kbd>.</p><p>We <strong>strongly</strong> recommend always using lowercase and explicitly spelling out when you want to include <kbd class="platform-all">Shift</kbd> in your keybindings.</p></div><h4 id="add-the-ascii-art" tabindex="-1"><a class="header-anchor" href="#add-the-ascii-art" aria-hidden="true">#</a> Add the ASCII Art</h4>`,13),tn={href:"https://npmjs.org/package/figlet",target:"_blank",rel:"noopener noreferrer"},on={href:"https://npmjs.org/",target:"_blank",rel:"noopener noreferrer"},ln=e("code",null,"package.json",-1),cn=t(`<div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;figlet&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.8&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After saving the file, run the command &quot;Update Package Dependencies: Update&quot; from the Command Palette. This will install the package&#39;s node module dependencies, only figlet in this case. You will need to run &quot;Update Package Dependencies: Update&quot; whenever you update the dependencies field in your <code>package.json</code> file.</p><p>If for some reason this doesn&#39;t work, you&#39;ll see a message saying &quot;Failed to update package dependencies&quot; and you will find a new <code>npm-debug.log</code> file in your directory. That file should give you some idea as to what went wrong.</p><p>Now require the figlet node module in <code>lib/ascii-art.js</code> and instead of inserting &quot;Hello, World!&quot;, convert the selected text to ASCII art.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">convert</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> editor <span class="token operator">=</span> atom<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">getActiveTextEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>editor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> selection <span class="token operator">=</span> editor<span class="token punctuation">.</span><span class="token function">getSelectedText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">const</span> figlet <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;figlet&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> font <span class="token operator">=</span> <span class="token string">&#39;o8&#39;</span>
    <span class="token function">figlet</span><span class="token punctuation">(</span>selection<span class="token punctuation">,</span> <span class="token punctuation">{</span>font<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> art</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        editor<span class="token punctuation">.</span><span class="token function">insertText</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>art<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now reload the editor, select some text in an editor window and press <kbd class="platform-all">Alt+Ctrl+A</kbd>. It should be replaced with a ridiculous ASCII art version instead.</p>`,6),rn={href:"https://atom.io/docs/api/latest/TextEditor#instance-getSelectedText",target:"_blank",rel:"noopener noreferrer"},pn=e("code",null,"editor.getSelectedText()",-1),dn={href:"https://atom.io/docs/api/latest/TextEditor#instance-insertText",target:"_blank",rel:"noopener noreferrer"},un=e("code",null,"editor.insertText()",-1),hn=e("h4",{id:"summary-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#summary-1","aria-hidden":"true"},"#"),n(" Summary")],-1),mn=e("p",null,"In this section, we've made a UI-less package that takes selected text and replaces it with a processed version. This could be helpful in creating linters or checkers for your code.",-1),gn=e("h3",{id:"package-active-editor-info",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#package-active-editor-info","aria-hidden":"true"},"#"),n(" Package: Active Editor Info")],-1),kn={href:"https://nuclide.io",target:"_blank",rel:"noopener noreferrer"},vn=e("p",null,"For this package, we'll define a workspace item that tells us some information about our active text editor. The final package can be viewed at https://github.com/atom/active-editor-info.",-1),bn=e("h4",{id:"create-the-package",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#create-the-package","aria-hidden":"true"},"#"),n(" Create the Package")],-1),fn=e("kbd",{class:"platform-mac"},"Cmd+Shift+P",-1),yn=e("kbd",{class:"platform-windows platform-linux"},"Ctrl+Shift+P",-1),wn={href:"https://github.com/atom/command-palette",target:"_blank",rel:"noopener noreferrer"},_n=e("code",null,"active-editor-info",-1),xn=t(`<h4 id="add-an-opener" tabindex="-1"><a class="header-anchor" href="#add-an-opener" aria-hidden="true">#</a> Add an Opener</h4><p>Now let&#39;s edit the package files to show our view in a workspace item instead of a modal panel. The way we do this is by registering an <em>opener</em> with Atom. Openers are just functions that accept a URI and return a view (if it&#39;s a URI that the opener knows about). When you call <code>atom.workspace.open()</code>, Atom will go through all of its openers until it finds one that can handle the URI you passed.</p><p>Let&#39;s open <code>lib/active-editor-info.js</code> and edit our <code>activate()</code> method to register an opener:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;use babel&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> ActiveEditorInfoView <span class="token keyword">from</span> <span class="token string">&quot;./active-editor-info-view&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CompositeDisposable<span class="token punctuation">,</span> Disposable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;atom&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">subscriptions</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>

	<span class="token function">activate</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>subscriptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositeDisposable</span><span class="token punctuation">(</span>
			<span class="token comment">// Add an opener for our view.</span>
			atom<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">addOpener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">uri</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>uri <span class="token operator">===</span> <span class="token string">&quot;atom://active-editor-info&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveEditorInfoView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

			<span class="token comment">// Register command that toggles this view</span>
			atom<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;atom-workspace&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
				<span class="token string-property property">&quot;active-editor-info:toggle&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

			<span class="token comment">// Destroy any ActiveEditorInfoViews when the package is deactivated.</span>
			<span class="token keyword">new</span> <span class="token class-name">Disposable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				atom<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">getPaneItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
					<span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">ActiveEditorInfoView</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
						item<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token function">deactivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>subscriptions<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Toggle it!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You&#39;ll notice we also removed the <code>activeEditorInfoView</code> property and the <code>serialize()</code> method. That&#39;s because, with workspace items, it&#39;s possible to have more than one instance of a given view. Since each instance can have its own state, each should do its own serialization instead of relying on a package-level <code>serialize()</code> method. We&#39;ll come back to that later.</p><p>You probably also noticed that our <code>toggle()</code> implementation just logs the text &quot;Toggle it!&quot; to the console. Let&#39;s make it actually toggle our view:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    atom<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">&#39;atom://active-editor-info&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="updating-the-view" tabindex="-1"><a class="header-anchor" href="#updating-the-view" aria-hidden="true">#</a> Updating the View</h4><p>Atom uses the same view abstractions everywhere, so we can almost use the generated ActiveEditorInfoView class as-is. We just need to add two small methods:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Used by Atom for tab text</span>
    <span class="token keyword">return</span> <span class="token string">&#39;Active Editor Info&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Used by Atom to identify the view when toggling.</span>
    <span class="token keyword">return</span> <span class="token string">&#39;atom://active-editor-info&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now reload the window and run the &quot;Active Editor Info: Toggle&quot; command from the command palette! Our view will appear in a new tab in the center of the workspace. If you want, you can drag it into one of the docks. Toggling it again will then hide that dock. If you close the tab and run the toggle command again, it will appear in the last place you had it.</p><div class="custom-container note"><p class="custom-container-title">Note</p><p>We&#39;ve repeated the same URI three times now. That&#39;s okay, but it&#39;s probably a good idea to define the URL in one place and then import it from that module wherever you need it.</p></div><h4 id="constraining-our-item-s-locations" tabindex="-1"><a class="header-anchor" href="#constraining-our-item-s-locations" aria-hidden="true">#</a> Constraining Our Item&#39;s Locations</h4><p>The purpose of our view is to show information about the active text editor, so it doesn&#39;t really make sense to show our item in the center of the workspace (where the text editor will be). Let&#39;s add some methods to our view class to influence where its opened:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token function">getDefaultLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// This location will be used if the user hasn&#39;t overridden it by dragging the item elsewhere.</span>
    <span class="token comment">// Valid values are &quot;left&quot;, &quot;right&quot;, &quot;bottom&quot;, and &quot;center&quot; (the default).</span>
    <span class="token keyword">return</span> <span class="token string">&#39;right&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">getAllowedLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// The locations into which the item can be moved.</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&#39;left&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;right&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bottom&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now our item will appear in the right dock initially and users will only be able to drag it to one of the other docks.</p><h4 id="show-active-editor-info" tabindex="-1"><a class="header-anchor" href="#show-active-editor-info" aria-hidden="true">#</a> Show Active Editor Info</h4><p>Now that we have our view all wired up, let&#39;s update it to show some information about the active text editor. Add this to the constructor:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>subscriptions <span class="token operator">=</span> atom<span class="token punctuation">.</span>workspace
	<span class="token punctuation">.</span><span class="token function">getCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">observeActivePaneItem</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>atom<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">isTextEditor</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			message<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&quot;Open a file to see important information about it.&quot;</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		message<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;h2&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&quot;untitled&quot;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h2&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;b&gt;Soft Wrap:&lt;/b&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>softWrapped<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;
      &lt;li&gt;&lt;b&gt;Tab Length:&lt;/b&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span><span class="token function">getTabLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;
      &lt;li&gt;&lt;b&gt;Encoding:&lt;/b&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;
      &lt;li&gt;&lt;b&gt;Line Count:&lt;/b&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span><span class="token function">getLineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;
    &lt;/ul&gt;
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now whenever you open a text editor in the center, the view will update with some information about it.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>We use a template string here because it&#39;s simple and we have a lot of control over what&#39;s going into it, but this could easily result in the insertion of unwanted HTML if you&#39;re not careful. Sanitize your input and use the DOM API or a templating system when doing this for real.</p></div><p>Also, don&#39;t forget to clean up the subscription in the <code>destroy()</code> method:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>subscriptions<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="serialization" tabindex="-1"><a class="header-anchor" href="#serialization" aria-hidden="true">#</a> Serialization</h4><p>If you were to reload Atom now, you&#39;d see that our item had disappeared. That&#39;s because we haven&#39;t told Atom how to serialize it yet. Let&#39;s do that now.</p><p>The first step is to implement a <code>serialize()</code> method on our ActiveEditorInfoView class. Atom will call the <code>serialize()</code> method on every item in the workspace periodically to save its state.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// This is used to look up the deserializer function. It can be any string, but it needs to be</span>
      <span class="token comment">// unique across all packages!</span>
      <span class="token literal-property property">deserializer</span><span class="token operator">:</span> <span class="token string">&#39;active-editor-info/ActiveEditorInfoView&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container note"><p class="custom-container-title">Note</p><p>All of our view&#39;s state is derived from the active text editor so we only need the <code>deserializer</code> field. If we had other state that we wanted to preserve across reloads, we would just add things to the object we&#39;re returning. Just make sure that they&#39;re JSON serializable!</p></div><p>Next we need to register a deserializer function that Atom can use to recreate the real object when it starts up. The best way to do that is to add a &quot;deserializers&quot; object to our <code>package.json</code> file:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;active-editor-info&quot;</span><span class="token punctuation">,</span>
  ...
  <span class="token property">&quot;deserializers&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;active-editor-info/ActiveEditorInfoView&quot;</span><span class="token operator">:</span> <span class="token string">&quot;deserializeActiveEditorInfoView&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice that the key (<code>&quot;active-editor-info/ActiveEditorInfoView&quot;</code>) matches the string we used in our <code>serialize()</code> method above. The value (<code>&quot;deserializeActiveEditorInfoView&quot;</code>) refers to a function in our main module, which we still need to add. Go back to <code>active-editor-info.js</code> and do that now:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token function">deserializeActiveEditorInfoView</span><span class="token punctuation">(</span><span class="token parameter">serialized</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveEditorInfoView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The value returned from our <code>serialize()</code> method will be passed to this function. Since our serialized object didn&#39;t include any state, we can just return a new ActiveEditorInfoView instance.</p><p>Reload Atom and toggle the view with the &quot;Active Editor Info: Toggle&quot; command. Then reload Atom again. Your view should be just where you left it!</p><h4 id="summary-2" tabindex="-1"><a class="header-anchor" href="#summary-2" aria-hidden="true">#</a> Summary</h4><p>In this section, we&#39;ve made a toggleable workspace item whose placement can be controlled by the user. This could be helpful when creating all sorts of visual tools for working with code!</p><h3 id="creating-a-theme" tabindex="-1"><a class="header-anchor" href="#creating-a-theme" aria-hidden="true">#</a> Creating a Theme</h3>`,37),qn={href:"http://lesscss.org/",target:"_blank",rel:"noopener noreferrer"},An=t('<p>Atom supports two types of themes: <em>UI</em> and <em>Syntax</em>. UI themes style elements such as the tree view, the tabs, drop-down lists, and the status bar. Syntax themes style the code, gutter and other elements inside the editor view.</p><p><img src="'+f+'" alt="Theme boundary"></p><p>Themes can be installed and changed from the Settings View which you can open by selecting the <span class="platform-mac"><em>Atom &gt; Preferences</em></span><span class="platform-windows"><em>File &gt; Preferences</em></span><span class="platform-linux"><em>Edit &gt; Preferences</em></span> menu, and clicking the &quot;Install&quot; or &quot;Themes&quot; tab on the left hand navigation.</p><h4 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting Started</h4><p>Themes are pretty straightforward but it&#39;s still helpful to be familiar with a few things before starting:</p>',5),Tn={href:"https://speakerdeck.com/danmatthews/less-css",target:"_blank",rel:"noopener noreferrer"},Cn=e("code",null,"package.json",-1),Sn=e("code",null,"package.json",-1),In=e("li",null,[n("Your theme's "),e("code",null,"package.json"),n(" must contain a "),e("code",null,"theme"),n(" key with a value of "),e("code",null,"ui"),n(" or "),e("code",null,"syntax"),n(" for Atom to recognize and load it as a theme.")],-1),jn={href:"https://atom.io/themes",target:"_blank",rel:"noopener noreferrer"},Pn=t('<h4 id="creating-a-syntax-theme" tabindex="-1"><a class="header-anchor" href="#creating-a-syntax-theme" aria-hidden="true">#</a> Creating a Syntax Theme</h4><p>Let&#39;s create your first theme.</p><p>To get started, press <kbd class="platform-mac">Cmd+Shift+P</kbd><kbd class="platform-windows platform-linux">Ctrl+Shift+P</kbd> and start typing &quot;Generate Syntax Theme&quot; to generate a new theme package. Select &quot;Generate Syntax Theme,&quot; and you&#39;ll be asked for the path where your theme will be created. Let&#39;s call ours <code>motif-syntax</code>.</p><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>Tip:</strong> Syntax themes should end with <em>-syntax</em> and UI themes should end with <em>-ui</em>.</p></div><p>Atom will display a new window, showing the motif-syntax theme, with a default set of folders and files created for us. If you open the Settings View with <kbd class="platform-mac">Cmd+,</kbd><kbd class="platform-windows platform-linux">Ctrl+,</kbd> and click the &quot;Themes&quot; tab on the left, you&#39;ll see the &quot;Motif&quot; theme listed in the &quot;Syntax Theme&quot; drop-down. Select it from the menu to activate it, now when you open an editor you should see your new motif-syntax theme in action.</p><p>Open up <code>styles/colors.less</code> to change the various color variables which have already been defined. For example, turn <code>@red</code> into <code>#f4c2c1</code>.</p><p>Then open <code>styles/base.less</code> and modify the various selectors that have already been defined. These selectors style different parts of code in the editor such as comments, strings and the line numbers in the gutter.</p><p>As an example, let&#39;s make the <code>.gutter</code> <code>background-color</code> into <code>@red</code>.</p><p>Reload Atom by pressing <kbd class="platform-mac">Alt+Cmd+Ctrl+L</kbd><kbd class="platform-windows platform-linux">Alt+Ctrl+R</kbd> to see the changes you made reflected in your Atom window. Pretty neat!</p><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>Tip:</strong> You can avoid reloading to see changes you make by opening an Atom window in Dev Mode. To open a Dev Mode Atom window run <code>atom --dev .</code> in the terminal, or use the <em>View &gt; Developer &gt; Open in Dev Mode</em> menu. When you edit your theme, changes will instantly be reflected!</p></div><div class="custom-container note"><p class="custom-container-title">Note</p><p><strong>Note:</strong> It&#39;s advised to <em>not</em> specify a <code>font-family</code> in your syntax theme because it will override the Font Family field in Atom&#39;s settings. If you still like to recommend a font that goes well with your theme, we suggest you do so in your README.</p></div><h4 id="creating-a-ui-theme" tabindex="-1"><a class="header-anchor" href="#creating-a-ui-theme" aria-hidden="true">#</a> Creating a UI Theme</h4><p>To create a UI theme, do the following:</p>',13),Rn={href:"https://github.com/atom-community/ui-theme-template",target:"_blank",rel:"noopener noreferrer"},Nn=t('<li>Clone the forked repository to the local filesystem</li><li>Open a terminal in the forked theme&#39;s directory</li><li>Open your new theme in a Dev Mode Atom window run <code>atom --dev .</code> in the terminal or use the <em>View &gt; Developer &gt; Open in Dev Mode</em> menu</li><li>Change the name of the theme in the theme&#39;s <code>package.json</code> file</li><li>Name your theme end with a <code>-ui</code>, for example <code>super-white-ui</code></li><li>Run <code>apm link --dev</code> to symlink your repository to <code>~/.atom/dev/packages</code></li><li>Reload Atom using <kbd class="platform-mac">Alt+Cmd+Ctrl+L</kbd><kbd class="platform-windows platform-linux">Alt+Ctrl+R</kbd></li><li>Enable the theme via the &quot;UI Theme&quot; drop-down in the &quot;Themes&quot; tab of the Settings View</li><li>Make changes! Since you opened the theme in a Dev Mode window, changes will be instantly reflected in the editor without having to reload.</li>',9),En=t('<div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>Tip:</strong> Because we used <code>apm link --dev</code> in the above instructions, if you break anything you can always close Atom and launch Atom normally to force Atom to the default theme. This allows you to continue working on your theme even if something goes catastrophically wrong.</p></div><h4 id="theme-variables" tabindex="-1"><a class="header-anchor" href="#theme-variables" aria-hidden="true">#</a> Theme Variables</h4><p>UI themes <strong>must</strong> provide a <code>ui-variables.less</code> and Syntax themes a <code>syntax-variables.less</code> file. It contains predefined variables that packages use to make sure the look and feel matches.</p><p>Here the variables with the default values:</p>',4),Un={href:"https://github.com/atom/atom/blob/master/static/variables/ui-variables.less",target:"_blank",rel:"noopener noreferrer"},Mn={href:"https://github.com/atom/atom/blob/master/static/variables/syntax-variables.less",target:"_blank",rel:"noopener noreferrer"},Wn=e("p",null,"These default values will be used as a fallback in case a theme doesn't define its own variables.",-1),Fn=e("h5",{id:"use-in-packages",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#use-in-packages","aria-hidden":"true"},"#"),n(" Use in Packages")],-1),Dn=e("p",null,[n("In any of your package's "),e("code",null,".less"),n(" files, you can access the theme variables by importing the "),e("code",null,"ui-variables"),n(" or "),e("code",null,"syntax-variables"),n(" file from Atom.")],-1),Ln={href:"https://github.com/atom/styleguide",target:"_blank",rel:"noopener noreferrer"},On=t(`<p>Here&#39;s an example <code>.less</code> file that a package can define using theme variables:</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@import</span> <span class="token string">&quot;ui-variables&quot;</span><span class="token punctuation">;</span></span>

<span class="token selector">.my-selector</span> <span class="token punctuation">{</span>
	<span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token atrule"><span class="token rule">@base-background-color</span><span class="token punctuation">;</span></span>
	<span class="token property">padding</span><span class="token punctuation">:</span> <span class="token atrule"><span class="token rule">@component-padding</span><span class="token punctuation">;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@import</span> <span class="token string">&quot;syntax-variables&quot;</span><span class="token punctuation">;</span></span>

<span class="token selector">.my-selector</span> <span class="token punctuation">{</span>
	<span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token atrule"><span class="token rule">@syntax-background-color</span><span class="token punctuation">;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="development-workflow" tabindex="-1"><a class="header-anchor" href="#development-workflow" aria-hidden="true">#</a> Development workflow</h4><p>There are a few tools to help make theme development faster and easier.</p><h5 id="live-reload" tabindex="-1"><a class="header-anchor" href="#live-reload" aria-hidden="true">#</a> Live Reload</h5>`,6),zn=e("kbd",{class:"platform-mac"},"Alt+Cmd+Ctrl+L",-1),Yn=e("kbd",{class:"platform-windows platform-linux"},"Alt+Ctrl+R",-1),Vn={href:"https://github.com/atom/dev-live-reload",target:"_blank",rel:"noopener noreferrer"},$n=t('<p>To launch a Dev Mode window:</p><ul><li>Open your theme directory in a dev window by selecting the <em>View &gt; Developer &gt; Open in Dev Mode</em> menu item</li><li>Or launch Atom from the terminal with <code>atom --dev</code></li></ul><p>If you&#39;d like to reload all the styles at any time, you can use the shortcut <kbd class="platform-mac">Alt+Cmd+Ctrl+L</kbd><kbd class="platform-windows platform-linux">Alt+Ctrl+R</kbd>.</p><h5 id="developer-tools" tabindex="-1"><a class="header-anchor" href="#developer-tools" aria-hidden="true">#</a> Developer Tools</h5><p>Atom is based on the Chrome browser, and supports Chrome&#39;s Developer Tools. You can open them by selecting the <em>View &gt; Developer &gt; Toggle Developer Tools</em> menu, or by using the <kbd class="platform-mac">Alt+Cmd+I</kbd><kbd class="platform-windows platform-linux">Ctrl+Shift+I</kbd> shortcut.</p><p>The dev tools allow you to inspect elements and take a look at their CSS properties.</p><p><img src="'+u+'" alt="Developer Tools"></p>',7),Gn={href:"https://developer.chrome.com/devtools/docs/dom-and-styles",target:"_blank",rel:"noopener noreferrer"},Hn=e("h5",{id:"atom-styleguide",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#atom-styleguide","aria-hidden":"true"},"#"),n(" Atom Styleguide")],-1),Bn={href:"https://github.com/atom/styleguide",target:"_blank",rel:"noopener noreferrer"},Jn=t('<p>To open the Styleguide, open the command palette with <kbd class="platform-mac">Cmd+Shift+P</kbd><kbd class="platform-windows platform-linux">Ctrl+Shift+P</kbd> and search for &quot;styleguide&quot;, or use the shortcut <kbd class="platform-mac">Cmd+Ctrl+Shift+G</kbd><kbd class="platform-windows platform-linux">Ctrl+Shift+G</kbd>.</p><p><img src="'+y+'" alt="Style Guide"></p><h5 id="side-by-side" tabindex="-1"><a class="header-anchor" href="#side-by-side" aria-hidden="true">#</a> Side by side</h5><p>Sometimes when creating a theme (or package) things can go wrong and the editor becomes un-usable. E.g. if the text and background have the same color or something gets pushed out of sight. To avoid having to open Atom in &quot;normal&quot; mode to fix the issue, it&#39;s advised to open <strong>two</strong> Atom windows. One for making changes and one in Dev Mode to see the changes getting applied.</p><p><img src="'+w+'" alt="Side by side screenshot"></p><blockquote><p>Make changes on the <strong>left</strong>, see the changes getting applied in &quot;Dev Mode&quot; on the <strong>right</strong>.</p></blockquote><p>Now if you mess up something, only the window in &quot;Dev Mode&quot; will be affected and you can easily correct the mistake in your &quot;normal&quot; window.</p><h4 id="publish-your-theme" tabindex="-1"><a class="header-anchor" href="#publish-your-theme" aria-hidden="true">#</a> Publish your theme</h4><p>Once you&#39;re happy with your theme and would like to share it with other Atom users, it&#39;s time to publish it. \u{1F389}</p>',9),Kn=e("h3",{id:"creating-a-grammar",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#creating-a-grammar","aria-hidden":"true"},"#"),n(" Creating a Grammar")],-1),Xn={href:"http://tree-sitter.github.io/tree-sitter",target:"_blank",rel:"noopener noreferrer"},Zn={href:"https://en.wikipedia.org/wiki/Abstract_syntax_tree",target:"_blank",rel:"noopener noreferrer"},Qn=e("em",null,"syntax trees",-1),ea=t('<p>This syntax tree gives Atom a comprehensive understanding of the structure of your code, which has several benefits:</p><ol><li>Syntax highlighting will not break because of formatting changes.</li><li>Code folding will work regardless of how your code is indented.</li><li>Editor features can operate on the syntax tree. For instance, the <code>Select Larger Syntax Node</code> and <code>Select Smaller Syntax Node</code> allow you to select conceptually larger and smaller chunks of your code.</li><li>Community packages can use the syntax tree to manipulate code intelligently.</li></ol><p>Tree-sitter grammars are relatively new. Many languages in Atom are still supported by <a href="./creating-a-legacy-textmate-grammar">TextMate grammars</a>, though we intend to phase these out over time.</p><p>If you&#39;re adding support for a new language, you&#39;re in the right place!</p><h4 id="getting-started-1" tabindex="-1"><a class="header-anchor" href="#getting-started-1" aria-hidden="true">#</a> Getting Started</h4><p>There are two components required to use Tree-sitter in Atom: a <em>parser</em> and a <em>grammar</em> file.</p><h4 id="the-parser" tabindex="-1"><a class="header-anchor" href="#the-parser" aria-hidden="true">#</a> The Parser</h4>',7),na={href:"https://en.wikipedia.org/wiki/Context-free_grammar",target:"_blank",rel:"noopener noreferrer"},aa={href:"http://tree-sitter.github.io/tree-sitter/creating-parsers",target:"_blank",rel:"noopener noreferrer"},sa={href:"https://github.com/tree-sitter",target:"_blank",rel:"noopener noreferrer"},ta={href:"https://npmjs.com",target:"_blank",rel:"noopener noreferrer"},oa=e("code",null,"name",-1),ia=e("code",null,"version",-1),la=e("code",null,"package.json",-1),ca=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tree-sitter-mylanguage&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.0.1&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>then run the command <code>npm publish</code>.</p><h4 id="the-package" tabindex="-1"><a class="header-anchor" href="#the-package" aria-hidden="true">#</a> The Package</h4><p>Once you have a Tree-sitter parser that is available on npm, you can use it in your Atom package. Packages with grammars are, by convention, always named starting with <em>language</em>. You&#39;ll need a folder with a <code>package.json</code>, a <code>grammars</code> subdirectory, and a single <code>json</code> or <code>cson</code> file in the <code>grammars</code> directory, which can be named anything.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>language-mylanguage
\u251C\u2500\u2500 LICENSE
\u251C\u2500\u2500 README.md
\u251C\u2500\u2500 grammars
\u2502   \u2514\u2500\u2500 mylanguage.cson
\u2514\u2500\u2500 package.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="the-grammar-file" tabindex="-1"><a class="header-anchor" href="#the-grammar-file" aria-hidden="true">#</a> The Grammar File</h4><p>The <code>mylanguage.cson</code> file specifies how Atom should use the parser you created.</p><h4 id="basic-fields" tabindex="-1"><a class="header-anchor" href="#basic-fields" aria-hidden="true">#</a> Basic Fields</h4><p>It starts with some required fields:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token property">name</span><span class="token operator">:</span> <span class="token string">&#39;My Language&#39;</span>
<span class="token property">scopeName</span><span class="token operator">:</span> <span class="token string">&#39;mylanguage&#39;</span>
<span class="token property">type</span><span class="token operator">:</span> <span class="token string">&#39;tree-sitter&#39;</span>
<span class="token property">parser</span><span class="token operator">:</span> <span class="token string">&#39;tree-sitter-mylanguage&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),ra=e("li",null,[e("code",null,"scopeName"),n(" - A unique, stable identifier for the language. Atom users will use this in configuration files if they want to specify custom configuration based on the language.")],-1),pa=e("li",null,[e("code",null,"name"),n(" - A human readable name for the language.")],-1),da=e("code",null,"parser",-1),ua={href:"https://nodejs.org/api/modules.html#modules_require",target:"_blank",rel:"noopener noreferrer"},ha=e("code",null,"require()",-1),ma=e("li",null,[e("code",null,"type"),n(" - This should have the value "),e("code",null,"tree-sitter"),n(" to indicate to Atom that this is a Tree-sitter grammar and not a "),e("a",{href:"./creating-a-legacy-textmate-grammar"},"TextMate grammar"),n(".")],-1),ga=t(`<h4 id="language-recognition" tabindex="-1"><a class="header-anchor" href="#language-recognition" aria-hidden="true">#</a> Language Recognition</h4><p>Next, the file should contain some fields that indicate to Atom <em>when</em> this language should be used. These fields are all optional.</p><ul><li><code>fileTypes</code> - An array of filename <em>suffixes</em>. The grammar will be used for files whose names end with one of these suffixes. Note that the suffix may be an entire filename.</li><li><code>firstLineRegex</code> - A regex pattern that will be tested against the first line of the file. The grammar will be used if this regex matches.</li><li><code>contentRegex</code> - A regex pattern that will be tested against the contents of the file in order to break ties in cases where <em>multiple</em> grammars matched the file using the above two criteria. If the <code>contentRegex</code> matches, this grammar will be preferred over another grammar with no <code>contentRegex</code>. If the <code>contentRegex</code> does <em>not</em> match, a grammar with no <code>contentRegex</code> will be preferred over this one.</li></ul><h4 id="syntax-highlighting" tabindex="-1"><a class="header-anchor" href="#syntax-highlighting" aria-hidden="true">#</a> Syntax Highlighting</h4><p>The HTML classes that Atom uses for syntax highlighting do not correspond directly to nodes in the syntax tree. Instead, Tree-sitter grammar files specify <em>scope mappings</em> that specify which classes should be applied to which syntax nodes. The <code>scopes</code> object controls these scope mappings. Its keys are CSS selectors that select nodes in the syntax tree. Its values can be of several different types.</p><p>Here is a simple example:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token property">scopes</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;call_expression &gt; identifier&#39;</span><span class="token operator">:</span> <span class="token string">&#39;entity.name.function&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This entry means that, in the syntax tree, any <code>identifier</code> node whose parent is a <code>call_expression</code> should be highlighted using three classes: <code>syntax--entity</code>, <code>syntax--name</code>, and <code>syntax--function</code>.</p>`,8),ka={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Child_selectors",target:"_blank",rel:"noopener noreferrer"},va=e("code",null,">",-1),ba=e("code",null,"'call_expression identifier'",-1),fa=e("code",null,"identifier",-1),ya=e("code",null,"call_expression",-1),wa=t(`<h5 id="advanced-selectors" tabindex="-1"><a class="header-anchor" href="#advanced-selectors" aria-hidden="true">#</a> Advanced Selectors</h5><p>The keys of the <code>scopes</code> object can also contain <em>multiple</em> CSS selectors, separated by commas, similar to CSS files. The triple-quote syntax in CSON makes it convenient to write keys like this on multiple lines:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token property">scopes</span><span class="token operator">:</span>
  <span class="token multiline-string string">&#39;&#39;&#39;
  function_declaration &gt; identifier,
  call_expression &gt; identifier,
  call_expression &gt; field_expression &gt; field_identifier
  &#39;&#39;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;entity.name.function&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),_a={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-child",target:"_blank",rel:"noopener noreferrer"},xa=e("code",null,":nth-child",-1),qa=e("code",null,"identifier",-1),Aa=e("code",null,"singleton_method",-1),Ta=t(`<div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token property">scopes</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;singleton_method &gt; identifier:nth-child(3)&#39;</span><span class="token operator">:</span> <span class="token string">&#39;entity.name.function&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ca=e("em",null,"anonymous",-1),Sa=e("code",null,"(",-1),Ia=e("code",null,":",-1),ja={href:"http://tree-sitter.github.io/tree-sitter/using-parsers#named-vs-anonymous-nodes",target:"_blank",rel:"noopener noreferrer"},Pa=t('<div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token property">scopes</span><span class="token operator">:</span>\n  <span class="token multiline-string string">&#39;&#39;&#39;\n    &quot;*&quot;,\n    &quot;/&quot;,\n    &quot;+&quot;,\n    &quot;-&quot;\n  &#39;&#39;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;keyword.operator&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="text-based-mappings" tabindex="-1"><a class="header-anchor" href="#text-based-mappings" aria-hidden="true">#</a> Text-based Mappings</h5><p>You can also apply different classes to a syntax node based on its text. Here are some examples:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token property">scopes</span><span class="token operator">:</span>\n\n  <span class="token comment"># Apply the classes `syntax--builtin` and `syntax--variable` to all</span>\n  <span class="token comment"># `identifier` nodes whose text is `require`.</span>\n  <span class="token string-property property">&#39;identifier&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">exact</span><span class="token operator">:</span> <span class="token string">&#39;require&#39;</span><span class="token punctuation">,</span> <span class="token property">scopes</span><span class="token operator">:</span> <span class="token string">&#39;builtin.variable&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token comment"># Apply the classes `syntax--type` and `syntax--integer` to all</span>\n  <span class="token comment"># `primitive_type` nodes whose text starts with `int` or `uint`.</span>\n  <span class="token string-property property">&#39;primitive_type&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">match</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^u?int</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token property">scopes</span><span class="token operator">:</span> <span class="token string">&#39;type.integer&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token comment"># Apply the classes `syntax--builtin`, `syntax--class`, and</span>\n  <span class="token comment"># `syntax--name` to `constant` nodes with the text `Array`,</span>\n  <span class="token comment"># `Hash` and `String`. For all other `constant` nodes, just</span>\n  <span class="token comment"># apply the classes `syntax--class` and `syntax--name`.</span>\n  <span class="token string-property property">&#39;constant&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span><span class="token property">match</span><span class="token operator">:</span> <span class="token string">&#39;^(Array|Hash|String)$&#39;</span><span class="token punctuation">,</span> <span class="token property">scopes</span><span class="token operator">:</span> <span class="token string">&#39;builtin.class.name&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;class.name&#39;</span>\n  <span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In total there are four types of values that can be associated with selectors in <code>scopes</code>:</p><ul><li>Strings - Each class name in the dot-separated string will be prefixed with <code>syntax--</code> and applied to the selected node.</li><li>Objects with the keys <code>exact</code> and <code>scopes</code> - If the node&#39;s text equals the <code>exact</code> string, the <code>scopes</code> string will be used as described above.</li><li>Objects with the keys <code>match</code> and <code>scopes</code> - If the node&#39;s text matches the <code>match</code> regex pattern, the <code>scopes</code> string will be used as described above.</li><li>Arrays - The elements of the array will be processed from beginning to end. The first element that matches the selected node will be used as describe above.</li></ul><h5 id="specificity" tabindex="-1"><a class="header-anchor" href="#specificity" aria-hidden="true">#</a> Specificity</h5>',7),Ra=e("code",null,"scopes",-1),Na={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity",target:"_blank",rel:"noopener noreferrer"},Ea=e("code",null,"exact",-1),Ua=e("code",null,"match",-1),Ma=e("em",null,"not",-1),Wa=e("code",null,"exact",-1),Fa=e("code",null,"match",-1),Da=t(`<div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token property">scopes</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;call_expression &gt; identifier&#39;</span><span class="token operator">:</span> <span class="token string">&#39;entity.name.function&#39;</span>

  <span class="token comment"># If we did not include the second selector here, then this rule</span>
  <span class="token comment"># would not apply to identifiers inside of call_expressions,</span>
  <span class="token comment"># because the selector \`call_expression &gt; identifier\` is more</span>
  <span class="token comment"># specific than the selector \`identifier\`.</span>
  <span class="token string-property property">&#39;identifier, call_expression &gt; identifier&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token property">exact</span><span class="token operator">:</span> <span class="token string">&#39;require&#39;</span><span class="token punctuation">,</span> <span class="token property">scopes</span><span class="token operator">:</span> <span class="token string">&#39;builtin.variable&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token property">match</span><span class="token operator">:</span> <span class="token string">&#39;^[A-Z]&#39;</span><span class="token punctuation">,</span> <span class="token property">scopes</span><span class="token operator">:</span> <span class="token string">&#39;constructor&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="language-injection" tabindex="-1"><a class="header-anchor" href="#language-injection" aria-hidden="true">#</a> Language Injection</h4><p>Sometimes, a source file can contain code written in several different languages. Tree-sitter grammars support this situation using a two-part process called <em>language injection</em>. First, an &#39;outer&#39; language must define an <em>injection point</em> - a set of syntax nodes whose text can be parsed using a different language, along with some logic for guessing the <em>name</em> of the other language that should be used. Second, an &#39;inner&#39; language must define an <code>injectionRegex</code> - a regex pattern that will be tested against the language name provided by the injection point.</p>`,3),La={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates",target:"_blank",rel:"noopener noreferrer"},Oa=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// HTML in a template literal</span>
<span class="token keyword">const</span> htmlContent <span class="token operator">=</span> html<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>tree-sitter-javascript</code> parser parses this tagged template literal as a <code>call_expression</code> with two children: an <code>identifier</code> and a <code>template_literal</code>:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>(call_expression
  (identifier)
  (template_literal
    (interpolation
      (identifier))))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here is an injection point that would allow syntax highlighting inside of template literals:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>atom<span class="token punctuation">.</span>grammars<span class="token punctuation">.</span><span class="token function">addInjectionPoint</span><span class="token punctuation">(</span><span class="token string">&quot;source.js&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;call_expression&quot;</span><span class="token punctuation">,</span>

	<span class="token function">language</span><span class="token punctuation">(</span><span class="token parameter">callExpression</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> <span class="token punctuation">{</span> firstChild <span class="token punctuation">}</span> <span class="token operator">=</span> callExpression<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&quot;identifier&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> firstChild<span class="token punctuation">.</span>text<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token function">content</span><span class="token punctuation">(</span><span class="token parameter">callExpression</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> <span class="token punctuation">{</span> lastChild <span class="token punctuation">}</span> <span class="token operator">=</span> callExpression<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>lastChild<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&quot;template_string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> lastChild<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>language</code> callback would then be called with every <code>call_expression</code> node in the syntax tree. In the example above, it would retrieve the first child of the <code>call_expression</code>, which is an <code>identifier</code> with the name &quot;html&quot;. The callback would then return the string &quot;html&quot;.</p><p>The <code>content</code> callback would then be called with the same <code>call_expression</code> node and return the <code>template_string</code> node within the <code>call_expression</code> node.</p><p>In order to parse the HTML within the template string, the HTML grammar file would need to specify an <code>injectionRegex</code>:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token property">injectionRegex</span><span class="token operator">:</span> <span class="token string">&#39;html|HTML&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="code-folding" tabindex="-1"><a class="header-anchor" href="#code-folding" aria-hidden="true">#</a> Code Folding</h4><p>The next field in the grammar file, <code>folds</code>, controls code folding. Its value is an array of <em>fold pattern</em> objects. Fold patterns are used to decide whether or not a syntax node can be folded, and if so, where the fold should start and end. Here are some example fold patterns:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token property">folds</span><span class="token operator">:</span> <span class="token punctuation">[</span>

  <span class="token comment"># All \`comment\` nodes are foldable. By default, the fold starts at</span>
  <span class="token comment"># the end of the node&#39;s first line, and ends at the beginning</span>
  <span class="token comment"># of the node&#39;s last line.</span>
  <span class="token punctuation">{</span>
    <span class="token property">type</span><span class="token operator">:</span> <span class="token string">&#39;comment&#39;</span>
  <span class="token punctuation">}</span>

  <span class="token comment"># \`if_statement\` nodes are foldable if they contain an anonymous</span>
  <span class="token comment"># &quot;then&quot; token and either an \`elif_clause\` or \`else_clause\` node.</span>
  <span class="token comment"># The fold starts at the end of the &quot;then&quot; token and ends at the</span>
  <span class="token comment"># \`elif_clause\` or \`else_clause\`.</span>
  <span class="token punctuation">{</span>
    <span class="token property">type</span><span class="token operator">:</span> <span class="token string">&#39;if_statement&#39;</span><span class="token punctuation">,</span>
    <span class="token property">start</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">type</span><span class="token operator">:</span> <span class="token string">&#39;&quot;then&quot;&#39;</span><span class="token punctuation">}</span>
    <span class="token property">end</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">type</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;elif_clause&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;else_clause&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment"># Any node that starts with an anonymous &quot;(&quot; token and ends with</span>
  <span class="token comment"># an anonymous &quot;)&quot; token is foldable. The fold starts after the</span>
  <span class="token comment"># &quot;(&quot; and ends before the &quot;)&quot;.</span>
  <span class="token punctuation">{</span>
    <span class="token property">start</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">type</span><span class="token operator">:</span> <span class="token string">&#39;&quot;(&quot;&#39;</span><span class="token punctuation">,</span> <span class="token property">index</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">end</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">type</span><span class="token operator">:</span> <span class="token string">&#39;&quot;)&quot;&#39;</span><span class="token punctuation">,</span> <span class="token property">index</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Fold patterns can have one or more of the following fields:</p><ul><li><code>type</code> - A string or array of strings. In order to be foldable according to this pattern, a syntax node&#39;s type must match one of these strings.</li><li><code>start</code> - An object that is used to identify a <em>child</em> node after which the fold should start. The object can have one or both of the following fields: <ul><li><code>type</code> - A string or array of strings. To start a fold, a child node&#39;s type must match one of these strings.</li><li><code>index</code> - a number that&#39;s used to select a specific child according to its index. Negative values are interpreted as indices relative the last child, so that <code>-1</code> means the last child.</li></ul></li><li><code>end</code> - An object that is used to identify a <em>child</em> node before which the fold should end. It has the same structure as the <code>start</code> object.</li></ul><h4 id="comments" tabindex="-1"><a class="header-anchor" href="#comments" aria-hidden="true">#</a> Comments</h4><p>The last field in the grammar file, <code>comments</code>, controls the behavior of Atom&#39;s <code>Editor: Toggle Line Comments</code> command. Its value is an object with a <code>start</code> field and an optional <code>end</code> field. The start field is a string that should be prepended to or removed from lines in order to comment or un-comment them.</p><p>In JavaScript, it looks like this:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token property">comments</span><span class="token operator">:</span>
  <span class="token property">start</span><span class="token operator">:</span> <span class="token string">&#39;// &#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>end</code> field should be used for languages that only support block comments, not line comments. If present, it will be appended to or removed from the end of the last selected line in order to comment or un-comment the selection.</p><p>In CSS, it would look like this:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token property">comments</span><span class="token operator">:</span>
  <span class="token property">start</span><span class="token operator">:</span> <span class="token string">&#39;/* &#39;</span>
  <span class="token property">end</span><span class="token operator">:</span> <span class="token string">&#39; */&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="example-packages" tabindex="-1"><a class="header-anchor" href="#example-packages" aria-hidden="true">#</a> Example Packages</h4><p>More examples of all of these features can be found in the Tree-sitter grammars bundled with Atom:</p>`,23),za={href:"https://github.com/atom/language-shellscript",target:"_blank",rel:"noopener noreferrer"},Ya={href:"https://github.com/atom/language-c",target:"_blank",rel:"noopener noreferrer"},Va={href:"https://github.com/atom/language-go",target:"_blank",rel:"noopener noreferrer"},$a={href:"https://github.com/atom/language-html",target:"_blank",rel:"noopener noreferrer"},Ga={href:"https://github.com/atom/language-javascript",target:"_blank",rel:"noopener noreferrer"},Ha={href:"https://github.com/atom/language-python",target:"_blank",rel:"noopener noreferrer"},Ba={href:"https://github.com/atom/language-ruby",target:"_blank",rel:"noopener noreferrer"},Ja={href:"https://github.com/atom/language-typescript",target:"_blank",rel:"noopener noreferrer"},Ka=t('<h3 id="creating-a-legacy-textmate-grammar" tabindex="-1"><a class="header-anchor" href="#creating-a-legacy-textmate-grammar" aria-hidden="true">#</a> Creating a Legacy TextMate Grammar</h3><p>Atom&#39;s syntax highlighting can be powered by two types of grammars. If you&#39;re adding support for a new language, the preferred way is to <a href="./creating-a-grammar">create a Tree-sitter grammar</a>. Tree-sitter grammars have better performance and provide support for more editor features, such as the <code>Select Larger Syntax Node</code> command.</p><p>This section describes the Atom&#39;s legacy support for TextMate grammars.</p><p>TextMate grammars are supported by several popular text editors. They provide a set of <em>regex</em> (regular expression) patterns which are assigned <em>scopes</em>. These scopes are then turned into the CSS classes that you can target in syntax themes.</p><div class="custom-container note"><p class="custom-container-title">Note</p><p><strong>Note:</strong> This tutorial is a work in progress.</p></div><h4 id="getting-started-2" tabindex="-1"><a class="header-anchor" href="#getting-started-2" aria-hidden="true">#</a> Getting Started</h4><p>TextMate Grammars depend heavily on regexes, and you should be comfortable with interpreting and writing regexes before continuing. Note that Atom uses the Oniguruma engine, which is very similar to the PCRE or Perl regex engines. Here are some resources to help you out:</p><ul><li>https://www.regular-expressions.info/tutorial.html provides a comprehensive regex tutorial</li><li>https://www.rexegg.com/regex-quickstart.html contains a cheat sheet for various regex expressions</li><li>https://regex101.com/ or https://regexr.com/ allows live prototyping</li><li>https://github.com/kkos/oniguruma/blob/master/doc/RE the docs for the Oniguruma regex engine</li></ul>',8),Xa={href:"https://github.com/bevry/cson#what-is-cson",target:"_blank",rel:"noopener noreferrer"},Za={href:"https://www.json.org/",target:"_blank",rel:"noopener noreferrer"},Qa=t('<h4 id="create-the-package-1" tabindex="-1"><a class="header-anchor" href="#create-the-package-1" aria-hidden="true">#</a> Create the Package</h4><p>To get started, press <kbd class="platform-mac">Cmd+Shift+P</kbd><kbd class="platform-windows platform-linux">Ctrl+Shift+P</kbd> and start typing &quot;Generate Package&quot; to generate a new grammar package. Select &quot;Package Generator: Generate Package,&quot; and you&#39;ll be asked for the path where your package will be created. Let&#39;s call ours <code>language-flight-manual</code>.</p><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>Tip:</strong> Grammar packages should start with <em>language-</em>.</p></div>',3),es=e("code",null,"keymaps",-1),ns=e("code",null,"lib",-1),as=e("code",null,"menus",-1),ss=e("code",null,"styles",-1),ts=e("code",null,"package.json",-1),os=e("code",null,"activationCommands",-1),is=e("code",null,"grammars",-1),ls=e("code",null,"flight-manual.cson",-1),cs={href:"https://gist.github.com/DamnedScholar/622926bcd222eb1ddc483d12103fd315",target:"_blank",rel:"noopener noreferrer"},rs=t(`<p><code>scopeName</code> is the root <em>scope</em> of your package. This should generally describe what language your grammar package is highlighting; for example, <code>language-javascript</code>&#39;s <code>scopeName</code> is <code>source.js</code> and <code>language-html</code>&#39;s is <code>text.html.basic</code>. Name it <code>source.flight-manual</code> for now.</p><p><code>name</code> is the user-friendly name that is displayed in places like the status bar or the grammar selector. Again, this name should describe what the grammar package is highlighting. Rename it to <code>Flight Manual</code>.</p><p><code>fileTypes</code> is an array of filetypes that <code>language-flight-manual</code> should highlight. We&#39;re interested in highlighting the Flight Manual&#39;s Markdown files, so add the <code>md</code> extension to the list and remove the others.</p><p><code>patterns</code> contains the array of regex patterns that will determine how the file is tokenized.</p><h4 id="adding-patterns" tabindex="-1"><a class="header-anchor" href="#adding-patterns" aria-hidden="true">#</a> Adding Patterns</h4><p>To start, let&#39;s add a basic pattern to tokenize the words <code>Flight Manual</code> whenever they show up. Your regex should look like <code>\\bFlight Manual\\b</code>. Here&#39;s what your <code>patterns</code> block should look like:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;patterns&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;match&#39;</span><span class="token operator">:</span> <span class="token string">&#39;\\\\bFlight Manual\\\\b&#39;</span>
    <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;entity.other.flight-manual&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),ps=e("code",null,"match",-1),ds=e("code",null,"name",-1),us={href:"https://manual.macromates.com/en/language_grammars",target:"_blank",rel:"noopener noreferrer"},hs=t(`<div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>Tip:</strong> All scopes should end with the portion of the root <code>scopeName</code> after the leading <code>source</code> or <code>text</code>. In our case, all scopes should end with <code>flight-manual</code>.</p></div><div class="custom-container note"><p class="custom-container-title">Note</p><p><strong>Note:</strong> Astute readers may have noticed that the <code>\\b</code> was changed to <code>\\\\b</code> with two backslashes and not one. This is because CSON processes the regex string before handing it to Oniguruma, so all backslashes need to be escaped twice.</p></div><p>But what if we wanted to apply different scopes to <code>Flight</code> and <code>Manual</code>? This is possible by adding capture groups to the regex and then referencing those capture groups in a new <code>capture</code> property. For example:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;match&#39;</span><span class="token operator">:</span> <span class="token string">&#39;\\\\b(Flight) (Manual)\\\\b&#39;</span>
<span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;entity.other.flight-manual&#39;</span>
<span class="token string-property property">&#39;captures&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;1&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;keyword.other.flight.flight-manual&#39;</span>
  <span class="token string-property property">&#39;2&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;keyword.other.manual.flight-manual&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will assign the scope <code>keyword.other.flight.flight-manual</code> to <code>Flight</code>, <code>keyword.other.manual.flight-manual</code> to <code>Manual</code>, and <code>entity.other.flight-manual</code> to the overarching <code>Flight Manual</code>.</p><h4 id="begin-end-patterns" tabindex="-1"><a class="header-anchor" href="#begin-end-patterns" aria-hidden="true">#</a> Begin/End Patterns</h4><p>Now let&#39;s say we want to tokenize the <code>::: note Note</code> blocks that occur in Flight Manual files. Our previous two examples used <code>match</code>, but one limit of <code>match</code> is that it can only match single lines. <code>::: note Note</code> blocks, on the other hand, can span multiple lines. For these cases, you can use the <code>begin</code>/<code>end</code> keys. Once the regex in the <code>begin</code> key is matched, tokenization will continue until the <code>end</code> pattern is reached.</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;begin&#39;</span><span class="token operator">:</span> <span class="token string">&#39;({{)(#note)(}})&#39;</span>
<span class="token string-property property">&#39;beginCaptures&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;0&#39;</span><span class="token operator">:</span> <span class="token comment"># The 0 capture contains the entire match</span>
    <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;meta.block.start.flight-manual&#39;</span>
  <span class="token string-property property">&#39;1&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;punctuation.definition.block.flight-manual&#39;</span>
  <span class="token string-property property">&#39;2&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;keyword.note.flight-manual&#39;</span>
  <span class="token string-property property">&#39;3&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;punctuation.definition.block.flight-manual&#39;</span>
<span class="token string-property property">&#39;end&#39;</span><span class="token operator">:</span> <span class="token string">&#39;({{)(/note)(}})&#39;</span>
<span class="token string-property property">&#39;endCaptures&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;0&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;meta.block.end.flight-manual&#39;</span>
  <span class="token string-property property">&#39;1&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;punctuation.definition.block.flight-manual&#39;</span>
  <span class="token string-property property">&#39;2&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;keyword.note.flight-manual&#39;</span>
  <span class="token string-property property">&#39;3&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;punctuation.definition.block.flight-manual&#39;</span>
<span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;meta.block.note.flight-manual&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>Tip:</strong> Get into the habit of providing punctuation scopes early on. It&#39;s much less effort than having to go back and rewriting all your patterns to support punctuation scopes when your grammar starts to get a bit longer!</p></div><p>Awesome, we have our first multiline pattern! However, if you&#39;ve been following along and playing around in your own <code>.md</code> file, you may have noticed that <code>Flight Manual</code> doesn&#39;t receive any scopes inside a note block. A begin/end block is essentially a subgrammar of its own: once it starts matching, it will only match its own subpatterns until the end pattern is reached. Since we haven&#39;t defined any subpatterns, then clearly nothing will be matched inside of a note block. Let&#39;s fix that!</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;begin&#39;</span><span class="token operator">:</span> <span class="token string">&#39;({{)(#note)(}})&#39;</span>
<span class="token string-property property">&#39;beginCaptures&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;0&#39;</span><span class="token operator">:</span> <span class="token comment"># The 0 capture contains the entire match</span>
    <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;meta.block.start.flight-manual&#39;</span>
  <span class="token string-property property">&#39;1&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;punctuation.definition.block.flight-manual&#39;</span>
  <span class="token string-property property">&#39;2&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;keyword.note.flight-manual&#39;</span>
  <span class="token string-property property">&#39;3&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;punctuation.definition.block.flight-manual&#39;</span>
<span class="token string-property property">&#39;end&#39;</span><span class="token operator">:</span> <span class="token string">&#39;({{)(/note)(}})&#39;</span>
<span class="token string-property property">&#39;endCaptures&#39;</span><span class="token operator">:</span>
  <span class="token string-property property">&#39;0&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;meta.block.end.flight-manual&#39;</span>
  <span class="token string-property property">&#39;1&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;punctuation.definition.block.flight-manual&#39;</span>
  <span class="token string-property property">&#39;2&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;keyword.note.flight-manual&#39;</span>
  <span class="token string-property property">&#39;3&#39;</span><span class="token operator">:</span>
    <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;punctuation.definition.block.flight-manual&#39;</span>
<span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;meta.block.note.flight-manual&#39;</span>
<span class="token string-property property">&#39;patterns&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;match&#39;</span><span class="token operator">:</span> <span class="token string">&#39;\\\\b(Flight) (Manual)\\\\b&#39;</span>
    <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;entity.other.flight-manual&#39;</span>
    <span class="token string-property property">&#39;captures&#39;</span><span class="token operator">:</span>
      <span class="token string-property property">&#39;1&#39;</span><span class="token operator">:</span>
        <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;keyword.other.flight.flight-manual&#39;</span>
      <span class="token string-property property">&#39;2&#39;</span><span class="token operator">:</span>
        <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;keyword.other.manual.flight-manual&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There. With the patterns block, <code>Flight Manual</code> should now receive the proper scopes.</p><h4 id="repositories-and-the-include-keyword-or-how-to-avoid-duplication" tabindex="-1"><a class="header-anchor" href="#repositories-and-the-include-keyword-or-how-to-avoid-duplication" aria-hidden="true">#</a> Repositories and the Include keyword, or how to avoid duplication</h4><p>At this point, note blocks are looking pretty nice, as is the <code>Flight Manual</code> keyword, but the rest of the file is noticeably lacking any form of Markdown syntax highlighting. Is there a way to include the GitHub-Flavored Markdown grammar without copying and pasting everything over? This is where the <code>include</code> keyword comes in. <code>include</code> allows you to <em>include</em> other patterns, even from other grammars! <code>language-gfm</code>&#39;s <code>scopeName</code> is <code>source.gfm</code>, so let&#39;s include that. Our <code>patterns</code> block should now look like the following:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;patterns&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;include&#39;</span><span class="token operator">:</span> <span class="token string">&#39;source.gfm&#39;</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">{</span>
    <span class="token comment"># Flight Manual pattern</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">{</span>
    <span class="token comment"># Note begin/end pattern</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, including <code>source.gfm</code> has led to another problem: note blocks still don&#39;t have any Markdown highlighting! The quick fix would be to add the include pattern to the note&#39;s pattern block as well, but now we&#39;re duplicating two patterns. You can imagine that as this grammar grows it&#39;ll quickly become inefficient to keep copying each new global pattern over to the <code>note</code> pattern as well. Therefore, <code>include</code> helpfully recognizes the special <code>$self</code> scope. <code>$self</code> automatically includes all the top-level patterns of the current grammar. The <code>note</code> block can then be simplified to the following:</p><div class="language-coffee ext-coffee line-numbers-mode"><pre class="language-coffee"><code><span class="token string-property property">&#39;begin&#39;</span><span class="token operator">:</span> <span class="token string">&#39;({{)(#note)(}})&#39;</span>
<span class="token comment"># beginCaptures</span>
<span class="token string-property property">&#39;end&#39;</span><span class="token operator">:</span> <span class="token string">&#39;({{)(/note)(}})&#39;</span>
<span class="token comment"># endCaptures</span>
<span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;meta.block.note.flight-manual&#39;</span>
<span class="token string-property property">&#39;patterns&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;include&#39;</span><span class="token operator">:</span> <span class="token string">&#39;$self&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="where-to-go-from-here" tabindex="-1"><a class="header-anchor" href="#where-to-go-from-here" aria-hidden="true">#</a> Where to Go from Here</h4><p>There are several good resources out there that help when writing a grammar. The following is a list of some particularly useful ones (some have been linked to in the sections above as well).</p>`,19),ms={href:"https://gist.github.com/DamnedScholar/622926bcd222eb1ddc483d12103fd315",target:"_blank",rel:"noopener noreferrer"},gs={href:"https://gist.github.com/Aerijo/b8c82d647db783187804e86fa0a604a1",target:"_blank",rel:"noopener noreferrer"},ks=e("li",null,"http://www.apeth.com/nonblog/stories/textmatebundle.html. A blog of a programmer's experience writing a grammar package for TextMate.",-1),vs={href:"https://github.com/kkos/oniguruma/blob/master/doc/RE",target:"_blank",rel:"noopener noreferrer"},bs={href:"http://manual.macromates.com/en/language_grammars.html",target:"_blank",rel:"noopener noreferrer"},fs={href:"https://github.com/atom/first-mate",target:"_blank",rel:"noopener noreferrer"},ys=e("code",null,"first-mate",-1),ws={href:"https://github.com/atom/language-python",target:"_blank",rel:"noopener noreferrer"},_s={href:"https://github.com/atom/language-javascript",target:"_blank",rel:"noopener noreferrer"},xs={href:"https://github.com/atom/language-html",target:"_blank",rel:"noopener noreferrer"},qs={href:"https://github.com/atom?utf8=%E2%9C%93&q=language&type=source&language=",target:"_blank",rel:"noopener noreferrer"},As=e("h3",{id:"publishing",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#publishing","aria-hidden":"true"},"#"),n(" Publishing")],-1),Ts=e("code",null,"apm",-1),Cs=e("code",null,"apm",-1),Ss=e("h4",{id:"prepare-your-package",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#prepare-your-package","aria-hidden":"true"},"#"),n(" Prepare Your Package")],-1),Is=e("p",null,"There are a few things you should double check before publishing:",-1),js=t("<li>Your <code>package.json</code> file has <code>name</code>, <code>description</code>, and <code>repository</code> fields.</li><li>Your <code>package.json</code> file has a <code>version</code> field with a value of <code>&quot;0.0.0&quot;</code>.</li><li>Your <code>package.json</code> file has an <code>engines</code> field that contains an entry for Atom such as: <code>&quot;engines&quot;: {&quot;atom&quot;: &quot;&gt;=1.0.0 &lt;2.0.0&quot;}</code>.</li><li>Your package has a <code>README.md</code> file at the root.</li><li>Your <code>repository</code> URL in the <code>package.json</code> file is the same as the URL of your repository.</li>",5),Ps={href:"https://github.com",target:"_blank",rel:"noopener noreferrer"},Rs={href:"https://help.github.com/articles/importing-a-git-repository-using-the-command-line/",target:"_blank",rel:"noopener noreferrer"},Ns=e("h4",{id:"publish-your-package",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#publish-your-package","aria-hidden":"true"},"#"),n(" Publish Your Package")],-1),Es={href:"https://atom.io/packages",target:"_blank",rel:"noopener noreferrer"},Us=e("code",null,"https://atom.io/packages/your-package-name",-1),Ms=e("p",null,[n("Now let's review what the "),e("code",null,"apm publish"),n(" command does:")],-1),Ws=e("li",null,"Registers the package name on atom.io if it is being published for the first time.",-1),Fs=e("li",null,[n("Updates the "),e("code",null,"version"),n(" field in the "),e("code",null,"package.json"),n(" file and commits it.")],-1),Ds={href:"https://git-scm.com/book/en/Git-Basics-Tagging",target:"_blank",rel:"noopener noreferrer"},Ls=e("li",null,"Pushes the tag and current branch up to GitHub.",-1),Os=e("li",null,"Updates atom.io with the new version being published.",-1),zs=t(`<p>Now run the following commands to publish your package:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ cd path-to-your-package
$ apm publish minor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Ys=e("code",null,"apm publish",-1),Vs={href:"https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/",target:"_blank",rel:"noopener noreferrer"},$s={href:"https://en.wikipedia.org/wiki/Keychain_(Apple)",target:"_blank",rel:"noopener noreferrer"},Gs=t(`<p>Your package is now published and available on atom.io. Head on over to <code>https://atom.io/packages/your-package-name</code> to see your package&#39;s page.</p><p>With <code>apm publish</code>, you can bump the version and publish by using</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ apm publish &lt;em&gt;version-type&lt;/em&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>where <code>version-type</code> can be <code>major</code>, <code>minor</code> and <code>patch</code>.</p><p>The <code>major</code> option to the publish command tells apm to increment the first number of the version before publishing so the published version will be <code>1.0.0</code> and the Git tag created will be <code>v1.0.0</code>.</p><p>The <code>minor</code> option to the publish command tells apm to increment the second number of the version before publishing so the published version will be <code>0.1.0</code> and the Git tag created will be <code>v0.1.0</code>.</p><p>The <code>patch</code> option to the publish command tells apm to increment the third number of the version before publishing so the published version will be <code>0.0.1</code> and the Git tag created will be <code>v0.0.1</code>.</p>`,7),Hs=e("code",null,"major",-1),Bs=e("code",null,"minor",-1),Js=e("code",null,"patch",-1),Ks={href:"https://semver.org",target:"_blank",rel:"noopener noreferrer"},Xs=e("p",null,[n("You can also run "),e("code",null,"apm help publish"),n(" to see all the available options and "),e("code",null,"apm help"),n(" to see all the other available commands.")],-1),Zs=e("h3",{id:"iconography",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#iconography","aria-hidden":"true"},"#"),n(" Iconography")],-1),Qs={href:"https://github.com/github/octicons/tree/v4.4.0",target:"_blank",rel:"noopener noreferrer"},et=e("blockquote",null,[e("p",null,[n("NOTE: Some older icons from version "),e("code",null,"2.1.2"),n(" are still kept for backwards compatibility.")])],-1),nt=e("h4",{id:"overview",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overview","aria-hidden":"true"},"#"),n(" Overview")],-1),at=t('<p><img src="'+_+`" alt="Octicons in the Styleguide" title="Octicons in the Styleguide"></p><h4 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h4><p>Octicons can be added with simple CSS classes in your markup. Prefix the icon names with <code>icon icon-</code>.</p><p>As an example, to add a monitor icon (<code>device-desktop</code>), use the <code>icon icon-device-desktop</code> classes:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>icon icon-device-desktop<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="size" tabindex="-1"><a class="header-anchor" href="#size" aria-hidden="true">#</a> Size</h4><p>Octicons look best with a <code>font-size</code> of <code>16px</code>. It&#39;s already used as the default, so you don&#39;t need to worry about it. In case you prefer a different icon size, try to use multiples of 16 (<code>32px</code>, <code>48px</code> etc.) for the sharpest result. Sizes in between are ok too, but might look a bit blurry for icons with straight lines.</p><h4 id="usability" tabindex="-1"><a class="header-anchor" href="#usability" aria-hidden="true">#</a> Usability</h4>`,8),st={href:"https://atom.io/docs/api/latest/TooltipManager",target:"_blank",rel:"noopener noreferrer"},tt=e("code",null,'title="label"',-1),ot=e("h3",{id:"debugging",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#debugging","aria-hidden":"true"},"#"),n(" Debugging")],-1),it={href:"https://github.com/atom/atom/blob/master/CONTRIBUTING.md#submitting-issues",target:"_blank",rel:"noopener noreferrer"},lt=t(`<h4 id="update-to-the-latest-version" tabindex="-1"><a class="header-anchor" href="#update-to-the-latest-version" aria-hidden="true">#</a> Update to the Latest Version</h4><p>You might be running into an issue which was already fixed in a more recent version of Atom than the one you&#39;re using.</p><p>If you&#39;re using a released version, check which version of Atom you&#39;re using:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ atom --version
&gt; Atom    : 1.8.0
&gt; Electron: 0.36.8
&gt; Chrome  : 47.0.2526.110
&gt; Node    : 5.1.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),ct={href:"https://github.com/atom/atom/releases/latest",target:"_blank",rel:"noopener noreferrer"},rt={href:"https://atom.io",target:"_blank",rel:"noopener noreferrer"},pt={href:"https://github.com/atom/atom/releases/latest",target:"_blank",rel:"noopener noreferrer"},dt={href:"https://github.com/atom/about",target:"_blank",rel:"noopener noreferrer"},ut=e("em",null,"Atom > About",-1),ht={href:"https://github.com/atom/about",target:"_blank",rel:"noopener noreferrer"},mt=e("em",null,"Help > About",-1),gt={href:"https://github.com/atom/atom#building",target:"_blank",rel:"noopener noreferrer"},kt=t(`<h4 id="using-safe-mode" tabindex="-1"><a class="header-anchor" href="#using-safe-mode" aria-hidden="true">#</a> Using Safe Mode</h4><p>A large part of Atom&#39;s functionality comes from packages you can install. Atom will also execute the code in your <a href="/hacking-atom/sections/the-init-file">init script</a> on startup. In some cases, these packages and the code in the init script might be causing unexpected behavior, problems, or performance issues.</p><p>To determine if that is happening, start Atom from the terminal in safe mode:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ atom --safe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This starts Atom, but does not load packages from <code>~/.atom/packages</code> or <code>~/.atom/dev/packages</code> and disables loading of your init script. If you can no longer reproduce the problem in safe mode, it&#39;s likely it was caused by one of the packages or the init script.</p><p>If removing or commenting out all content from the init script and starting Atom normally still produces the error, then try figuring out which package is causing trouble. Start Atom normally again and open the Settings View with <kbd class="platform-mac">Cmd+,</kbd><kbd class="platform-windows platform-linux">Ctrl+,</kbd>. Since the Settings View allows you to disable each installed package, you can disable packages one by one until you can no longer reproduce the issue. Restart Atom or reload Atom with <kbd class="platform-mac">Alt+Cmd+Ctrl+L</kbd><kbd class="platform-windows platform-linux">Ctrl+Shift+F5</kbd> after you disable each package to make sure it&#39;s completely gone.</p><p>When you find the problematic package, you can disable or uninstall the package. We strongly recommend creating an issue on the package&#39;s GitHub repository.</p><h4 id="clearing-saved-state" tabindex="-1"><a class="header-anchor" href="#clearing-saved-state" aria-hidden="true">#</a> Clearing Saved State</h4><p>Atom saves a number of things about your environment when you exit in order to restore Atom to the same configuration when you next launch the program. In some cases the state that gets saved can be something undesirable that prevents Atom from working properly. In these cases, you may want to clear the state that Atom has saved.</p><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>:rotating<em>light: <strong>Danger:</strong> Clearing the saved state permanently destroys any state that Atom has saved _across all projects</em>. This includes unsaved changes to files you may have been editing in all projects. This is a destructive action.</p></div><p>Clearing the saved state can be done by opening a terminal and executing:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ atom --clear-window-state
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="reset-to-factory-defaults" tabindex="-1"><a class="header-anchor" href="#reset-to-factory-defaults" aria-hidden="true">#</a> Reset to Factory Defaults</h4><p>In some cases, you may want to reset Atom to &quot;factory defaults&quot;, in other words clear all of your configuration and remove all packages. This can easily be done by opening a terminal and executing:</p>`,14),vt=e("div",{class:"language-command-line ext-command-line line-numbers-mode"},[e("pre",{class:"language-command-line"},[e("code",null,`$ mv ~/.atom ~/.atom-backup
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),bt=e("div",{class:"language-command-line ext-command-line line-numbers-mode"},[e("pre",{class:"language-command-line"},[e("code",null,`$ mv ~/.atom ~/.atom-backup
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),ft=e("div",{class:"language-command-line ext-command-line line-numbers-mode"},[e("pre",{class:"language-command-line"},[e("code",null,`$ rename %USERPROFILE%\\.atom .atom-backup
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),yt=t(`<p>Once that is complete, you can launch Atom as normal. Everything will be just as if you first installed Atom.</p><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>Tip:</strong> The command given above doesn&#39;t delete the old configuration, just puts it somewhere that Atom can&#39;t find it. If there are pieces of the old configuration you want to retrieve, you can find them in the <span class="platform-mac platform-linux"><code>~/.atom-backup</code></span><span class="platform-windows"><code>%USERPROFILE%\\.atom-backup</code></span> directory.</p></div><h4 id="check-for-linked-packages" tabindex="-1"><a class="header-anchor" href="#check-for-linked-packages" aria-hidden="true">#</a> Check for Linked Packages</h4><p>If you develop or contribute to Atom packages, there may be left-over packages linked to your <code>~/.atom/packages</code> or <code>~/.atom/dev/packages</code> directories. You can use the <code>apm links</code> command to list all linked packages:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ apm links
&gt; /Users/octocat/.atom/dev/packages (0)
&gt; \u2514\u2500\u2500 (no links)
&gt; /Users/octocat/.atom/packages (1)
&gt; \u2514\u2500\u2500 color-picker -&gt; /Users/octocat/github/color-picker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can remove links using the <code>apm unlink</code> command:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ apm unlink color-picker
&gt; Unlinking /Users/octocat/.atom/packages/color-picker \u2713
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>See <code>apm links --help</code> and <code>apm unlink --help</code> for more information on these commands.</p><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>Tip:</strong> You can also use <code>apm unlink --all</code> to easily unlink all packages and themes.</p></div><h4 id="check-for-incompatible-packages" tabindex="-1"><a class="header-anchor" href="#check-for-incompatible-packages" aria-hidden="true">#</a> Check for Incompatible Packages</h4>`,10),wt={href:"https://github.com/atom/incompatible-packages",target:"_blank",rel:"noopener noreferrer"},_t=e("p",null,[e("img",{src:x,alt:"Incompatible Packages Status Bar Indicator",title:"Incompatible Packages Status Bar Indicator"})],-1),xt=e("p",null,"If you see this indicator, click it and follow the instructions.",-1),qt=e("h4",{id:"check-atom-and-package-settings",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#check-atom-and-package-settings","aria-hidden":"true"},"#"),n(" Check Atom and Package Settings")],-1),At=e("p",null,"In some cases, unexpected behavior might be caused by settings in Atom or in one of the packages.",-1),Tt={href:"https://github.com/atom/settings-view",target:"_blank",rel:"noopener noreferrer"},Ct=e("kbd",{class:"platform-mac"},"Cmd+,",-1),St=e("kbd",{class:"platform-windows platform-linux"},"Ctrl+,",-1),It=e("span",{class:"platform-mac"},[e("em",null,"Atom > Preferences")],-1),jt=e("span",{class:"platform-windows"},[e("em",null,"File > Preferences")],-1),Pt=e("span",{class:"platform-linux"},[e("em",null,"Edit > Preferences")],-1),Rt={href:"https://github.com/atom/command-palette",target:"_blank",rel:"noopener noreferrer"},Nt=e("p",null,[e("img",{src:q,alt:"Settings View"})],-1),Et=e("p",null,"Some of these options are also available on a per-language basis which means that they may be different for specific languages, for example JavaScript or Python. To check the per-language settings, open the settings for the language package under the Packages tab in the Settings View, for example the language-javascript or language-python package.",-1),Ut={href:"https://atom.io/packages/wrap-guide",target:"_blank",rel:"noopener noreferrer"},Mt={href:"https://atom.io/packages/whitespace",target:"_blank",rel:"noopener noreferrer"},Wt=e("p",null,[e("img",{src:A,alt:"Package Settings"})],-1),Ft=e("h4",{id:"check-your-configuration",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#check-your-configuration","aria-hidden":"true"},"#"),n(" Check Your Configuration")],-1),Dt=e("h4",{id:"check-your-keybindings",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#check-your-keybindings","aria-hidden":"true"},"#"),n(" Check Your Keybindings")],-1),Lt={href:"https://atom.io/packages/keybinding-resolver",target:"_blank",rel:"noopener noreferrer"},Ot=t('<p>Show the keybinding resolver with <kbd class="platform-mac">Cmd+.</kbd><kbd class="platform-windows platform-linux">Ctrl+.</kbd> or with &quot;Keybinding Resolver: Show&quot; from the Command palette. With the Keybinding Resolver shown, press a key combination:</p><p><img src="'+C+'" alt="Keybinding Resolver"></p><p>The Keybinding Resolver shows you a list of keybindings that exist for the key combination, where each item in the list has the following:</p><ul><li>the command for the keybinding</li><li>the CSS selector used to define the context in which the keybinding is valid</li><li>the file in which the keybinding is defined</li></ul><p>The keybindings are listed in two colors. All the keybindings that are matched but not executed are shown in gray. The one that is executed, if any, is shown in green. If the command you wanted to trigger isn&#39;t listed, then a keybinding for that command hasn&#39;t been loaded.</p>',5),zt=e("ul",null,[e("li",null,[e("p",null,"The key combination was not used in the context defined by the keybinding's selector"),e("p",null,[n("For example, you can't trigger the keybinding for the "),e("code",null,"tree-view:add-file"),n(" command if the Tree View is not focused.")])]),e("li",null,[e("p",null,"There is another keybinding that took precedence"),e("p",null,"This often happens when you install a package which defines keybindings that conflict with existing keybindings. If the package's keybindings have selectors with higher specificity or were loaded later, they'll have priority over existing ones.")])],-1),Yt=e("code",null,"keymap.cson",-1),Vt={href:"https://github.com/atom/atom/discussions",target:"_blank",rel:"noopener noreferrer"},$t=e("h4",{id:"check-font-rendering-issues",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#check-font-rendering-issues","aria-hidden":"true"},"#"),n(" Check Font Rendering Issues")],-1),Gt=e("kbd",{class:"platform-mac"},"Alt+Cmd+I",-1),Ht=e("kbd",{class:"platform-windows platform-linux"},"Ctrl+Shift+I",-1),Bt={href:"https://developers.google.com/web/tools/chrome-devtools/inspect-styles/",target:"_blank",rel:"noopener noreferrer"},Jt=t('<p><img src="'+S+'" alt="Fonts In Use" title="Fonts In Use"></p><h4 id="check-for-errors-in-the-developer-tools" tabindex="-1"><a class="header-anchor" href="#check-for-errors-in-the-developer-tools" aria-hidden="true">#</a> Check for Errors in the Developer Tools</h4><p>When an unexpected error occurs in Atom, you will normally see a red notification which provides details about the error and allows you to create an issue on the right repository:</p><p><img src="'+I+'" alt="Exception Notification"></p><p>Not all errors are logged with a notification so if you suspect you&#39;re experiencing an error but there&#39;s no notification, you can also look for errors in the developer tools Console tab. To access the Console tab, press <kbd class="platform-mac">Alt-Cmd-I</kbd><kbd class="platform-windows platform-linux">Ctrl-Shift-I</kbd> to open developer tools and then click the Console tab:</p><p><img src="'+j+'" alt="DevTools Error"></p><p>If there are multiple errors, you can scroll down to the bottom of the panel to see the most recent error. Or while reproducing an error, you can right click in the Console tab panel, select <code>Clear console</code> to remove all Console output, and then reproduce the error to see what errors are logged to the Console tab.</p><div class="custom-container note"><p class="custom-container-title">Note</p><p><strong>Note:</strong> When running in Dev Mode, the developer tools are automatically shown with the error logged in the Console tab.</p></div><h4 id="find-crash-logs" tabindex="-1"><a class="header-anchor" href="#find-crash-logs" aria-hidden="true">#</a> Find Crash Logs</h4>',9),Kt=e("p",null,"When Atom crashes, it should write a core dump if system settings permit. In order to find whether the core dump is written and to where, consult the documentation for your distribution of Linux. Once you have the core dump, you can save it to send in later if it is needed for debugging.",-1),Xt=e("p",null,[n("When Atom crashes, you will find a crash dump in Console.app. You can launch Console.app using Spotlight or you can find it in "),e("code",null,"/Applications/Utilities/Console.app"),n(". Once you have launched the program, you can find the latest crash dump by following these instructions:")],-1),Zt=e("ol",null,[e("li",null,'Click "User Reports" in the left-most column'),e("li",null,[n("Find the latest entry in the middle column that starts with "),e("code",null,"Atom"),n(" and ends with "),e("code",null,".crash")])],-1),Qt=e("p",null,"Once you have the crash dump, you can save it to send in later if it is needed for debugging.",-1),eo=e("p",null,[n("When Atom crashes, you will find a crash dump inside your "),e("code",null,"%TEMP%\\Atom Crashes"),n(" directory. It will be the newest file with the "),e("code",null,".dmp"),n(" extension. Once you have the crash dump, you can save it to send in later if it is needed for debugging.")],-1),no=e("h4",{id:"diagnose-startup-performance",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#diagnose-startup-performance","aria-hidden":"true"},"#"),n(" Diagnose Startup Performance")],-1),ao={href:"https://github.com/atom/timecop",target:"_blank",rel:"noopener noreferrer"},so=e("p",null,[e("img",{src:T,alt:"Timecop"})],-1),to=e("p",null,"Timecop displays the following information:",-1),oo=e("ul",null,[e("li",null,"Atom startup times"),e("li",null,"File compilation times"),e("li",null,"Package loading and activation times"),e("li",null,"Theme loading and activation times")],-1),io=e("p",null,"If a specific package has high load or activation times, you might consider reporting an Issue to the maintainers. You can also disable the package to potentially improve future startup times.",-1),lo=e("h4",{id:"diagnose-runtime-performance",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#diagnose-runtime-performance","aria-hidden":"true"},"#"),n(" Diagnose Runtime Performance")],-1),co={href:"https://github.com/atom/atom/blob/master/CONTRIBUTING.md#submitting-issues",target:"_blank",rel:"noopener noreferrer"},ro=t('<p>To run a profile, open the Developer Tools with <kbd class="platform-mac">Alt+Cmd+I</kbd><kbd class="platform-windows platform-linux">Ctrl+Shift+I</kbd>. From there:</p><ol><li>Click the Profiles tab</li><li>Select &quot;Collect JavaScript CPU Profile&quot;</li><li>Click &quot;Start&quot;</li></ol><p><img src="'+P+'" alt="DevTools Profiler"></p><p>Once that is done, then perform the slow action to capture a recording. When finished, click &quot;Stop&quot;. Switch to the &quot;Chart&quot; view, and a graph of the recorded actions will appear. You can save and post the profile data by clicking &quot;Save&quot; next to the profile&#39;s name in the left panel.</p><p><img src="'+R+'" alt="DevTools Profiler"></p>',5),po={href:"https://developer.chrome.com/devtools/docs/cpu-profiling",target:"_blank",rel:"noopener noreferrer"},uo=t(`<h4 id="profiling-startup-performance" tabindex="-1"><a class="header-anchor" href="#profiling-startup-performance" aria-hidden="true">#</a> Profiling Startup Performance</h4><p>If the time for loading the window looks high, you can create a CPU profile for that period using the <code>--profile-startup</code> command line flag when starting Atom:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ atom --profile-startup .
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This will automatically capture a CPU profile as Atom is loading and open the Developer Tools once Atom loads. From there:</p><ol><li>Click the Profiles tab in the Developer Tools</li><li>Select the &quot;startup&quot; profile</li><li>Click the &quot;Save&quot; link for the startup profile</li></ol><p>You can then include the startup profile in any Issue you report.</p><h4 id="check-your-build-tools" tabindex="-1"><a class="header-anchor" href="#check-your-build-tools" aria-hidden="true">#</a> Check Your Build Tools</h4><p>If you are having issues installing a package using <code>apm install</code>, this could be because the package has dependencies on libraries that contain native code. This means you will need to have a C++ compiler and Python installed to be able to install it. You can run <code>apm install --check</code> to see if the Atom package manager can build native code on your machine.</p>`,8),ho={href:"https://github.com/atom/atom/tree/master/docs/build-instructions",target:"_blank",rel:"noopener noreferrer"},mo=t(`<h4 id="check-if-your-gpu-is-causing-the-problem" tabindex="-1"><a class="header-anchor" href="#check-if-your-gpu-is-causing-the-problem" aria-hidden="true">#</a> Check if your GPU is causing the problem</h4><p>If you encounter flickering or other rendering issues, you can stop Atom from using your Graphics Processing Unit (GPU) with the <code>--disable-gpu</code> Chromium flag to see if the fault lies with your GPU:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ atom --disable-gpu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Chromium (and thus Atom) normally uses the GPU to accelerate drawing parts of the interface. <code>--disable-gpu</code> tells Atom to not even attempt to do this, and just use the CPU for rendering everything. This means that the parts of the interface that would normally be accelerated using the GPU will instead take slightly longer and render on the CPU. This likely won&#39;t make a noticeable difference, but does slightly increase the battery usage as the CPU has to work harder to do the things the GPU is optimized for.</p><p>Two other Chromium flags that are useful for debugging are <code>--enable-gpu-rasterization</code> and <code>--force-gpu-rasterization</code>:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ atom --enable-gpu-rasterization --force-gpu-rasterization
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>--enable-gpu-rasterization</code> allows other commands to determine how a layer tile (graphics) should be drawn and <code>--force-gpu-rasterization</code> determines that the Skia GPU backend should be used for drawing layer tiles (only valid with GPU accelerated compositing).</p><p>Be sure to use Chromium flags at the end of the terminal call if you want to use other Atom flags as they will not be executed after the Chromium flags e.g.:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ atom --safe --enable-gpu-rasterization --force-gpu-rasterization
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="writing-specs" tabindex="-1"><a class="header-anchor" href="#writing-specs" aria-hidden="true">#</a> Writing Specs</h3><p>We&#39;ve looked at and written a few specs through the examples already. Now it&#39;s time to take a closer look at the spec framework itself. How exactly do you write tests in Atom?</p>`,11),go={href:"https://jasmine.github.io/archives/1.3/introduction",target:"_blank",rel:"noopener noreferrer"},ko=e("h4",{id:"create-a-new-spec",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#create-a-new-spec","aria-hidden":"true"},"#"),n(" Create a New Spec")],-1),vo={href:"https://github.com/atom/atom/tree/master/spec",target:"_blank",rel:"noopener noreferrer"},bo={href:"https://github.com/atom/markdown-preview/tree/master/spec",target:"_blank",rel:"noopener noreferrer"},fo=e("code",null,"spec",-1),yo=t(`<h5 id="create-a-spec-file" tabindex="-1"><a class="header-anchor" href="#create-a-spec-file" aria-hidden="true">#</a> Create a Spec File</h5><p>Spec files <strong>must</strong> end with <code>-spec</code> so add <code>sample-spec.coffee</code> to the <code>spec</code> directory.</p><h5 id="add-one-or-more-describe-methods" tabindex="-1"><a class="header-anchor" href="#add-one-or-more-describe-methods" aria-hidden="true">#</a> Add One or More <code>describe</code> Methods</h5><p>The <code>describe</code> method takes two arguments, a description and a function. If the description explains a behavior it typically begins with <code>when</code>; if it is more like a unit test it begins with the method name.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;when a test is written&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// contents</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>or</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;Editor::moveUp&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// contents</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="add-one-or-more-it-methods" tabindex="-1"><a class="header-anchor" href="#add-one-or-more-it-methods" aria-hidden="true">#</a> Add One or More <code>it</code> Methods</h5><p>The <code>it</code> method also takes two arguments, a description and a function. Try and make the description flow with the <code>it</code> method. For example, a description of &quot;this should work&quot; doesn&#39;t read well as &quot;it this should work&quot;. But a description of &quot;should work&quot; sounds great as &quot;it should work&quot;.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;when a test is written&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;has some expectations that should pass&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// Expectations</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="add-one-or-more-expectations" tabindex="-1"><a class="header-anchor" href="#add-one-or-more-expectations" aria-hidden="true">#</a> Add One or More Expectations</h5>`,11),wo={href:"https://jasmine.github.io/archives/1.3/introduction#section-Expectations",target:"_blank",rel:"noopener noreferrer"},_o=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;when a test is written&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;has some expectations that should pass&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;apples&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&quot;apples&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;oranges&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&quot;apples&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="custom-matchers" tabindex="-1"><a class="header-anchor" href="#custom-matchers" aria-hidden="true">#</a> Custom Matchers</h6><p>In addition to the Jasmine&#39;s built-in matchers, Atom includes the following:</p>`,3),xo={href:"https://github.com/velesin/jasmine-jquery",target:"_blank",rel:"noopener noreferrer"},qo=t("<li>The <code>toBeInstanceOf</code> matcher is for the <code>instanceof</code> operator</li><li>The <code>toHaveLength</code> matcher compares against the <code>.length</code> property</li><li>The <code>toExistOnDisk</code> matcher checks if the file exists in the filesystem</li><li>The <code>toHaveFocus</code> matcher checks if the element currently has focus</li><li>The <code>toShow</code> matcher tests if the element is visible in the dom</li>",5),Ao={href:"https://github.com/atom/atom/blob/master/spec/spec-helper.coffee",target:"_blank",rel:"noopener noreferrer"},To=t(`<h4 id="asynchronous-specs" tabindex="-1"><a class="header-anchor" href="#asynchronous-specs" aria-hidden="true">#</a> Asynchronous Specs</h4><p>Writing Asynchronous specs can be tricky at first. Some examples.</p><h5 id="promises" tabindex="-1"><a class="header-anchor" href="#promises" aria-hidden="true">#</a> Promises</h5><p>Working with promises is rather easy in Atom. You can use our <code>waitsForPromise</code> function.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;when we open a file&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;should be opened in an editor&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">waitsForPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			atom<span class="token punctuation">.</span>workspace
				<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;c.coffee&quot;</span><span class="token punctuation">)</span>
				<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">editor</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">expect</span><span class="token punctuation">(</span>editor<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&quot;c.coffee&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This method can be used in the <code>describe</code>, <code>it</code>, <code>beforeEach</code> and <code>afterEach</code> functions.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;when we open a file&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">waitsForPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> atom<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;c.coffee&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;should be opened in an editor&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>atom<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">getActiveTextEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span>
			<span class="token string">&quot;c.coffee&quot;</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you need to wait for multiple promises use a new <code>waitsForPromise</code> function for each promise. (Caution: Without <code>beforeEach</code> this example will fail!)</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;waiting for the packages to load&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">waitsForPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> atom<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;sample.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token function">waitsForPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> atom<span class="token punctuation">.</span>packages<span class="token punctuation">.</span><span class="token function">activatePackage</span><span class="token punctuation">(</span><span class="token string">&quot;tabs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token function">waitsForPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> atom<span class="token punctuation">.</span>packages<span class="token punctuation">.</span><span class="token function">activatePackage</span><span class="token punctuation">(</span><span class="token string">&quot;tree-view&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;should have waited long enough&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>atom<span class="token punctuation">.</span>packages<span class="token punctuation">.</span><span class="token function">isPackageActive</span><span class="token punctuation">(</span><span class="token string">&quot;tabs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span>atom<span class="token punctuation">.</span>packages<span class="token punctuation">.</span><span class="token function">isPackageActive</span><span class="token punctuation">(</span><span class="token string">&quot;tree-view&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>waitsForPromise</code> can take an additional object argument before the function. The object can have the following properties:</p><ul><li><code>shouldReject</code> Whether the promise should reject or resolve (default: <code>false</code>)</li><li><code>timeout</code> The amount of time (in ms) to wait for the promise to be resolved or rejected (default: <code>p<wbr>rocess.env.CI ? 60000 : 5000</code>)</li><li><code>label</code> The label to display if promise times out (default: <code>&#39;promise to be resolved or rejected&#39;</code>)</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;when we open a file&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;should be opened in an editor&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">waitsForPromise</span><span class="token punctuation">(</span>
			<span class="token punctuation">{</span>
				<span class="token literal-property property">shouldReject</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
				<span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">,</span>
				<span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&quot;promise to be resolved or rejected&quot;</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
				atom<span class="token punctuation">.</span>workspace
					<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;c.coffee&quot;</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">editor</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">expect</span><span class="token punctuation">(</span>editor<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&quot;c.coffee&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="asynchronous-functions-with-callbacks" tabindex="-1"><a class="header-anchor" href="#asynchronous-functions-with-callbacks" aria-hidden="true">#</a> Asynchronous Functions with Callbacks</h5><p>Specs for asynchronous functions can be done using the <code>waitsFor</code> and <code>runs</code> functions. A simple example.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;fs.readdir(path, cb)&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;is async&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> spy <span class="token operator">=</span> jasmine<span class="token punctuation">.</span><span class="token function">createSpy</span><span class="token punctuation">(</span><span class="token string">&quot;fs.readdirSpy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token string">&quot;/tmp/example&quot;</span><span class="token punctuation">,</span> spy<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token function">waitsFor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> spy<span class="token punctuation">.</span>callCount <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token function">runs</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> exp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;example.coffee&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

			<span class="token function">expect</span><span class="token punctuation">(</span>spy<span class="token punctuation">.</span>mostRecentCall<span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">expect</span><span class="token punctuation">(</span>spy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledWith</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;example.coffee&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),Co={href:"https://jasmine.github.io/archives/1.3/introduction#section-Asynchronous_Support",target:"_blank",rel:"noopener noreferrer"},So=t(`<h4 id="running-specs" tabindex="-1"><a class="header-anchor" href="#running-specs" aria-hidden="true">#</a> Running Specs</h4><p>Most of the time you&#39;ll want to run specs by triggering the <code>window:run-package-specs</code> command. This command is not only to run package specs, it can also be used to run Atom core specs when working on Atom itself. This will run all the specs in the current project&#39;s <code>spec</code> directory.</p><p>To run a limited subset of specs use the <code>fdescribe</code> or <code>fit</code> methods. You can use those to focus a single spec or several specs. Modified from the example above, focusing an individual spec looks like this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;when a test is written&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">fit</span><span class="token punctuation">(</span><span class="token string">&quot;has some expectations that should pass&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;apples&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&quot;apples&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;oranges&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&quot;apples&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="running-on-ci" tabindex="-1"><a class="header-anchor" href="#running-on-ci" aria-hidden="true">#</a> Running on CI</h5>`,5),Io={href:"https://blog.atom.io/2014/04/25/ci-for-your-packages.html",target:"_blank",rel:"noopener noreferrer"},jo={href:"http://blog.atom.io/2014/07/28/windows-ci-for-your-packages.html",target:"_blank",rel:"noopener noreferrer"},Po=t(`<h5 id="running-via-the-command-line" tabindex="-1"><a class="header-anchor" href="#running-via-the-command-line" aria-hidden="true">#</a> Running via the Command Line</h5><p>To run tests on the command line, run Atom with the <code>--test</code> flag followed by one or more paths to test files or directories. You can also specify a <code>--timeout</code> option, which will force-terminate your tests after a certain number of seconds have passed.</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>atom --test --timeout 60 ./test/test-1.js ./test/test-2.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="customizing-your-test-runner" tabindex="-1"><a class="header-anchor" href="#customizing-your-test-runner" aria-hidden="true">#</a> Customizing your test runner</h4><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p><strong>Warning:</strong> This API is available as of 1.2.0-beta0, and it is experimental and subject to change. Test runner authors should be prepared to test their code against future beta releases until it stabilizes.</p></div><p>By default, package tests are run with Jasmine 1.3, which is outdated but can&#39;t be changed for compatibility reasons. You can specify your own custom test runner by including an <code>atomTestRunner</code> field in your <code>package.json</code>. Atom will require whatever module you specify in this field, so you can use a relative path or the name of a module in your package&#39;s dependencies.</p><p>Your test runner module must export a single function, which Atom will call within a new window to run your package&#39;s tests. Your function will be called with the following parameters:</p><ul><li><code>testPaths</code> An array of paths to tests to run. Could be paths to files or directories.</li><li><code>buildAtomEnvironment</code> A function that can be called to construct an instance of the <code>atom</code> global. No <code>atom</code> global will be explicitly assigned, but you can assign one in your runner if desired. This function should be called with the following parameters: <ul><li><code>applicationDelegate</code> An object responsible for Atom&#39;s interaction with the browser process and host OS. Use <code>buildDefaultApplicationDelegate</code> for a default instance. You can override specific methods on this object to prevent or test these interactions.</li><li><code>window</code> A window global.</li><li><code>document</code> A document global.</li><li><code>configDirPath</code> A path to the configuration directory (usually <code>~/.atom</code>).</li><li><code>enablePersistence</code> A boolean indicating whether the Atom environment should save or load state from the file system. You probably want this to be <code>false</code>.</li></ul></li><li><code>buildDefaultApplicationDelegate</code> A function that builds a default instance of the application delegate, suitable to be passed as the <code>applicationDelegate</code> parameter to <code>buildAtomEnvironment</code>.</li><li><code>logFile</code> An optional path to a log file to which test output should be logged.</li><li><code>headless</code> A boolean indicating whether or not the tests are being run from the command line via <code>atom --test</code>.</li><li><code>legacyTestRunner</code> This function can be invoked to run the legacy Jasmine runner, giving your package a chance to transition to a new test runner while maintaining a subset of its tests in the old environment.</li></ul><p>Your function should return a promise that resolves to an exit code when your tests are finish running. This exit code will be returned when running your tests via the command line.</p><h3 id="handling-uris" tabindex="-1"><a class="header-anchor" href="#handling-uris" aria-hidden="true">#</a> Handling URIs</h3><p>Beginning in Atom 1.23, packages have the ability to handle special URIs triggered from the system; for example, a package named <code>my-package</code> can register itself to handle any URI starting with <code>atom://my-package/</code>.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p><strong>Warning:</strong> Handling URIs triggered from other applications, like a web browser, is a powerful tool, but also one that can be jarring. You should shape your package&#39;s user experience to handle this well. In general, you should <strong>avoid taking direct action on behalf of a user</strong>. For example, a URI handler that immediately installs a package is too invasive, but a URI handler that shows the package&#39;s pane in the settings view is useful. A URI handler that begins to clone a repo is overly aggressive, but a URI handler that <em>prompts</em> the user to clone a repo is okay.</p><p>Any package with a URI handler that we feel violates this guideline is subject to removal from the Atom package registry at our discretion.</p></div><h4 id="modifying-your-package-json" tabindex="-1"><a class="header-anchor" href="#modifying-your-package-json" aria-hidden="true">#</a> Modifying your <code>package.json</code></h4><p>The first step to handling URIs from your package is to modify its <code>package.json</code> file. You should add a new key called <code>uriHandler</code>, and its value should be an object.</p><p>The <code>uriHandler</code> object <em>must</em> contain a key called <code>method</code> with a string value that tells Atom which method in your package to call when a URI needs to be handled. The object can <em>optionally</em> include a key called <code>deferActivation</code> which can be set to the boolean <code>false</code> to prevent Atom from deferring activation of your package \u2014\xA0see more below.</p><p>For example, if we want our package <code>my-package</code> to handle URIs with a method on our package&#39;s main module called <code>handleURI</code>, we could add the following to our <code>package.json</code>:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;uriHandler&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;method&quot;</span><span class="token operator">:</span> <span class="token string">&quot;handleURI&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="modifying-your-main-module" tabindex="-1"><a class="header-anchor" href="#modifying-your-main-module" aria-hidden="true">#</a> Modifying your Main Module</h4>`,18),Ro=e("code",null,"atom://my-package/",-1),No=e("code",null,"handleURI",-1),Eo={href:"https://nodejs.org/api/url.html#url_url_parse_urlstring_parsequerystring_slashesdenotehost",target:"_blank",rel:"noopener noreferrer"},Uo=e("code",null,"url.parse(uri, true)",-1),Mo=t(`<p>Here&#39;s a sample package, written in JavaScript, that handles URIs with the <code>package.json</code> configuration we saw above.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
	<span class="token function">activate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// normal activation code here</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>

	<span class="token function">handleURI</span><span class="token punctuation">(</span><span class="token parameter">parsedUri</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>parsedUri<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When Atom handles, for example, the URI <code>atom://my-package/my/test/url?value=42&amp;other=false</code>, the package would log out something like the following:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">protocol</span><span class="token operator">:</span> <span class="token string">&#39;atom:&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">slashes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">auth</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;my-package&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">hostname</span><span class="token operator">:</span> <span class="token string">&#39;my-package&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">hash</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">search</span><span class="token operator">:</span> <span class="token string">&#39;?value=true&amp;other=false&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;42&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">other</span><span class="token operator">:</span> <span class="token string">&#39;false&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pathname</span><span class="token operator">:</span> <span class="token string">&#39;/my/test/url&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/my/test/url?value=true&amp;other=false&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">href</span><span class="token operator">:</span> <span class="token string">&#39;atom://my-package/my/test/url?value=true&amp;other=false&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice that the query string arguments are available in the <code>query</code> property, but are strings \u2014\xA0you&#39;ll have to convert to other native types yourself.</p><h4 id="controlling-activation-deferral" tabindex="-1"><a class="header-anchor" href="#controlling-activation-deferral" aria-hidden="true">#</a> Controlling Activation Deferral</h4><p>For performance reasons, adding a <code>uriHandler</code> entry to your package&#39;s <code>package.json</code> will enable <em>deferred activation</em>. This means that Atom will not activate your package until it has a URI for it to handle \u2014\xA0it will then activate your package and then immediately call the URI handler method. If you want to disable the deferred activation, ensuring your package is activated upon startup, you can add <code>&quot;deferActivation&quot;: false</code> to the URI handler config. For example,</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;uriHandler&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;method&quot;</span><span class="token operator">:</span> <span class="token string">&quot;handleURI&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;deferActivation&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Before doing this, make sure your package actually needs to be activated immediately \u2014\xA0disabling deferred activation means Atom takes longer to start since it has to activate all packages without deferred activation.</p><h4 id="linux-support" tabindex="-1"><a class="header-anchor" href="#linux-support" aria-hidden="true">#</a> Linux Support</h4><p>Because URI handling is different across operating systems and distributions, there is no built-in URI handler support for Atom on Linux. If you want to configure URI handling on your system yourself, then you should configure <code>atom:</code> protocol URI&#39;s to trigger atom with the <code>--uri-handler</code> flag; for example, the URI <code>atom://test/uri</code> should launch Atom via <code>atom --uri-handler atom://test/uri</code>.</p><h3 id="core-uris" tabindex="-1"><a class="header-anchor" href="#core-uris" aria-hidden="true">#</a> Core URIs</h3><p>Atom provides a core URI to handle opening files with the syntax <code>atom://core/open/file?filename=&lt;filepath&gt;&amp;line=&lt;line&gt;&amp;column=&lt;col&gt;</code></p><h3 id="cross-platform-compatibility" tabindex="-1"><a class="header-anchor" href="#cross-platform-compatibility" aria-hidden="true">#</a> Cross-Platform Compatibility</h3><p>Atom runs on a number of platforms and while Electron and Node take care of many of the details there are still some considerations to ensure your package works on other operating systems.</p><h4 id="symlinks" tabindex="-1"><a class="header-anchor" href="#symlinks" aria-hidden="true">#</a> Symlinks</h4><p>File symlinks can be used on Windows by non-Administrators by specifying &#39;junction&#39; as the type (this argument is ignored on macOS &amp; Linux).</p><p>Also consider:</p><ul><li><em>Symlinks committed to Git</em> will not checkout correctly on Windows - <em>dynamically create what you need with <code>fs.symlink</code> instead</em></li><li><em>Symlinked directories</em> are only available to Administrators on Windows - <em>avoid a dependency on them</em></li></ul><h4 id="filenames" tabindex="-1"><a class="header-anchor" href="#filenames" aria-hidden="true">#</a> Filenames</h4><ul><li><em>Reserved filenames</em> on Windows are <code>com1</code>-<code>com9</code>, <code>lpt1</code>-<code>lpt9</code>, <code>con</code>, <code>nul</code>, <code>aux</code> and <code>prn</code> (regardless of extension, e.g. <code>prn.txt</code> is disallowed)</li><li><em>Reserved characters</em> on Windows are ? \\ / &lt; &gt; ? % | : &quot; <em>so avoid where possible</em></li><li><em>Names with spaces</em> when passed to the command line; <ul><li>Windows requires you <em>surround the path with double quotes</em> e.g. <code>&quot;c:\\my test&quot;</code></li><li>macOS and Linux require <em>a backslash before each space</em> e.g. <code>/my\\ test</code></li></ul></li></ul><h4 id="file-paths" tabindex="-1"><a class="header-anchor" href="#file-paths" aria-hidden="true">#</a> File paths</h4><ul><li>Windows uses <code>\\</code> although some tools and PowerShell allow <code>/</code> too</li><li>macOS and Linux use <code>/</code></li></ul><p>You can dynamically find out what your platform uses with <code>path.sep</code> or better yet <em>use the node path library functions</em> such as <code>join</code> and <code>normalize</code> which automatically take care of this.</p><p>Windows supports up to <em>250 characters</em> for a path - <em>avoid deeply nested directory structures</em></p><h4 id="paths-are-not-urls" tabindex="-1"><a class="header-anchor" href="#paths-are-not-urls" aria-hidden="true">#</a> Paths are not URLs</h4><p>URL parsing routines should not be used on file paths. While they initially look like a relative path it will fail in a number of scenarios on all platforms.</p><ul><li>Various characters are misinterpreted, e.g. <code>?</code> as query string, <code>#</code> as a fragment identifier</li><li><strong>Windows</strong> drive specifiers are incorrectly parsed as a protocol</li></ul><p>If you need to use a path for a URL use the file: protocol with an absolute path instead to ensure drive letters and slashes are appropriately addressed, e.g. <code>file:///c|/test/pic.png</code></p><h4 id="fs-stat-on-directories" tabindex="-1"><a class="header-anchor" href="#fs-stat-on-directories" aria-hidden="true">#</a> <code>fs.stat</code> on directories</h4><p>The <code>fs.stat</code> function does not return the size of the contents of a directory but rather the allocation size of the directory itself. This returns 0 on Windows and 1024 on macOS and so should not be relied upon.</p><h4 id="path-relative-can-t-traverse-drives" tabindex="-1"><a class="header-anchor" href="#path-relative-can-t-traverse-drives" aria-hidden="true">#</a> <code>path.relative</code> can&#39;t traverse drives</h4><ul><li>On a macOS or Linux system <code>path.relative</code> can be used to calculate a relative path to traverse between any two given paths.</li><li>On Windows this is not always possible as it can contain multiple absolute roots, e.g. <code>c:\\</code> and <code>d:\\</code></li></ul><h4 id="rapid-file-operations" tabindex="-1"><a class="header-anchor" href="#rapid-file-operations" aria-hidden="true">#</a> Rapid file operations</h4>`,34),Wo={href:"https://www.npmjs.com/package/rimraf",target:"_blank",rel:"noopener noreferrer"},Fo=t(`<h4 id="line-endings" tabindex="-1"><a class="header-anchor" href="#line-endings" aria-hidden="true">#</a> Line endings</h4><ul><li>Windows uses <code>CRLF</code></li><li>macOS and Linux use <code>LF</code></li><li>Git on Windows often has <code>autocrlf</code> set which automatically converts between the two</li></ul><p>If you are writing specs that use text file fixtures consider that this will interfere with file lengths, hash codes and direct text comparisons. It will also change the Atom selection length by 1 character per line.</p><p>If you have spec fixtures that are text files you may want to tell Git to force LF, CRLF or not convert them by specifying the paths in <code>.gitattributes</code> e.g.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>spec/fixtures/always-crlf.txt eol=crlf
spec/fixtures/always-lf.txt eol=lf
spec/fixtures/leave-as-is.txt -text
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="converting-from-textmate" tabindex="-1"><a class="header-anchor" href="#converting-from-textmate" aria-hidden="true">#</a> Converting from TextMate</h3>`,6),Do={href:"https://macromates.com",target:"_blank",rel:"noopener noreferrer"},Lo=e("h4",{id:"converting-a-textmate-grammar-bundle",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#converting-a-textmate-grammar-bundle","aria-hidden":"true"},"#"),n(" Converting a TextMate Grammar Bundle")],-1),Oo=e("p",null,"Converting a TextMate bundle will allow you to use its editor preferences, snippets, and colorization inside Atom.",-1),zo={href:"https://en.wikipedia.org/wiki/R_(programming_language)",target:"_blank",rel:"noopener noreferrer"},Yo={href:"https://github.com/textmate",target:"_blank",rel:"noopener noreferrer"},Vo=t(`<p>You can convert the R bundle with the following command:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ apm init --package language-r --convert https://github.com/textmate/r.tmbundle
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can now change directory into <code>language-r</code> to see the converted bundle. Once you link your package with the <code>apm link</code> command, your new package is ready to use. Launch Atom and open a <code>.r</code> file in the editor to see it in action!</p><h4 id="converting-a-textmate-syntax-theme" tabindex="-1"><a class="header-anchor" href="#converting-a-textmate-syntax-theme" aria-hidden="true">#</a> Converting a TextMate Syntax Theme</h4>`,4),$o={href:"https://macromates.com",target:"_blank",rel:"noopener noreferrer"},Go=e("h5",{id:"differences",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#differences","aria-hidden":"true"},"#"),n(" Differences")],-1),Ho={href:"https://en.wikipedia.org/wiki/Property_list",target:"_blank",rel:"noopener noreferrer"},Bo={href:"https://en.wikipedia.org/wiki/Cascading_Style_Sheets",target:"_blank",rel:"noopener noreferrer"},Jo={href:"http://lesscss.org",target:"_blank",rel:"noopener noreferrer"},Ko=e("p",null,"The utility that converts the theme first parses the theme's plist file and then creates comparable CSS rules and properties that will style Atom similarly.",-1),Xo=e("h5",{id:"convert-the-theme",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#convert-the-theme","aria-hidden":"true"},"#"),n(" Convert the Theme")],-1),Zo={href:"http://wiki.macromates.com/Themes/UserSubmittedThemes",target:"_blank",rel:"noopener noreferrer"},Qo=t(`<p>Now, let&#39;s say you&#39;ve downloaded the theme to <code>~/Downloads/MyTheme.tmTheme</code>, you can convert the theme with the following command:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ apm init --theme my-theme --convert ~/Downloads/MyTheme.tmTheme
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can then change directory to <code>my-theme</code> to see the converted theme.</p><h5 id="activate-the-theme" tabindex="-1"><a class="header-anchor" href="#activate-the-theme" aria-hidden="true">#</a> Activate the Theme</h5><p>Once your theme is installed you can enable it by launching Atom and opening the Settings View with the <span class="platform-mac"><em>Atom &gt; Preferences</em></span><span class="platform-windows"><em>File &gt; Preferences</em></span><span class="platform-linux"><em>Edit &gt; Preferences</em></span> menu item. Then select the &quot;Themes&quot; tab on the left side navigation. Finally, choose &quot;My Theme&quot; from the &quot;Syntax Theme&quot; dropdown menu to enable your new theme.</p><p>Your theme is now enabled, open an editor to see it in action!</p><h3 id="hacking-on-atom-core" tabindex="-1"><a class="header-anchor" href="#hacking-on-atom-core" aria-hidden="true">#</a> Hacking on Atom Core</h3><p>If you&#39;re hitting a bug in Atom or just want to experiment with adding a feature to the core of the system, you&#39;ll want to run Atom in Dev Mode with access to a local copy of the Atom source.</p><h4 id="fork-the-atom-atom-repository" tabindex="-1"><a class="header-anchor" href="#fork-the-atom-atom-repository" aria-hidden="true">#</a> Fork the atom/atom repository</h4>`,9),ei={href:"https://help.github.com/articles/fork-a-repo/",target:"_blank",rel:"noopener noreferrer"},ni=t(`<h4 id="cloning-and-bootstrapping" tabindex="-1"><a class="header-anchor" href="#cloning-and-bootstrapping" aria-hidden="true">#</a> Cloning and bootstrapping</h4><p>Once you&#39;ve set up your fork of the atom/atom repository, you can clone it to your local machine:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ git clone git@github.com:&lt;em&gt;your-username&lt;/em&gt;/atom.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>From there, you can navigate into the directory where you&#39;ve cloned the Atom source code and run the bootstrap script to install all the required dependencies:</p>`,4),ai=e("div",{class:"language-command-line ext-command-line line-numbers-mode"},[e("pre",{class:"language-command-line"},[e("code",null,`$ cd <em>where-you-cloned-atom</em>
$ script/bootstrap
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),si=e("div",{class:"language-command-line ext-command-line line-numbers-mode"},[e("pre",{class:"language-command-line"},[e("code",null,`$ cd <em>where-you-cloned-atom</em>
$ script/bootstrap
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ti=e("div",{class:"language-command-line ext-command-line line-numbers-mode"},[e("pre",{class:"language-command-line"},[e("code",null,`$ cd <em>where-you-cloned-atom</em>
$ script\\bootstrap
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),oi=t(`<h4 id="running-in-development-mode" tabindex="-1"><a class="header-anchor" href="#running-in-development-mode" aria-hidden="true">#</a> Running in Development Mode</h4><p>Once you have a local copy of Atom cloned and bootstrapped, you can then run Atom in Development Mode. But first, if you cloned Atom to somewhere other than <span class="platform-mac platform-linux"><code>~/github/atom</code></span><span class="platform-windows"><code>%USERPROFILE%\\github\\atom</code></span> you will need to set the <code>ATOM_DEV_RESOURCE_PATH</code> environment variable to point to the folder in which you cloned Atom. To run Atom in Dev Mode, use the <code>--dev</code> parameter from the terminal:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ atom --dev &lt;em&gt;path-to-open&lt;/em&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container note"><p class="custom-container-title">Note</p><p><strong>Note:</strong> If the atom command does not respond in the terminal, then try atom-dev or atom-beta. The suffix depends upon the particular source code that was cloned.</p></div><p>There are a couple benefits of running Atom in Dev Mode:</p>`,5),ii=t('<li>When the <code>ATOM_DEV_RESOURCE_PATH</code> environment variable is set correctly, Atom is run using the source code from your local <code>atom/atom</code> repository. This means that you don&#39;t have to run <span class="platform-mac platform-linux"><code>script/build</code></span><span class="platform-windows"><code>script\\build</code></span> every time you change code. Just restart Atom \u{1F44D}</li><li>Packages that exist in <span class="platform-mac platform-linux"><code>~/.atom/dev/packages</code></span><span class="platform-windows"><code>%USERPROFILE%\\.atom\\dev\\packages</code></span> are loaded instead of packages of the same name normally loaded from other locations. This means that you can have development versions of packages you use loaded but easily go back to the stable versions by launching without Dev Mode.</li>',2),li={href:"https://github.com/atom/dev-live-reload",target:"_blank",rel:"noopener noreferrer"},ci=e("code",null,"window:reload",-1),ri=t(`<h4 id="running-atom-core-tests-locally" tabindex="-1"><a class="header-anchor" href="#running-atom-core-tests-locally" aria-hidden="true">#</a> Running Atom Core Tests Locally</h4><p>In order to run Atom Core tests from the terminal, first be certain to set the <code>ATOM_DEV_RESOURCE_PATH</code> environment variable as mentioned above and then:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ cd &lt;em&gt;path-to-your-local-atom-repo&lt;/em&gt;
$ atom --test spec
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="building" tabindex="-1"><a class="header-anchor" href="#building" aria-hidden="true">#</a> Building</h4><p>In order to build Atom from source, you need to have a number of other requirements and take additional steps.</p>`,5),pi=e("p",null,"Ubuntu LTS 16.04 64-bit is the recommended platform.",-1),di=e("h5",{id:"requirements",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#requirements","aria-hidden":"true"},"#"),n(" Requirements")],-1),ui=e("li",null,"OS with 64-bit or 32-bit architecture",-1),hi=e("li",null,"C++11 toolchain",-1),mi=e("li",null,"Git",-1),gi={href:"https://github.com/creationix/nvm",target:"_blank",rel:"noopener noreferrer"},ki=e("li",null,[n("npm 6.12 or later (run "),e("code",null,"npm install -g npm"),n(")")],-1),vi=e("li",null,"Python 2.6.x, 2.7.x or 3.5+",-1),bi={href:"https://wiki.gnome.org/Projects/Libsecret",target:"_blank",rel:"noopener noreferrer"},fi=e("p",null,"For more details, scroll down to find how to setup a specific Linux distro.",-1),yi=e("h6",{id:"ubuntu-debian",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#ubuntu-debian","aria-hidden":"true"},"#"),n(" Ubuntu / Debian")],-1),wi=e("ul",null,[e("li",null,[e("p",null,"Install GNOME headers and other basic prerequisites:"),e("div",{class:"language-command-line ext-command-line line-numbers-mode"},[e("pre",{class:"language-command-line"},[e("code",null,`$ sudo apt-get install build-essential git libsecret-1-dev fakeroot rpm libx11-dev libxkbfile-dev
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])])]),e("li",null,[e("p",null,[n("If "),e("code",null,"script/build"),n(" exits with an error, you may need to install a newer C++ compiler with C++11:")]),e("div",{class:"language-command-line ext-command-line line-numbers-mode"},[e("pre",{class:"language-command-line"},[e("code",null,`$ sudo add-apt-repository ppa:ubuntu-toolchain-r/test
$ sudo apt-get update
$ sudo apt-get install gcc-5 g++-5
$ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 80 --slave /usr/bin/g++ g++ /usr/bin/g++-5
$ sudo update-alternatives --config gcc # choose gcc-5 from the list
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])])])],-1),_i=e("h6",{id:"fedora-22",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#fedora-22","aria-hidden":"true"},"#"),n(" Fedora 22+")],-1),xi=e("div",{class:"language-command-line ext-command-line line-numbers-mode"},[e("pre",{class:"language-command-line"},[e("code",null,`$ sudo dnf --assumeyes install make gcc gcc-c++ glibc-devel git-core libsecret-devel rpmdevtools libX11-devel libxkbfile-devel
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),qi=e("h6",{id:"fedora-21-centos-rhel",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#fedora-21-centos-rhel","aria-hidden":"true"},"#"),n(" Fedora 21 / CentOS / RHEL")],-1),Ai=e("div",{class:"language-command-line ext-command-line line-numbers-mode"},[e("pre",{class:"language-command-line"},[e("code",null,`$ sudo yum install -y make gcc gcc-c++ glibc-devel git-core libsecret-devel rpmdevtools
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),Ti=e("h6",{id:"arch",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#arch","aria-hidden":"true"},"#"),n(" Arch")],-1),Ci=e("div",{class:"language-command-line ext-command-line line-numbers-mode"},[e("pre",{class:"language-command-line"},[e("code",null,`sudo pacman -S --needed gconf base-devel git nodejs npm libsecret python libx11 libxkbfile
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),Si=e("h6",{id:"slackware",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#slackware","aria-hidden":"true"},"#"),n(" Slackware")],-1),Ii=e("div",{class:"language-command-line ext-command-line line-numbers-mode"},[e("pre",{class:"language-command-line"},[e("code",null,`$ sbopkg -k -i node -i atom
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),ji=e("h6",{id:"opensuse",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#opensuse","aria-hidden":"true"},"#"),n(" openSUSE")],-1),Pi=e("div",{class:"language-command-line ext-command-line line-numbers-mode"},[e("pre",{class:"language-command-line"},[e("code",null,`$ sudo zypper install nodejs nodejs-devel make gcc gcc-c++ glibc-devel git-core libsecret-devel rpmdevtools libX11-devel libxkbfile-devel
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),Ri=e("h5",{id:"requirements-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#requirements-1","aria-hidden":"true"},"#"),n(" Requirements")],-1),Ni=e("li",null,"macOS 10.9 or later",-1),Ei={href:"https://github.com/creationix/nvm",target:"_blank",rel:"noopener noreferrer"},Ui=e("li",null,[n("npm 6.12 or later (run "),e("code",null,"npm install -g npm"),n(")")],-1),Mi=e("li",null,"Python v2.6.x, v2.7.x or v3.5+",-1),Wi={href:"https://developer.apple.com/xcode/downloads/",target:"_blank",rel:"noopener noreferrer"},Fi=e("code",null,"xcode-select --install",-1),Di=e("li",null,[e("p",null,"Node.js 10.12 or later (the architecture of node available to the build system will determine whether you build 32-bit or 64-bit Atom)")],-1),Li=e("li",null,[e("p",null,[n("npm 6.12 or later (run "),e("code",null,"npm install -g npm"),n(")")])],-1),Oi=e("p",null,"Python v2.6.x, v2.7.x, or v3.5+",-1),zi={href:"https://www.microsoft.com/en-us/search/shop/apps?q=python+software+foundation&devicetype=pc&category=Developer+tools%5cDevelopment+kits&Price=0&MaturityRating=ESRB%3aE",target:"_blank",rel:"noopener noreferrer"},Yi=e("li",null,[n("Download Python from https://www.python.org/downloads/. "),e("ul",null,[e("li",null,'For Python 2, be sure to install in the default location, or check "Add Python 2.x to PATH" before installing.'),e("li",null,[n('For Python 3, check "Add Python 3.x to PATH", or change the install path to '),e("code",null,"[Your_Drive_Letter]:\\Python37"),n(" e.g. "),e("code",null,"C:\\Python37"),n(", (even if your version of Python 3 isn't 3.7, that's one place where the scripts will look.)")]),e("li",null,[n("If python isn't found by the bootstrap script, create a symbolic link to the directory containing "),e("code",null,"python.exe"),n(" using e.g.: "),e("code",null,"mklink /d %SystemDrive%\\Python27 D:\\elsewhere\\Python27"),n("(Links should be set at either "),e("code",null,"%SystemDrive%\\Python27"),n(" or "),e("code",null,"%SystemDrive%\\Python37"),n(", regardless of what version of Python you actually have.)")])])],-1),Vi=e("p",null,"C++ build tools:",-1),$i=e("strong",null,"Option 1:",-1),Gi={href:"https://www.npmjs.com/package/windows-build-tools",target:"_blank",rel:"noopener noreferrer"},Hi=e("code",null,"npm install --global windows-build-tools@4",-1),Bi=e("strong",null,"Option 2:",-1),Ji={href:"https://visualstudio.microsoft.com/visual-cpp-build-tools/",target:"_blank",rel:"noopener noreferrer"},Ki=e("strong",null,"Option 3:",-1),Xi={href:"https://www.visualstudio.com/downloads/",target:"_blank",rel:"noopener noreferrer"},Zi=e("p",null,"Also ensure that:",-1),Qi=e("ul",null,[e("li",null,"The default installation folder is chosen so the build tools can find it"),e("li",null,"If using Visual Studio make sure Visual C++ support is selected/installed"),e("li",null,"If using Visual C++ Build Tools make sure a Windows SDK (Windows 8 SDK or Windows 10 SDK) is selected/installed"),e("li",null,[n("A "),e("code",null,"git"),n(" command is in your path")]),e("li",null,[n("Set the "),e("code",null,"GYP_MSVS_VERSION"),n(" environment variable to the Visual Studio/Build Tools version ("),e("code",null,"2015"),n(" or "),e("code",null,"2017"),n(".) e.g. "),e("code",null,'[Environment]::SetEnvironmentVariable("GYP_MSVS_VERSION", "2015", "User")'),n(" in PowerShell (or set it in Windows advanced system settings).")])],-1),el=e("h5",{id:"instructions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#instructions","aria-hidden":"true"},"#"),n(" Instructions")],-1),nl=e("div",{class:"language-command-line ext-command-line line-numbers-mode"},[e("pre",{class:"language-command-line"},[e("code",null,`$ script/build
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),al=e("p",null,[n("To also install the newly built application, use the "),e("code",null,"--create-debian-package"),n(" or "),e("code",null,"--create-rpm-package"),n(" option and then install the generated package via the system package manager.")],-1),sl=e("div",{class:"language-command-line ext-command-line line-numbers-mode"},[e("pre",{class:"language-command-line"},[e("code",null,`$ script/build
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),tl=e("p",null,[n("To also install the newly built application, use "),e("code",null,"script/build --install"),n(".")],-1),ol=e("div",{class:"language-command-line ext-command-line line-numbers-mode"},[e("pre",{class:"language-command-line"},[e("code",null,`$ script\\build
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),il=e("p",null,[n("To also install the newly built application, use "),e("code",null,"script\\build --create-windows-installer"),n(" and launch one of the generated installers.")],-1),ll=e("h5",{id:"script-build-options",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#script-build-options","aria-hidden":"true"},"#"),n(),e("code",null,"script/build"),n(" Options")],-1),cl=e("ul",null,[e("li",null,[e("code",null,"--compress-artifacts"),n(": zips the generated application as "),e("code",null,"out/atom-{arch}.tar.gz"),n(".")]),e("li",null,[e("code",null,"--create-debian-package"),n(": creates a .deb package as "),e("code",null,"out/atom-{arch}.deb")]),e("li",null,[e("code",null,"--create-rpm-package"),n(": creates a .rpm package as "),e("code",null,"out/atom-{arch}.rpm")]),e("li",null,[e("code",null,"--install[=dir]"),n(": installs the application in "),e("code",null,"${dir}"),n("; "),e("code",null,"${dir}"),n(" defaults to "),e("code",null,"/usr/local"),n(".")])],-1),rl=e("ul",null,[e("li",null,[e("code",null,"--code-sign"),n(": signs the application with the GitHub certificate specified in "),e("code",null,"$ATOM_MAC_CODE_SIGNING_CERT_DOWNLOAD_URL"),n(".")]),e("li",null,[e("code",null,"--compress-artifacts"),n(": zips the generated application as "),e("code",null,"out/atom-mac.zip"),n(".")]),e("li",null,[e("code",null,"--install[=dir]"),n(": installs the application at "),e("code",null,"${dir}/Atom.app"),n(" for dev and stable versions or at "),e("code",null,"${dir}/Atom-Beta.app"),n(" for beta versions; "),e("code",null,"${dir}"),n(" defaults to "),e("code",null,"/Applications"),n(".")])],-1),pl=e("ul",null,[e("li",null,[e("code",null,"--code-sign"),n(": signs the application with the GitHub certificate specified in "),e("code",null,"$WIN_P12KEY_URL"),n(".")]),e("li",null,[e("code",null,"--compress-artifacts"),n(": zips the generated application as "),e("code",null,"out\\atom-windows.zip"),n(".")]),e("li",null,[e("code",null,"--create-windows-installer"),n(": creates an "),e("code",null,".exe"),n(" and two "),e("code",null,".nupkg"),n(" packages in the "),e("code",null,"out"),n(" directory.")]),e("li",null,[e("code",null,"--install[=dir]"),n(": installs the application in "),e("code",null,"${dir}\\Atom\\app-dev"),n("; "),e("code",null,"${dir}"),n(" defaults to "),e("code",null,"%LOCALAPPDATA%"),n(".")])],-1),dl=e("h5",{id:"troubleshooting",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#troubleshooting","aria-hidden":"true"},"#"),n(" Troubleshooting")],-1),ul=e("h6",{id:"typeerror-unable-to-watch-path",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#typeerror-unable-to-watch-path","aria-hidden":"true"},"#"),n(" TypeError: Unable to watch path")],-1),hl=e("p",null,"If you get following error with a big traceback right after Atom starts:",-1),ml=e("div",{class:"language-text ext-text line-numbers-mode"},[e("pre",{class:"language-text"},[e("code",null,`TypeError: Unable to watch path
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),gl=e("p",null,"you have to increase number of watched files by inotify. For testing if this is the reason for this error you can execute:",-1),kl=e("div",{class:"language-command-line ext-command-line line-numbers-mode"},[e("pre",{class:"language-command-line"},[e("code",null,`$ sudo sysctl fs.inotify.max_user_watches=32768
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),vl=e("p",null,"then restart Atom. If Atom now works fine, you can make this setting permanent:",-1),bl=e("div",{class:"language-command-line ext-command-line line-numbers-mode"},[e("pre",{class:"language-command-line"},[e("code",null,`$ echo 32768 | sudo tee -a /proc/sys/fs/inotify/max_user_watches
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),fl={href:"https://github.com/atom/atom/issues/2082",target:"_blank",rel:"noopener noreferrer"},yl=e("h6",{id:"usr-bin-env-node-no-such-file-or-directory",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#usr-bin-env-node-no-such-file-or-directory","aria-hidden":"true"},"#"),n(" /usr/bin/env: node: No such file or directory")],-1),wl=e("p",null,[n("If you get this notice when attempting to run any script, you either do not have Node.js installed, or node isn't identified as Node.js on your machine. If it's the latter, this might be caused by installing Node.js via the distro package manager and not nvm, so entering "),e("code",null,"sudo ln -s /usr/bin/nodejs /usr/bin/node"),n(" into your terminal may fix the issue. On some variants (mostly Debian based distros) you can use "),e("code",null,"update-alternatives"),n(" too:")],-1),_l=e("div",{class:"language-command-line ext-command-line line-numbers-mode"},[e("pre",{class:"language-command-line"},[e("code",null,`$ sudo update-alternatives --install /usr/bin/node node /usr/bin/nodejs 1 --slave /usr/bin/js js /usr/bin/nodejs
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),xl=e("h6",{id:"attributeerror-module-object-has-no-attribute-script-main",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#attributeerror-module-object-has-no-attribute-script-main","aria-hidden":"true"},"#"),n(" AttributeError: 'module' object has no attribute 'script_main'")],-1),ql=e("p",null,"If you get following error with a big traceback while building Atom:",-1),Al=e("div",{class:"language-text ext-text line-numbers-mode"},[e("pre",{class:"language-text"},[e("code",null,`sys.exit(gyp.script_main()) AttributeError: 'module' object has no attribute 'script_main' gyp ERR!
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),Tl=e("p",null,"you need to uninstall the system version of gyp.",-1),Cl=e("p",null,"On Fedora you would do the following:",-1),Sl=e("div",{class:"language-command-line ext-command-line line-numbers-mode"},[e("pre",{class:"language-command-line"},[e("code",null,`$ sudo yum remove gyp
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),Il=e("h6",{id:"linux-build-error-reports",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#linux-build-error-reports","aria-hidden":"true"},"#"),n(" Linux build error reports")],-1),jl={href:"https://github.com/atom/atom/search?q=label%3Abuild-error+label%3Alinux&type=Issues",target:"_blank",rel:"noopener noreferrer"},Pl={href:"https://github.com/atom/atom/search?q=label%3Abuild-error+label%3Amac&type=Issues",target:"_blank",rel:"noopener noreferrer"},Rl=e("h6",{id:"common-errors",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#common-errors","aria-hidden":"true"},"#"),n(" Common Errors")],-1),Nl=e("li",null,[e("p",null,[e("code",null,"node is not recognized")]),e("ul",null,[e("li",null,[n("If you just installed Node.js, you'll need to restart Command Prompt before the "),e("code",null,"node"),n(" command is available on your path.")])])],-1),El=e("li",null,[e("p",null,[e("code",null,"msbuild.exe failed with exit code: 1")]),e("ul",null,[e("li",null,[n("If using "),e("strong",null,"Visual Studio"),n(", ensure you have the "),e("strong",null,"Visual C++"),n(" component installed. Go into Add/Remove Programs, select Visual Studio, press Modify, and then check the Visual C++ box.")]),e("li",null,[n("If using "),e("strong",null,"Visual C++ Build Tools"),n(", ensure you have the "),e("strong",null,"Windows 8 SDK"),n(" or "),e("strong",null,"Windows 10 SDK"),n(' component installed. Go into Add/Remove Programs, select Visual C++ Build Tools, press Modify and then check the "Windows 8 SDK" or "Windows 10 SDK" box.')])])],-1),Ul=e("p",null,[e("code",null,"script\\build"),n(" stops with no error or warning shortly after displaying the versions of node, npm and Python")],-1),Ml=e("li",null,[n("Make sure that the path where you have checked out Atom does not include a space. For example, use "),e("code",null,"C:\\atom"),n(" instead of "),e("code",null,"C:\\my stuff\\atom"),n(".")],-1),Wl=e("code",null,"C:\\atom",-1),Fl={href:"https://github.com/atom/atom/issues/2200",target:"_blank",rel:"noopener noreferrer"},Dl=e("p",null,[e("code",null,"error MSB4025: The project file could not be loaded. Invalid character in the given encoding.")],-1),Ll=e("code",null,"%USERPROFILE%",-1),Ol={href:"https://bugs.chromium.org/p/gyp/issues/list",target:"_blank",rel:"noopener noreferrer"},zl=e("ul",null,[e("li",null,"https://github.com/TooTallNate/node-gyp/issues/297"),e("li",null,"https://bugs.chromium.org/p/gyp/issues/detail?id=393")],-1),Yl=e("li",null,[e("p",null,[e("code",null,"'node_modules\\.bin\\npm' is not recognized as an internal or external command, operable program or batch file.")]),e("ul",null,[e("li",null,[n("This occurs if the previous build left things in a bad state. Run "),e("code",null,"script\\clean"),n(" and then "),e("code",null,"script\\build"),n(" again.")])])],-1),Vl=e("li",null,[e("p",null,[e("code",null,"script\\build"),n(" stops at installing runas with "),e("code",null,"Failed at the runas@x.y.z install script.")]),e("ul",null,[e("li",null,"See the next item.")])],-1),$l=e("li",null,[e("p",null,[e("code",null,"error MSB8020: The build tools for Visual Studio 201? (Platform Toolset = 'v1?0') cannot be found.")]),e("ul",null,[e("li",null,[n("Try setting the "),e("code",null,"GYP_MSVS_VERSION"),n(" environment variable to "),e("strong",null,"2015"),n(" or "),e("strong",null,"2017"),n(" depending on what version of Visual Studio/Build Tools is installed and then "),e("code",null,"script\\clean"),n(" followed by "),e("code",null,"script\\build"),n(" (re-open the Command Prompt if you set the variable using the GUI).")])])],-1),Gl=e("li",null,[e("p",null,[e("code",null,"'node-gyp' is not recognized as an internal or external command, operable program or batch file.")]),e("ul",null,[e("li",null,[n("Try running "),e("code",null,"npm install -g node-gyp"),n(", and run "),e("code",null,"script\\build"),n(" again.")])])],-1),Hl=e("li",null,[e("p",null,[n("Other "),e("code",null,"node-gyp"),n(" errors on first build attempt, even though the right Node.js and Python versions are installed.")]),e("ul",null,[e("li",null,"Do try the build command one more time as experience shows it often works on second try in many cases.")])],-1),Bl=e("h6",{id:"windows-build-error-reports",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#windows-build-error-reports","aria-hidden":"true"},"#"),n(" Windows build error reports")],-1),Jl={href:"https://github.com/atom/atom/search?q=label%3Abuild-error+label%3Awindows&type=Issues",target:"_blank",rel:"noopener noreferrer"},Kl=e("li",null,"If it hasn't, please open a new issue with your Windows version, architecture (x86 or x64), and a text dump of your build output, including the Node.js and Python versions.",-1),Xl=e("h3",{id:"contributing-to-official-atom-packages",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#contributing-to-official-atom-packages","aria-hidden":"true"},"#"),n(" Contributing to Official Atom Packages")],-1),Zl={href:"https://github.com/atom/atom",target:"_blank",rel:"noopener noreferrer"},Ql=e("h4",{id:"hacking-on-packages",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hacking-on-packages","aria-hidden":"true"},"#"),n(" Hacking on Packages")],-1),ec=e("h5",{id:"cloning",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#cloning","aria-hidden":"true"},"#"),n(" Cloning")],-1),nc=e("code",null,"apm install",-1),ac=t(`<p>For example, if you want to make changes to the <code>tree-view</code> package, fork the repo on your github account, then clone it:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ git clone git@github.com:&lt;em&gt;your-username&lt;/em&gt;/tree-view.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Next install all the dependencies:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ cd tree-view
$ apm install
&gt; Installing modules \u2713
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now you can link it to development mode so when you run an Atom window with <code>atom --dev</code>, you will use your fork instead of the built in package:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ apm link -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="running-in-development-mode-1" tabindex="-1"><a class="header-anchor" href="#running-in-development-mode-1" aria-hidden="true">#</a> Running in Development Mode</h5><p>Editing a package in Atom is a bit of a circular experience: you&#39;re using Atom to modify itself. What happens if you temporarily break something? You don&#39;t want the version of Atom you&#39;re using to edit to become useless in the process. For this reason, you&#39;ll only want to load packages in <strong>development mode</strong> while you are working on them. You&#39;ll perform your editing in <strong>stable mode</strong>, only switching to development mode to test your changes.</p><p>To open a development mode window, use the &quot;Application: Open Dev&quot; command. You can also run dev mode from the command line with <code>atom --dev</code>.</p><p>To load your package in development mode, create a symlink to it in <code>~/.atom/dev/packages</code>. This occurs automatically when you clone the package with <code>apm develop</code>. You can also run <code>apm link --dev</code> and <code>apm unlink --dev</code> from the package directory to create and remove dev-mode symlinks.</p><h5 id="installing-dependencies" tabindex="-1"><a class="header-anchor" href="#installing-dependencies" aria-hidden="true">#</a> Installing Dependencies</h5><p>You&#39;ll want to keep dependencies up to date by running <code>apm update</code> after pulling any upstream changes.</p><h2 id="creating-a-fork-of-a-core-package-in-atom-atom" tabindex="-1"><a class="header-anchor" href="#creating-a-fork-of-a-core-package-in-atom-atom" aria-hidden="true">#</a> Creating a Fork of a Core Package in atom/atom</h2>`,13),sc={href:"https://github.com/atom/atom/tree/master/packages",target:"_blank",rel:"noopener noreferrer"},tc=e("code",null,"packages",-1),oc={class:"custom-container tip"},ic=e("p",{class:"custom-container-title"},"Tips",-1),lc=e("strong",null,"Tip:",-1),cc=e("h3",{id:"creating-your-new-package",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#creating-your-new-package","aria-hidden":"true"},"#"),n(" Creating Your New Package")],-1),rc={href:"https://github.com/atom/atom/tree/master/packages/one-light-ui",target:"_blank",rel:"noopener noreferrer"},pc={href:"https://github.com/atom/atom/archive/master.zip",target:"_blank",rel:"noopener noreferrer"},dc=t(`<li><p>Unzip the file to a temporary location (for example <span class="platform-mac platform-linux"><code>/tmp/atom</code></span><span class="platform-windows"><code>C:\\TEMP\\atom</code></span>)</p></li><li><p>Copy the contents of the desired package into a working directory for your fork</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ &lt;span class=&#39;platform-mac platform-linux&#39;&gt;cp -R /tmp/atom/packages/one-light-ui ~/src/one-light-ui-plus&lt;/span&gt;&lt;span class=&#39;platform-windows&#39;&gt;xcopy C:\\TEMP\\atom\\packages\\one-light-ui C:\\src\\one-light-ui-plus /E /H /K&lt;/span&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Create a local repository and commit the initial contents</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ cd ~/src/one-light-ui-plus
$ git init
$ git commit -am &quot;Import core Atom package&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Update the <code>name</code> property in <code>package.json</code> to give your package a unique name</p></li><li><p>Make the other customizations that you have in mind</p></li><li><p>Commit your changes</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ git commit -am &quot;Apply initial customizations&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,6),uc={href:"https://help.github.com/articles/create-a-repo/",target:"_blank",rel:"noopener noreferrer"},hc=e("li",null,[e("p",null,"Follow the instructions in the github.com UI to push your code to your new online repository")],-1),mc=e("h3",{id:"merging-upstream-changes-into-your-package",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#merging-upstream-changes-into-your-package","aria-hidden":"true"},"#"),n(" Merging Upstream Changes into Your Package")],-1),gc=e("h3",{id:"maintaining-a-fork-of-a-core-package-in-atom-atom",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#maintaining-a-fork-of-a-core-package-in-atom-atom","aria-hidden":"true"},"#"),n(" Maintaining a Fork of a Core Package in atom/atom")],-1),kc={href:"https://github.com/atom/atom/blob/master/docs/rfcs/003-consolidate-core-packages.md",target:"_blank",rel:"noopener noreferrer"},vc={href:"https://github.com/atom/atom",target:"_blank",rel:"noopener noreferrer"},bc={href:"https://github.com/atom/one-light-ui",target:"_blank",rel:"noopener noreferrer"},fc={href:"https://github.com/atom/atom/tree/master/packages/one-light-ui",target:"_blank",rel:"noopener noreferrer"},yc=e("code",null,"packages/one-light-ui",-1),wc=e("p",null,"If you forked one of the core packages before it was moved into the atom/atom repository, and you want to continue merging upstream changes into your fork, please follow the steps below.",-1),_c=e("h4",{id:"step-by-step-guide",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#step-by-step-guide","aria-hidden":"true"},"#"),n(" Step-by-step guide")],-1),xc={href:"https://github.com/atom/one-light-ui",target:"_blank",rel:"noopener noreferrer"},qc=e("code",null,"one-light-ui-plus",-1),Ac=t(`<h5 id="add-atom-atom-as-a-remote" tabindex="-1"><a class="header-anchor" href="#add-atom-atom-as-a-remote" aria-hidden="true">#</a> Add atom/atom as a Remote</h5><p>Navigate to your local clone of your fork:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ cd path/to/your/fork
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),Tc={href:"https://github.com/atom/atom",target:"_blank",rel:"noopener noreferrer"},Cc=t(`<div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ git remote add upstream https://github.com/atom/atom.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="get-the-latest-changes-for-the-core-package" tabindex="-1"><a class="header-anchor" href="#get-the-latest-changes-for-the-core-package" aria-hidden="true">#</a> Get the Latest Changes for the Core Package</h5><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>Tip:</strong> Follow these steps each time you want to merge upstream changes into your fork.</p></div><p>Fetch the latest changes from the atom/atom repository:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ git fetch upstream
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Identify recent changes to the core package. For example, if you&#39;re maintaining a fork of the one-light-ui package, then you&#39;ll want to identify recent changes in the <code>packages/one-light-ui</code> directory:</p><div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ git log upstream/master -- packages/one-light-ui
8ac9919a0 Bump up border size (Hugh Baht, 17 minutes ago)
3bf4d226e Remove obsolete build status link in one-light-ui README (Jason Rudolph, 3 days ago)
3edf64ad0 Merge pull request #42 from atom/sm-select-list (simurai, 2 weeks ago)
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Look through the log and identify the commits that you want to merge into your fork.</p><h5 id="merge-upstream-changes-into-your-fork" tabindex="-1"><a class="header-anchor" href="#merge-upstream-changes-into-your-fork" aria-hidden="true">#</a> Merge Upstream Changes into Your Fork</h5>`,9),Sc={href:"https://git-scm.com/docs/git-format-patch",target:"_blank",rel:"noopener noreferrer"},Ic=e("code",null,"git format-patch",-1),jc={href:"https://git-scm.com/docs/git-am",target:"_blank",rel:"noopener noreferrer"},Pc=e("code",null,"git am",-1),Rc=e("code",null,"8ac9919a0",-1),Nc=t(`<div class="language-command-line ext-command-line line-numbers-mode"><pre class="language-command-line"><code>$ git format-patch -1 --stdout 8ac9919a0 | git am -p3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Repeat this step for each commit that you want to merge into your fork.</p><h3 id="summary-3" tabindex="-1"><a class="header-anchor" href="#summary-3" aria-hidden="true">#</a> Summary</h3><p>If you finished this chapter, you should be an Atom-hacking master. We&#39;ve discussed how you should work with CoffeeScript, and how to put it to good use in creating packages. You should also be able to do this in your own created theme now.</p><p>Even when something goes wrong, you should be able to debug this easily. But also fewer things should go wrong, because you are capable of writing great specs for Atom.</p><p>In the next chapter, we\u2019ll go into more of a deep dive on individual internal APIs and systems of Atom, even looking at some Atom source to see how things are really getting done.</p>`,6);function Ec(Uc,Mc){const s=d("ExternalLinkIcon"),i=d("RouterLink"),p=d("Tabs");return E(),U("div",null,[F,e("p",null,[n(`Now it's time to come to the "Hackable" part of the Hackable Editor. As we've seen throughout the second section, a huge part of Atom is made up of bundled packages. If you wish to add some functionality to Atom, you have access to the same APIs and tools that the core features of Atom has. From the `),e("a",D,[n("tree-view"),a(s)]),n(" to the "),e("a",L,[n("command-palette"),a(s)]),n(" to "),e("a",O,[n("find-and-replace"),a(s)]),n(" functionality, even the most core features of Atom are implemented as packages.")]),z,e("p",null,[n("We'll go over examples like this in a bit, but this is what the language looks like. Just about everything you can do with CoffeeScript in Atom is also doable in JavaScript. You can brush up on CoffeeScript at "),e("a",Y,[n("coffeescript.org"),a(s)]),n(".")]),e("p",null,[n("Less is an even simpler transition from CSS. It adds a number of useful things like variables and functions to CSS. You can learn about Less at "),e("a",V,[n("lesscss.org"),a(s)]),n(". Our usage of Less won't get too complex in this book however, so as long as you know basic CSS you should be fine.")]),$,e("p",null,[n("When Atom finishes loading, it will evaluate "),G,n(" in your "),H,B,n(" directory, giving you a chance to run CoffeeScript code to make customizations. Code in this file has full access to "),e("a",J,[n("Atom's API"),a(s)]),n(". If customizations become extensive, consider creating a package, which we will cover in "),K,n(".")]),X,e("p",null,[n("Because "),Z,n(" provides access to Atom's API, you can use it to implement useful commands without creating a new package or extending an existing one. Here's a command which uses the "),e("a",Q,[n("Selection API"),a(s)]),n(" and "),e("a",ee,[n("Clipboard API"),a(s)]),n(" to construct a Markdown link from the selected text and the clipboard contents as the URL:")]),ne,e("p",null,[n("Now, reload Atom and use the "),a(i,{to:"/getting-started/sections/atom-basics/#command-palette"},{default:o(()=>[n("Command Palette")]),_:1}),n(` to execute the new command, "Markdown: Paste As Link", by name. And if you'd like to trigger the command via a keyboard shortcut, you can define a `),a(i,{to:"/using-atom/sections/basic-customization/#customizing-keybindings"},{default:o(()=>[n("keybinding for the command")]),_:1}),n(".")]),ae,se,te,e("p",null,[n("The simplest way to start a package is to use the built-in package generator that ships with Atom. As you might expect by now, this generator is itself a separate package implemented in "),e("a",oe,[n("package-generator"),a(s)]),n(".")]),ie,e("div",le,[ce,e("p",null,[re,n(" You may encounter a situation where your package is not loaded. That is because a new package using the same name as an actual package hosted on "),e("a",pe,[n("atom.io"),a(s)]),n(' (e.g. "wordcount" and "word-count") is not being loaded as you expected. If you follow our suggestion above of using the '),de,n(" package name, you "),ue,n(" be safe \u{1F600}")])]),he,e("p",null,[n("Similar to "),e("a",me,[n("Node modules"),a(s)]),n(", Atom packages contain a "),ge,n(' file in their top-level directory. This file contains metadata about the package, such as the path to its "main" module, library dependencies, and manifests specifying the order in which its resources should be loaded.')]),e("p",null,[n("In addition to some of the regular "),e("a",ke,[n("Node "),ve,n(" keys"),a(s)]),n(" available, Atom "),be,n(" files have their own additions.")]),fe,e("ul",null,[ye,e("li",null,[we,n(": (Available in Atom 1.14 and above) This "),_e,n(" method is similar to "),xe,n(" but is called earlier. Whereas activation occurs after the workspace has been deserialized (and can therefore happen after "),a(i,{to:"/behind-atom/sections/serialization-in-atom/#serialization-methods"},{default:o(()=>[n("your package's deserializers")]),_:1}),n(" have been called), "),qe,n(" is guaranteed to be called before everything. Use "),Ae,n(" if you want to be sure that the workspace is ready; use "),Te,n(" if you need to do some setup prior to your deserializers or view providers being invoked.")]),Ce,Se]),Ie,e("p",null,[n("Style sheets for your package should be placed in the "),je,n(" directory. Any style sheets in this directory will be loaded and attached to the DOM when your package is activated. Style sheets can be written as CSS or "),e("a",Pe,[n("Less"),a(s)]),n(", but Less is recommended.")]),Re,e("p",null,[n("If you "),Ne,n(" need special styling, try to keep only structural styles in the package style sheets. If you "),Ee,n(" specify colors and sizing, these should be taken from the active theme's "),e("a",Ue,[n("ui-variables.less"),a(s)]),n(".")]),Me,e("p",null,[n("We'll cover more advanced keybinding stuff a bit later in "),a(i,{to:"/behind-atom/sections/keymaps-in-depth/"},{default:o(()=>[n("Keymaps in Depth")]),_:1}),n(".")]),We,e("p",null,[n("Let's look at the 3 lines we've added. First we get an instance of the current editor object (where our text to count is) by calling "),e("a",Fe,[De,a(s)]),n(".")]),e("p",null,[n("Next we get the number of words by calling "),e("a",Le,[Oe,a(s)]),n(" on our new editor object, then splitting that text on whitespace with a regular expression and then getting the length of that array.")]),ze,e("p",null,[n("Under the hood, "),e("a",Ye,[n("Jasmine v1.3"),a(s)]),n(" executes your tests, so you can assume that any DSL available there is also available to your package.")]),Ve,e("p",null,[n("We've now generated, customized and tested our first plugin for Atom. Congratulations! Now let's go ahead and "),a(i,{to:"/docs/atom-archive/hacking-atom/publishing/"},{default:o(()=>[n("publish")]),_:1}),n(" it so it's available to the world.")]),$e,e("p",null,[n("Now that we have our first package written, let's go through examples of other types of packages we can make. This section will guide you though creating a simple command that replaces the selected text with "),e("a",Ge,[n("ascii art"),a(s)]),n('. When you run our new command with the word "cool" selected, it will be replaced with:')]),He,e("p",null,[n("To begin, press "),Be,Je,n(" to bring up the "),e("a",Ke,[n("Command Palette"),a(s)]),n('. Type "generate package" and select the "Package Generator: Generate Package" command, just as we did in '),a(i,{to:"/hacking-atom/sections/package-word-count/#package-generator"},{default:o(()=>[n("the section on package generation")]),_:1}),n(". Enter "),Xe,n(" as the name of the package.")]),Ze,e("p",null,[n("As in "),a(i,{to:"/hacking-atom/sections/package-word-count/#counting-the-words"},{default:o(()=>[n("Counting Words")]),_:1}),n(", we're using "),Qe,n(" to get the object that represents the active text editor. If this "),en,n(" method is called when not focused on a text editor, nothing will happen.")]),e("p",null,[n("Next we insert a string into the current text editor with the "),e("a",nn,[an,a(s)]),n(' method. This will insert the text wherever the cursor currently is in the current editor. If there are selections, it will replace all selections with the "Hello, World!" text.')]),sn,e("p",null,[n("Now we need to convert the selected text to ASCII art. To do this we will use the "),e("a",tn,[n("figlet"),a(s)]),n(" Node module from "),e("a",on,[n("npm"),a(s)]),n(". Open "),ln,n(" and add the latest version of figlet to the dependencies:")]),cn,e("p",null,[n("There are a couple of new things in this example we should look at quickly. The first is the "),e("a",rn,[pn,a(s)]),n(" which, as you might guess, returns the text that is currently selected.")]),e("p",null,[n("We then call the Figlet code to convert that into something else and replace the current selection with it with the "),e("a",dn,[un,a(s)]),n(" call.")]),hn,mn,gn,e("p",null,[n("We saw in our "),a(i,{to:"/hacking-atom/sections/package-word-count/"},{default:o(()=>[n("Word Count")]),_:1}),n(" package how we could show information in a modal panel. However, panels aren't the only way to extend Atom's UI\u2014you can also add items to the workspace. These items can be dragged to new locations (for example, one of the docks on the edges of the window), and Atom will restore them the next time you open the project. This system is used by Atom's tree view, as well as by third party packages like "),e("a",kn,[n("Nuclide"),a(s)]),n(" for its console, debugger, outline view, and diagnostics (linter results).")]),vn,bn,e("p",null,[n("To begin, press "),fn,yn,n(" to bring up the "),e("a",wn,[n("Command Palette"),a(s)]),n('. Type "generate package" and select the "Package Generator: Generate Package" command, just as we did in '),a(i,{to:"/hacking-atom/sections/package-word-count/#package-generator"},{default:o(()=>[n("the section on package generation")]),_:1}),n(". Enter "),_n,n(" as the name of the package.")]),xn,e("p",null,[n("Atom's interface is rendered using HTML, and it's styled via "),e("a",qn,[n("Less"),a(s)]),n(" which is a superset of CSS. Don't worry if you haven't heard of Less before; it's just like CSS, but with a few handy extensions.")]),An,e("ul",null,[e("li",null,[n("Less is a superset of CSS, but it has some really handy features like variables. If you aren't familiar with its syntax, take a few minutes to "),e("a",Tn,[n("familiarize yourself"),a(s)]),n(".")]),e("li",null,[n("You may also want to review the concept of a "),Cn,n(" (as covered in "),a(i,{to:"/hacking-atom/sections/package-word-count/#packagejson"},{default:o(()=>[n("Atom "),Sn]),_:1}),n("). This file is used to help distribute your theme to Atom users.")]),In,e("li",null,[n("You can find existing themes to install or fork in "),e("a",jn,[n("the atom.io themes registry"),a(s)]),n(".")])]),Pn,e("ol",null,[e("li",null,[n("Fork the "),e("a",Rn,[n("ui-theme-template"),a(s)])]),Nn]),En,e("ul",null,[e("li",null,[e("a",Un,[n("ui-variables.less"),a(s)])]),e("li",null,[e("a",Mn,[n("syntax-variables.less"),a(s)])])]),Wn,Fn,Dn,e("p",null,[n("Your package should generally only specify structural styling, and these should come from "),e("a",Ln,[n("the style guide"),a(s)]),n(". Your package shouldn't specify colors, padding sizes, or anything in absolute pixels. You should instead use the theme variables. If you follow this guideline, your package will look good out of the box with any theme!")]),On,e("p",null,[n("Reloading by pressing "),zn,Yn,n(" after you make changes to your theme is less than ideal. Atom supports "),e("a",Vn,[n("live updating"),a(s)]),n(" of styles on Atom windows in Dev Mode.")]),$n,e("p",null,[n("Check out Google's "),e("a",Gn,[n("extensive tutorial"),a(s)]),n(" for a short introduction.")]),Hn,e("p",null,[n("If you are creating an UI theme, you'll want a way to see how your theme changes affect all the components in the system. The "),e("a",Bn,[n("Styleguide"),a(s)]),n(" is a page that renders every component Atom supports.")]),Jn,e("p",null,[n("Follow the steps on the "),a(i,{to:"/docs/atom-archive/hacking-atom/publishing/"},{default:o(()=>[n("Publishing")]),_:1}),n(" page. The example used is for the Word Count package, but publishing a theme works exactly the same.")]),Kn,e("p",null,[n("Atom's syntax highlighting and code folding system is powered by "),e("a",Xn,[n("Tree-sitter"),a(s)]),n(". Tree-sitter parsers create and maintain full "),e("a",Zn,[Qn,a(s)]),n(" representing your code.")]),ea,e("p",null,[n("Tree-sitter generates parsers based on "),e("a",na,[n("context-free grammars"),a(s)]),n(" that are typically written in JavaScript. The generated parsers are C libraries that can be used in other applications as well as Atom.")]),e("p",null,[n("They can also be developed and tested at the command line, separately from Atom. Tree-sitter has "),e("a",aa,[n("its own documentation page"),a(s)]),n(" on how to create these parsers. The "),e("a",sa,[n("Tree-sitter GitHub organization"),a(s)]),n(" also contains a lot of example parsers that you can learn from, each in its own repository.")]),e("p",null,[n("Once you have created a parser, you need to publish it to "),e("a",ta,[n("the NPM registry"),a(s)]),n(" to use it in Atom. To do this, make sure you have a "),oa,n(" and "),ia,n(" in your parser's "),la,n(":")]),ca,e("ul",null,[ra,pa,e("li",null,[da,n(" - The name of the parser node module that will be used for parsing. This string will be passed directly to "),e("a",ua,[ha,a(s)]),n(" in order to load the parser.")]),ma]),ga,e("p",null,[n("Note that in this selector, we're using the "),e("a",ka,[n("immediate child combinator"),a(s)]),n(" ("),va,n("). Arbitrary descendant selectors without this combinator (for example "),ba,n(", which would match any "),fa,n(" occurring anywhere within a "),ya,n(") are currently not supported.")]),wa,e("p",null,[n("You can use the "),e("a",_a,[xa,n(" pseudo-class"),a(s)]),n(" to select nodes based on their order within their parent. For example, this example selects "),qa,n(" nodes which are the fourth (zero-indexed) child of a "),Aa,n(" node.")]),Ta,e("p",null,[n("Finally, you can use double-quoted strings in the selectors to select "),Ca,n(" tokens in the syntax tree, like "),Sa,n(" and "),Ia,n(". See "),e("a",ja,[n("the Tree-sitter documentation"),a(s)]),n(" for more information about named vs anonymous tokens.")]),Pa,e("p",null,[n("If multiple selectors in the "),Ra,n(" object match a node, the node's classes will be decided based on the "),e("a",Na,[n("most specific"),a(s)]),n(" selector. Note that the "),Ea,n(" and "),Ua,n(" rules do "),Ma,n(" affect specificity, so you may need to supply the same "),Wa,n(" or "),Fa,n(" rules for multiple selectors to ensure that they take precedence over other selectors. You can use the same selector multiple times in a scope mapping, within different comma-separated keys:")]),Da,e("p",null,[n("For example, in JavaScript, "),e("a",La,[n("tagged template literals"),a(s)]),n(" sometimes contain code written in a different language, and the name of the language is often used in the 'tag' function, as shown in this example:")]),Oa,e("ul",null,[e("li",null,[e("a",za,[n("Bash"),a(s)])]),e("li",null,[e("a",Ya,[n("C"),a(s)])]),e("li",null,[e("a",Va,[n("Go"),a(s)])]),e("li",null,[e("a",$a,[n("HTML"),a(s)])]),e("li",null,[e("a",Ga,[n("JavaScript"),a(s)])]),e("li",null,[e("a",Ha,[n("Python"),a(s)])]),e("li",null,[e("a",Ba,[n("Ruby"),a(s)])]),e("li",null,[e("a",Ja,[n("TypeScript"),a(s)])])]),Ka,e("p",null,[n("Grammar files are written in the "),e("a",Xa,[n("CSON"),a(s)]),n(" or "),e("a",Za,[n("JSON"),a(s)]),n(" format. Whichever one you decide to use is up to you, but this tutorial will be written in CSON.")]),Qa,e("p",null,[n("The default package template creates a lot of folders that aren't needed for grammar packages. Go ahead and delete the "),es,n(", "),ns,n(", "),as,n(", and "),ss,n(" folders. Furthermore, in "),ts,n(", remove the "),os,n(" section. Now create a new folder called "),is,n(", and inside that a file called "),ls,n(". This is the main file that we will be working with - start by populating it with a "),e("a",cs,[n("boilerplate template"),a(s)]),n(". Now let's go over what each key means.")]),rs,e("p",null,[ps,n(" is where your regex is contained, and "),ds,n(" is the scope name that is to be applied to the entirety of the match. More information about scope names can be found in "),e("a",us,[n("Section 12.4 of the TextMate Manual"),a(s)]),n(".")]),hs,e("ul",null,[e("li",null,[e("a",ms,[n("DamnedScholar's Gist"),a(s)]),n(". Provides a template of most keys, each with a short comment explaining their function.")]),e("li",null,[e("a",gs,[n("Aerijo's Gist"),a(s)]),n(". [Work in Progress] Another guide that attempts to fully explain making a grammar package for users of all levels.")]),ks,e("li",null,[e("a",vs,[n("Oniguruma docs"),a(s)]),n(". The documentation for the regex engine Atom uses.")]),e("li",null,[e("a",bs,[n("TextMate Section 12"),a(s)]),n(". Atom uses the same principles as laid out here, including the list of acceptable scopes.")]),e("li",null,[e("a",fs,[ys,a(s)]),n(". Not necessary to write a grammar, but a good technical reference for what Atom is doing behind the scenes.")]),e("li",null,[n("Look at any existing packages, such as the ones for "),e("a",ws,[n("Python"),a(s)]),n(", "),e("a",_s,[n("JavaScript"),a(s)]),n(", "),e("a",xs,[n("HTML"),a(s)]),n(", "),e("a",qs,[n("and more"),a(s)]),n(".")])]),M(`
TODO:
* \`repository\` and including from repository patterns
* Wrap-up
* Implement Package Generator functionality to generate a grammar
* Intermediate + advanced grammar tutorials
`),As,e("p",null,[n("Atom bundles a command line utility called "),Ts,n(" which we first used back in "),a(i,{to:"/using-atom/sections/atom-packages/#command-line"},{default:o(()=>[n("Command Line")]),_:1}),n(" to search for and install packages via the command line. The "),Cs,n(" command can also be used to publish Atom packages to the public registry and update them.")]),Ss,Is,e("ul",null,[js,e("li",null,[n("Your package is in a Git repository that has been pushed to "),e("a",Ps,[n("GitHub"),a(s)]),n(". Follow "),e("a",Rs,[n("this guide"),a(s)]),n(" if your package isn't already on GitHub.")])]),Ns,e("p",null,[n("Before you publish a package it is a good idea to check ahead of time if a package with the same name has already been published to "),e("a",Es,[n("the atom.io package registry"),a(s)]),n(". You can do that by visiting "),Us,n(" to see if the package already exists. If it does, update your package's name to something that is available before proceeding.")]),Ms,e("ol",null,[Ws,Fs,e("li",null,[n("Creates a new "),e("a",Ds,[n("Git tag"),a(s)]),n(" for the version being published.")]),Ls,Os]),zs,e("p",null,[n("If this is the first package you are publishing, the "),Ys,n(" command may prompt you for your GitHub username and password. If you have two-factor authentication enabled, use a "),e("a",Vs,[n("personal access token"),a(s)]),n(" in lieu of a password. This is required to publish and you only need to enter this information the first time you publish. The credentials are stored securely in your "),e("a",$s,[n("keychain"),a(s)]),n(" once you login.")]),Gs,e("p",null,[n("Use "),Hs,n(" when you make a change that breaks backwards compatibility, like changing defaults or removing features. Use "),Bs,n(" when adding new functionality or options, but without breaking backwards compatibility. Use "),Js,n(" when you've changed the implementation of existing features, but without changing the behaviour or options of your package. Check out "),e("a",Ks,[n("semantic versioning"),a(s)]),n(" to learn more about best practices for versioning your package releases.")]),Xs,Zs,e("p",null,[n("Atom comes bundled with the "),e("a",Qs,[n("Octicons 4.4.0"),a(s)]),n(" icon set. Use them to add icons to your packages.")]),et,nt,e("p",null,[n("In the "),a(i,{to:"/hacking-atom/sections/creating-a-theme/#atom-styleguide"},{default:o(()=>[n("Styleguide")]),_:1}),n(` under the "Icons" section you'll find all the Octicons that are available.`)]),at,e("p",null,[n("Although icons can make your UI visually appealing, when used without a text label, it can be hard to guess its meaning. In cases where space for a text label is insufficient, consider adding a "),e("a",st,[n("tooltip"),a(s)]),n(" that appears on hover. Or a more subtle "),tt,n(" attribute would help as well.")]),ot,e("p",null,[n("Atom provides several tools to help you understand unexpected behavior and debug problems. This guide describes some of those tools and a few approaches to help you debug and provide more helpful information when "),e("a",it,[n("submitting issues"),a(s)]),n(":")]),lt,e("p",null,[n("Then check for the "),e("a",ct,[n("latest Stable version"),a(s)]),n(".")]),a(p,{id:"1675",data:[{title:"Linux"},{title:"Mac"},{title:"Windows"}],"tab-id":"Updating"},{tab0:o(({title:l,value:c,isActive:r})=>[e("p",null,[n("To update to the latest version, you can download it from "),e("a",rt,[n("the atom.io website"),a(s)]),n(" or "),e("a",pt,[n("the latest release on GitHub"),a(s)]),n(" and follow the "),a(i,{to:"/getting-started/sections/installing-atom/#installing-atom-on-linux"},{default:o(()=>[n("Installation instructions for Atom on Linux")]),_:1}),n(".")])]),tab1:o(({title:l,value:c,isActive:r})=>[e("p",null,[n("If there is a more recent release available, you can update to the most recent release with the auto-update functionality built in to Atom and the "),e("a",dt,[n("about package"),a(s)]),n(". You can open the About View by using the "),ut,n(' menu option to see whether Atom is up-to-date, downloading a new update or click the button to "Restart and Install Update".')])]),tab2:o(({title:l,value:c,isActive:r})=>[e("p",null,[n("If there is a more recent release available, you can update to the most recent release with the auto-update functionality built in to Atom and the "),e("a",ht,[n("about package"),a(s)]),n(". You can open the About View by using the "),mt,n(' menu option to see whether Atom is up-to-date, downloading a new update or click the button to "Restart and Install Update".')])]),_:1}),e("p",null,[n("If you're building Atom from source, pull down the latest version of master and "),e("a",gt,[n("re-build"),a(s)]),n(".")]),kt,a(p,{id:"1735",data:[{title:"Linux"},{title:"Mac"},{title:"Windows"}],"tab-id":"Debugging"},{tab0:o(({title:l,value:c,isActive:r})=>[vt]),tab1:o(({title:l,value:c,isActive:r})=>[bt]),tab2:o(({title:l,value:c,isActive:r})=>[ft]),_:1}),yt,e("p",null,[n("If you have packages installed that use native Node modules, when you upgrade to a new version of Atom, they might need to be rebuilt. Atom detects this and through the "),e("a",wt,[n("incompatible-packages package"),a(s)]),n(" displays an indicator in the status bar when this happens.")]),_t,xt,qt,At,e("p",null,[n("Open Atom's "),e("a",Tt,[n("Settings View"),a(s)]),n(" with "),Ct,St,n(", the "),It,jt,Pt,n(' menu option, or the "Settings View: Open" command from the '),e("a",Rt,[n("Command Palette"),a(s)]),n(".")]),Nt,e("p",null,[n("Check Atom's settings in the Settings View, there's a description of most configuration options in the "),a(i,{to:"/using-atom/sections/basic-customization/#configuration-key-reference"},{default:o(()=>[n("Basic Customization section")]),_:1}),n('. For example, if you want Atom to hide the invisible symbols representing whitespace characters, disable the "Show Invisibles" option.')]),Et,e("p",null,[n("Since Atom ships with a set of packages and you can also install additional packages yourself, check the list of packages and their settings. For instance, if you'd like to get rid of the vertical line in the middle of the editor, disable the "),e("a",Ut,[n("Wrap Guide package"),a(s)]),n(". And if you don't like it when Atom strips trailing whitespace or ensures that there's a single trailing newline in the file, you can configure that in the "),e("a",Mt,[n("whitespace package's"),a(s)]),n(" settings.")]),Wt,Ft,e("p",null,[n("You might have defined some custom styles, keymaps or snippets in "),a(i,{to:"/using-atom/sections/basic-customization/"},{default:o(()=>[n("one of your configuration files")]),_:1}),n(". In some situations, these personal hacks might be causing the unexpected behavior you're observing so try clearing those files and restarting Atom.")]),Dt,e("p",null,[n("If a command is not executing when you press a key combination or the wrong command is executing, there might be an issue with the keybinding for that combination. Atom ships with the "),e("a",Lt,[n("Keybinding Resolver"),a(s)]),n(", a neat package which helps you understand what key Atom saw you press and the command that was triggered because of it.")]),Ot,e("p",null,[n("If multiple keybindings are matched, Atom determines which keybinding will be executed based on the "),a(i,{to:"/behind-atom/sections/keymaps-in-depth/#specificity-and-cascade-order"},{default:o(()=>[n("specificity of the selectors and the order in which they were loaded")]),_:1}),n(". If the command you wanted to trigger is listed in the Keybinding Resolver, but wasn't the one that was executed, this is normally explained by one of two causes:")]),zt,e("p",null,[n("Atom loads core Atom keybindings and package keybindings first, and user-defined keybindings last. Since user-defined keybindings are loaded last, you can use your "),Yt,n(" file to tweak the keybindings and sort out problems like these. See the "),a(i,{to:"/behind-atom/sections/keymaps-in-depth/"},{default:o(()=>[n("Keymaps in Depth section")]),_:1}),n(" for more information.")]),e("p",null,[n("If you notice that a package's keybindings are taking precedence over core Atom keybindings, it might be a good idea to report the issue on that package's GitHub repository. You can contact atom maintainers on "),e("a",Vt,[n("Atom's github discussions"),a(s)])]),$t,e("p",null,[n("You can determine which fonts are being used to render a specific piece of text by using the Developer Tools. To open the Developer Tools press "),Gt,Ht,n('. Once the Developer Tools are open, click the "Elements" tab. Use the '),e("a",Bt,[n("standard tools for finding the element"),a(s)]),n(' containing the text you want to check. Once you have selected the element, you can click the "Computed" tab in the styles pane and scroll to the bottom. The list of fonts being used will be shown there:')]),Jt,a(p,{id:"1912",data:[{title:"Linux"},{title:"Mac"},{title:"Windows"}],"tab-id":"Debugging"},{tab0:o(({title:l,value:c,isActive:r})=>[Kt]),tab1:o(({title:l,value:c,isActive:r})=>[Xt,Zt,Qt]),tab2:o(({title:l,value:c,isActive:r})=>[eo]),_:1}),no,e("p",null,[n("If Atom is taking a long time to start, you can use the "),e("a",ao,[n("Timecop package"),a(s)]),n(" to get insight into where Atom spends time while loading.")]),so,to,oo,io,lo,e("p",null,[n("If you're experiencing performance problems in a particular situation, your "),e("a",co,[n("Issue reports"),a(s)]),n(" will be more valuable if you include a saved profile from Chrome's CPU profiler that gives some insight into what is slow.")]),ro,e("p",null,[n("To learn more, check out the "),e("a",po,[n("Chrome documentation on CPU profiling"),a(s)]),n(".")]),uo,e("p",null,[n("Check out the pre-requisites in the "),e("a",ho,[n("build instructions"),a(s)]),n(" for your platform for more details.")]),mo,e("p",null,[n("Atom uses "),e("a",go,[n("Jasmine"),a(s)]),n(" as its spec framework. Any new functionality should have specs to guard against regressions.")]),ko,e("p",null,[e("a",vo,[n("Atom specs"),a(s)]),n(" and "),e("a",bo,[n("package specs"),a(s)]),n(" are added to their respective "),fo,n(" directory. The example below creates a spec for Atom core.")]),yo,e("p",null,[n("The best way to learn about expectations is to read the "),e("a",wo,[n("Jasmine documentation"),a(s)]),n(" about them. Below is a simple example.")]),_o,e("ul",null,[e("li",null,[e("a",xo,[n("jasmine-jquery"),a(s)])]),qo]),e("p",null,[n("These are defined in "),e("a",Ao,[n("spec/spec-helper.coffee"),a(s)]),n(".")]),To,e("p",null,[n("For a more detailed documentation on asynchronous tests please visit the "),e("a",Co,[n("Jasmine documentation"),a(s)]),n(".")]),So,e("p",null,[n("It is now easy to run the specs in a CI environment like Travis and AppVeyor. See the "),e("a",Io,[n("Travis CI For Your Packages"),a(s)]),n(" and "),e("a",jo,[n("AppVeyor CI For Your Packages"),a(s)]),n(" posts for more details.")]),Po,e("p",null,[n("Now that we've told Atom that we want our package to handle URIs beginning with "),Ro,n(" via our "),No,n(" method, we need to actually write this method. Atom passes two arguments to your URI handler method; the first one is the fully-parsed URI plus query string, "),e("a",Eo,[n("parsed with Node's "),Uo,a(s)]),n(". The second argument is the raw, string URI; this is normally not needed since the first argument gives you structured information about the URI.")]),Mo,e("p",null,[n("Creation and deletion operations may take a few milliseconds to complete. If you need to remove many files and folders consider "),e("a",Wo,[n("RimRAF"),a(s)]),n(" which has built-in retry logic for this.")]),Fo,e("p",null,[n("It's possible that you have themes or grammars from "),e("a",Do,[n("TextMate"),a(s)]),n(" that you like and use and would like to convert to Atom. If so, you're in luck because there are tools to help with the conversion.")]),Lo,Oo,e("p",null,[n("Let's convert the TextMate bundle for the "),e("a",zo,[n("R"),a(s)]),n(" programming language. You can find other existing TextMate bundles "),e("a",Yo,[n("on GitHub"),a(s)]),n(".")]),Vo,e("p",null,[n("This section will go over how to convert a "),e("a",$o,[n("TextMate"),a(s)]),n(" theme to an Atom theme.")]),Go,e("p",null,[n("TextMate themes use "),e("a",Ho,[n("plist"),a(s)]),n(" files while Atom themes use "),e("a",Bo,[n("CSS"),a(s)]),n(" or "),e("a",Jo,[n("Less"),a(s)]),n(" to style the UI and syntax in the editor.")]),Ko,Xo,e("p",null,[n("Download the theme you wish to convert, you can browse existing TextMate themes on the "),e("a",Zo,[n("TextMate website"),a(s)]),n(".")]),Qo,e("p",null,[n("Follow the "),e("a",ei,[n("GitHub Help instructions on how to fork a repo"),a(s)]),n(".")]),ni,a(p,{id:"2629",data:[{title:"Linux"},{title:"Mac"},{title:"Windows"}],"tab-id":"hacking-atom"},{tab0:o(({title:l,value:c,isActive:r})=>[ai]),tab1:o(({title:l,value:c,isActive:r})=>[si]),tab2:o(({title:l,value:c,isActive:r})=>[ti]),_:1}),oi,e("ol",null,[ii,e("li",null,[n("Packages that contain stylesheets, such as syntax themes, will have those stylesheets automatically reloaded by the "),e("a",li,[n("dev-live-reload"),a(s)]),n(" package. This does not live reload JavaScript or CoffeeScript files \u2014 you'll need to reload the window ("),ci,n(") to see changes to those.")])]),ri,a(p,{id:"2685",data:[{title:"Linux"},{title:"Mac"},{title:"Windows"}],"tab-id":"hacking-atom"},{tab0:o(({title:l,value:c,isActive:r})=>[pi,di,e("ul",null,[ui,hi,mi,e("li",null,[n("Node.js 10.12 or later (we recommend installing it via "),e("a",gi,[n("nvm"),a(s)]),n(")")]),ki,vi,e("li",null,[n("Development headers for "),e("a",bi,[n("libsecret"),a(s)]),n(".")])]),fi,yi,wi,_i,xi,qi,Ai,Ti,Ci,Si,Ii,ji,Pi]),tab1:o(({title:l,value:c,isActive:r})=>[Ri,e("ul",null,[Ni,e("li",null,[n("Node.js 10.12 or later (we recommend installing it via "),e("a",Ei,[n("nvm"),a(s)]),n(")")]),Ui,Mi,e("li",null,[n("Command Line Tools for "),e("a",Wi,[n("Xcode"),a(s)]),n(" (run "),Fi,n(" to install)")])])]),tab2:o(({title:l,value:c,isActive:r})=>[e("ul",null,[Di,Li,e("li",null,[Oi,e("ul",null,[e("li",null,[e("a",zi,[n("Get Python from the Microsoft Store"),a(s)]),n(", or")]),Yi])]),e("li",null,[Vi,e("ul",null,[e("li",null,[$i,n(),e("a",Gi,[n("windows-build-tools"),a(s)]),n(' - From an elevated Powershell window (right click and "run as Administrator") do: '),Hi,n(" to install")]),e("li",null,[Bi,n(),e("a",Ji,[n("Visual C++ Build Tools 2015 or 2017"),a(s)])]),e("li",null,[Ki,n(),e("a",Xi,[n("Visual Studio 2015 or 2017"),a(s)]),n(" (Community Edition or better)")])]),Zi,Qi])])]),_:1}),el,a(p,{id:"2907",data:[{title:"Linux"},{title:"Mac"},{title:"Windows"}],"tab-id":"hacking-atom"},{tab0:o(({title:l,value:c,isActive:r})=>[nl,al]),tab1:o(({title:l,value:c,isActive:r})=>[sl,tl]),tab2:o(({title:l,value:c,isActive:r})=>[ol,il]),_:1}),ll,a(p,{id:"2930",data:[{title:"Linux"},{title:"Mac"},{title:"Windows"}],"tab-id":"hacking-atom"},{tab0:o(({title:l,value:c,isActive:r})=>[cl]),tab1:o(({title:l,value:c,isActive:r})=>[rl]),tab2:o(({title:l,value:c,isActive:r})=>[pl]),_:1}),dl,a(p,{id:"3002",data:[{title:"Linux"},{title:"Mac"},{title:"Windows"}],"tab-id":"hacking-atom"},{tab0:o(({title:l,value:c,isActive:r})=>[ul,hl,ml,gl,kl,vl,bl,e("p",null,[n("See also "),e("a",fl,[n("#2082"),a(s)]),n(".")]),yl,wl,_l,xl,ql,Al,Tl,Cl,Sl,Il,e("p",null,[n("Use "),e("a",jl,[n("this search"),a(s)]),n(" to get a list of reports about build errors on Linux.")])]),tab1:o(({title:l,value:c,isActive:r})=>[e("p",null,[n("Use "),e("a",Pl,[n("this search"),a(s)]),n(" to get a list of reports about build errors on macOS.")])]),tab2:o(({title:l,value:c,isActive:r})=>[Rl,e("ul",null,[Nl,El,e("li",null,[Ul,e("ul",null,[Ml,e("li",null,[n("Try moving the repository to "),Wl,n(". Most likely, the path is too long. See "),e("a",Fl,[n("issue #2200"),a(s)]),n(".")])])]),e("li",null,[Dl,e("ul",null,[e("li",null,[n("This can occur because your home directory ("),Ll,n(") has non-ASCII characters in it. This is a bug in "),e("a",Ol,[n("gyp"),a(s)]),n(" which is used to build native Node.js modules and there is no known workaround. "),zl])])]),Yl,Vl,$l,Gl,Hl]),Bl,e("ul",null,[e("li",null,[n("If all else fails, use "),e("a",Jl,[n("this search"),a(s)]),n(" to get a list of reports about build errors on Windows, and see if yours has already been reported.")]),Kl])]),_:1}),Xl,e("p",null,[n("If you think you know which package is causing the issue you are reporting, feel free to open up the issue in that specific repository instead. When in doubt just open the issue on the "),e("a",Zl,[n("atom/atom"),a(s)]),n(" repository but be aware that it may get closed and reopened in the proper package's repository.")]),Ql,ec,e("p",null,[n("The first step is creating your own clone. For some packages, you may also need to install the "),a(i,{to:"/hacking-atom/sections/hacking-on-atom-core/#building"},{default:o(()=>[n("requirements necessary for building Atom")]),_:1}),n(" in order to run "),nc,n(".")]),ac,e("p",null,[n("Several of Atom's core packages are maintained in the "),e("a",sc,[tc,n(" directory of the atom/atom repository"),a(s)]),n(". If you would like to use one of these packages as a starting point for your own package, please follow the steps below.")]),e("div",oc,[ic,e("p",null,[lc,n(" In most cases, we recommend "),a(i,{to:"/docs/atom-archive/hacking-atom/package-word-count/#package-generator"},{default:o(()=>[n("generating a brand new package")]),_:1}),n(" or a "),a(i,{to:"/docs/atom-archive/hacking-atom/creating-a-theme/#creating-a-syntax-theme"},{default:o(()=>[n("brand new theme")]),_:1}),n(" as the starting point for your creation. The guide below applies only to situations where you want to create a package that closely resembles a core Atom package.")])]),cc,e("p",null,[n("For the sake of this guide, let's assume that you want to start with the current code in the "),e("a",rc,[n("one-light-ui"),a(s)]),n(' package, make some customizations to it, and publish your new package under the name "one-light-ui-plus".')]),e("ol",null,[e("li",null,[e("p",null,[n("Download the "),e("a",pc,[n("current contents of the atom/atom repository as a zip file"),a(s)])])]),dc,e("li",null,[e("p",null,[e("a",uc,[n("Create a public repository on github.com"),a(s)]),n(" for your new package")])]),hc,e("li",null,[e("p",null,[n("Follow the steps in the "),a(i,{to:"/docs/atom-archive/hacking-atom/sections/publishing/"},{default:o(()=>[n("Publishing guide")]),_:1}),n(" to publish your new package")])])]),mc,e("p",null,[n("The code in the original package will continue to evolve over time, either to fix bugs or to add new enhancements. You may want to incorporate some or all of those updates into your package. To do so, you can follow "),a(i,{to:"/docs/atom-archive/hacking-atom/sections/maintaining-a-fork-of-a-core-package-in-atom-atom/#step-by-step-guide"},{default:o(()=>[n("these steps")]),_:1}),n(" for merging upstream changes into your package.")]),gc,e("p",null,[n("Originally, each of Atom's core packages resided in a separate repository. In 2018, in an effort to streamline the development of Atom by reducing overhead, the Atom team "),e("a",kc,[n("consolidated many core Atom packages"),a(s)]),n(" into the "),e("a",vc,[n("atom/atom repository"),a(s)]),n(". For example, the one-light-ui package was originally maintained in the "),e("a",bc,[n("atom/one-light-ui"),a(s)]),n(" repository, but it is now maintained in the "),e("a",fc,[yc,n(" directory in the atom/atom repository"),a(s)]),n(".")]),wc,_c,e("p",null,[n("For the sake of this guide, let's assume that you forked the "),e("a",xc,[n("atom/one-light-ui"),a(s)]),n(" repository, renamed your fork to "),qc,n(", and made some customizations.")]),Ac,e("p",null,[n("Add the "),e("a",Tc,[n("atom/atom repository"),a(s)]),n(" as a git remote:")]),Cc,e("p",null,[n("For each commit that you want to bring into your fork, use "),e("a",Sc,[Ic,a(s)]),n(" in conjunction with "),e("a",jc,[Pc,a(s)]),n(". For example, to merge commit "),Rc,n(" into your fork:")]),Nc])}const Yc=N(W,[["render",Ec],["__file","index.html.vue"]]);export{Yc as default};
