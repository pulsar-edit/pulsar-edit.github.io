import{_ as e,o as t,c as a,e as i,a as o,f as r}from"./app.87197fef.js";const n={},s=o("p",null,"How did I decide to start working on tree-sitter, and all preparations to modernize it on Pulsar",-1),h=r('<h1 id="tree-sitter" tabindex="-1"><a class="header-anchor" href="#tree-sitter" aria-hidden="true">#</a> Tree-Sitter</h1><p>First, what is tree-sitter? Tree-sitter is basically a library that reads the source code and parses into an abstract syntax tree. That tree can then be used to find indentation rules or highlight elements like local variables, symbols, tags and everything.</p><p>So, it&#39;s an alternative for TextMate grammars, but more powerful and faster. It also supports &quot;incremental parsing&quot;, meaning that if you have a <em>huge file</em> that takes some time to highlight, when you make changes to that document you only need to wait for a fraction of time to parse the contents.</p><h2 id="current-pulsar-implementation" tabindex="-1"><a class="header-anchor" href="#current-pulsar-implementation" aria-hidden="true">#</a> Current Pulsar implementation</h2><p>The way that tree-sitter works right now is basically is the same way that it was implemented in Atom a long time ago: it basically tries to match the elements of the AST and convert that into TextMate scopes. So, supposing that it finds, for example, a left right assignment (something like <code>a = 10</code>)- it will basically try to convert the &quot;left token&quot; to a variable.</p><p>That&#39;s where the problems begin. The new versions of tree-sitter are changing the AST in a way that Atom (or Pulsar) does not support. The second problem is this remapping: currently, it uses some pattern in CSON files, with some kind of &quot;CSS selector&quot;-based metalanguage. CSON is basically a YAML version of JSON and it only works in Atom (and now in Pulsar)...</p><p>Basically - it means that all this remapping only works on Pulsar, and have no other editors that supports this; which, again, means that every version bump for grammars will have to keep remapping things over and over again (considering that all tree elements and nodes are considered &quot;internal state&quot; of each grammar) which is far from ideal (and does not scale, specially considering that we&#39;re a small team). Finally, it means that we need a huge number of tests that are copies of Tree-Sitter and TextMate just to be sure we&#39;re doing the same job that others are doing (again, far from ideal, specially considering that programming languages evolve, and we need to keep track of all this evolution, for <strong>all languages</strong> that Pulsar supports - a work that, basically, these grammars are already doing, and will probably do better than us).</p><p>So, we would like to reuse what other editors use, and have the exact same experience without having to, from time to time, revisit all these &quot;remappings&quot; and that is where the queries come into action:</p><p>Modern tree-sitter uses queries, that are basically a scheme-inspired file that basically maps AST to syntax elements (for highlighting), tags elements as local variables (also to help highlighting) and basically is more powerfull than the metalanguage we use currently in Pulsar.</p><h2 id="modernizing-the-current-implementation" tabindex="-1"><a class="header-anchor" href="#modernizing-the-current-implementation" aria-hidden="true">#</a> Modernizing the current implementation</h2><p>So recently, I was surprised with some very rare free time, and decided to work on modernizing tree-sitter on the editor. The main reason is also because, when we upgraded Pulsar to use Electron 12, we also have to update both tree-sitter and grammars, some of these are now not highlighting as they should. That, combined with the fact that the version of tree-sitter we&#39;re using (the native one, that have bindings to Node.JS) will stop working after electron 14 (that is, two versions for now) made me try to implement a WASM-based version.</p><p>And that where the problems begin.</p><p>Basically, nobody knows exactly how a &quot;modern implementation&quot; of tree-sitter looks like. I tried to talk with different plugin authors on different editor and they all gave me different responses. Most people rewrite the queries that come with tree-sitter, for example... questions that I asked, like for example, if there&#39;s a pattern for tokens, were answered with &quot;if there&#39;s a pattern nobody actually learned that or even documented it&quot;; also about queries, most people answered me that &quot;that the query result is up to interpretation&quot; which is not fine for my approaches...</p><p>And so, without any official guide, I decided to try to match what the tree-sitter command-line interface does. Tree-sitter has a CLI that allows to highlight files. You run with <code>tree-sitter highlight &lt;name-of-file&gt;</code>, basically, and I found that it uses a new library that&#39;s basically not yet complete and does not have bindings for the browser (WASM) or Node. So first, I tried to analyze if it was going to be possible to expose this library to JS, but I didn&#39;t find a way to make &quot;incremental parsing&quot; (a huge interesting feature of tree-sitter where you basically inform to the highlighter <em>what changed</em> instead of the whole tree, and the library will only re-tokenize that specific fragment instead).</p><p>Then, I decided to do what some every sane person would <em>probably not do</em> - implement everything by hand, improvising where things didn&#39;t work. Tokenize with the CLI, and try to match the same structure in Pulsar, fixing things where that didn&#39;t work... and that&#39;s part one.</p>',15);function l(d,m){return t(),a("div",null,[s,i(" more "),h])}const c=e(n,[["render",l],["__file","20230209-mauricioszabo-tree-sitter-part-1.html.vue"]]);export{c as default};
